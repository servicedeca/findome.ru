<?php
/**
 * @file
 */

define('REALTY_FRONT_THEME_PATH', drupal_get_path('theme', 'realty_theme'));


/**
 * Get a list of types of apartments.
 */
function realty_get_types_apartment()
{
    return array('1' => '1',
        '1c' => '1c',
        '2' => '2',
        '2c' => '2c',
        '3' => '3',
        '3c' => '3c',
        '4' => '4',
        '5' => '5',
    );
}

function do_post_request($url, $data, $optional_headers = null)
{
    $params = array('http' => array(
        'method' => 'POST',
        'content' => $data
    ));
    if ($optional_headers !== null) {
        $params['http']['header'] = $optional_headers;
    }
    $ctx = stream_context_create($params);
    $fp = @fopen($url, 'rb', false, $ctx);
    if (!$fp) {
        throw new Exception("Problem with $url, $php_errormsg");
    }
    $response = @stream_get_contents($fp);
    if ($response === false) {
        throw new Exception("Problem reading data from $url, $php_errormsg");
    }
    return $response;
}

/*
 * implement hook_init.
 */
function realty_init()
{
    drupal_add_js(array('REALTY_FRONT_THEME_PATH' => REALTY_FRONT_THEME_PATH), 'setting');

    //node_save(node_load(4101));

    $domain = explode('.', $_SERVER['HTTP_HOST']);

    if ($_GET['q'] == "lazy-pane/ajax" || $_GET['q'] == "get_appartment_info") {

    }
    else if ($_SERVER['HTTP_HOST'] == 'xn--80aiondh1b.xn--p1ai') {
        if ($_GET['q'] == "<front>") {
            if (isset($_COOKIE['cityId'])) {
                drupal_goto('http://novosibirsk.findome.ru/taxonomy/term/' . $_COOKIE['cityId']);
            } else {
                drupal_goto('http://novosibirsk.findome.ru/taxonomy/term/1');
            }
        } else {
            drupal_goto('http://novosibirsk.findome.ru/' . $_GET['q']);
        }
    }
    else if ($domain[0] == 'findome' || $domain[0] == 'www') {
        if ($_GET['q'] != "<front>") {
            if ($_GET['q'] == "node/2497" || $_GET['q'] == "comparison" || $_GET['q'] == "contacts"
                || $_GET['q'] == "articles" || $_GET['q'] == "policy" || $_GET['q'] == "cooperation" ||  $_GET['q'] == "guide") {

            }
            else if ( $_GET['q'] == "sitemap.xml") {
                drupal_not_found();
            }
            else {
                if (isset($_GET['type'])) {
                    $data = '?type=' . $_GET['type'];
                } else {
                    $data = '';
                }
                drupal_goto('http://novosibirsk.findome.ru/' . $_GET['q'] . $data);
                //do_post_request('http://novosibirsk.findome.ru/' . $_GET['q'], $_POST);
            }
            drupal_goto('http://novosibirsk.findome.ru/taxonomy/term/1');
        } else {
            if (isset($_COOKIE['cityId'])) {
                drupal_goto('http://novosibirsk.findome.ru/taxonomy/term/' . $_COOKIE['cityId']);
            } else {
                drupal_goto('http://novosibirsk.findome.ru/taxonomy/term/1');

            }
        }
    } else if ($domain[0] == 'novosibirsk') {
        if ($_GET['q'] == "<front>") {
            drupal_goto('http://novosibirsk.findome.ru/taxonomy/term/1');
        } else  if ($_GET['q'] == "node/2497" || $_GET['q'] == "comparison" || $_GET['q'] == "contacts"
            || $_GET['q'] == "articles" || $_GET['q'] == "policy" || $_GET['q'] == "cooperation"  ||  $_GET['q'] == "guide") {
            //drupal_goto('http://novosibirsk.findome.ru/' . $_GET['q']);
        }
    }


    if (arg(0) == 'search') {
        drupal_add_js(array(
            'issue' => 'issue'), 'setting');
    }

    if (arg(1) == '2497') {
        drupal_add_js(array(
            'about' => 'about'), 'setting');
    }

    if ($_GET['q'] == "<front>") {
        drupal_add_js(array(
            'front' => 'findome'), 'setting');
    }
}

/*
 * Implement hook_taxonomy_term_insert.
 */
function realty_taxonomy_term_insert($term)
{
    if ($term->vid == '6') {
        $place = json_decode($term->field_map[LANGUAGE_NONE][0]['placemarks']);
        $place[0]->params->tid = $term->tid;
        $term->field_map[LANGUAGE_NONE][0]['placemarks'] = json_encode($place);
        taxonomy_term_save($term);
    }
}


/**
 * Implements hook_comment_presave().
 */
function realty_comment_presave($comment)
{

    // Если комментарий опубликован
    if ($comment->status == 1) {
        $node = node_load($comment->nid);

        // Если это отзыв о Жилом комплексе - пересичтываем народный рейтинг
        if ($node->type == 'complex') {

            // Отзывы о ЖК
            $avg_review_complex = realty_get_count_assessmen_review($node->nid);

            if ($comment->field_comment_assessment[LANGUAGE_NONE][0]['value'] < 0) {
                (int)$avg_review_complex['negative'] += 1;
            } else if ($comment->field_comment_assessment[LANGUAGE_NONE][0]['value'] > 0) {
                (int)$avg_review_complex['positive'] += 1;
            }

            if ($avg_review_complex['negative'] != 0 && $avg_review_complex['positive'] != 0) {
                $review_quotient = $avg_review_complex['positive'] / $avg_review_complex['negative'];
            } else if ($avg_review_complex['positive'] > 0 && $avg_review_complex['negative'] == 0) {
                $review_quotient = 1.5;
            } else if ($avg_review_complex['positive'] == 0 && $avg_review_complex['negative'] > 0) {
                $review_quotient = 0.99;
            } else {
                $review_quotient = 0;
            }

            $review_complex_rating = 0;
            if ((float)$review_quotient >= 1.5) {
                $review_complex_rating = 5;
            } else if ((float)$review_quotient >= 1.01 && (float)$review_quotient <= 1.49) {
                $review_complex_rating = 2;
            } else if ((float)$review_quotient == 1) {
                $review_complex_rating = 0;
            } else if ((float)$review_quotient <= 0.99 && (float)$review_quotient > 0) {
                $review_complex_rating = -3;
            } else if ((float)$review_quotient = 0) {
                $review_complex_rating = 0;
            }

            $node->field_complex_reviews_rating_val[LANGUAGE_NONE][0]['value'] = $review_complex_rating;

            // Отзывы о Застройщике
            $term_id_developer = $node->field_complex_developer[LANGUAGE_NONE][0]['tid'];
            $review_developer = realty_get_assessmen_developer_review($term_id_developer);

            $sum_assessmen_developer = array_sum($review_developer);
            $avg_assessmen_developer = $sum_assessmen_developer / count($review_developer);

            // Величина рейтинга - Народный ретинг
            $peoples_rating = $review_complex_rating + $avg_assessmen_developer;
            $old_people_rating = (int)$node->field_complex_people_rating_valu[LANGUAGE_NONE][0]['value'];
            $node->field_complex_people_rating_valu[LANGUAGE_NONE][0]['value'] = $peoples_rating;

            // Величина рейтинга
            $old_complex_rating = (int)$node->field_complex_rating_val[LANGUAGE_NONE][0]['value'];
            $node->field_complex_rating_val[LANGUAGE_NONE][0]['value'] = (string)($old_complex_rating - $old_people_rating + $peoples_rating);
            node_save($node);
        }
    }
}

function realty_entity_presave($entity, $type)
{

    // Если это таксономия дома
    if ($entity->field_name == "field_home_section") {

        $term_id_home = $entity->hostEntity();
        $term_home = taxonomy_term_load($term_id_home->tid);

        // Заполнение пустого поля Номер очереди
        if ($entity->field_home_section_queue[LANGUAGE_NONE][0]['value'] == '' &&
            $term_home->field_home_queue[LANGUAGE_NONE][0]['value'] != ''
        ) {

            $entity->field_home_section_queue[LANGUAGE_NONE][0]['value'] = $term_home->field_home_queue[LANGUAGE_NONE][0]['value'];
        }

        // Заполнение пустого поля Срок сдачи
        if ($entity->field_home_section_deadline[LANGUAGE_NONE][0]['value'] == '' &&
            $term_home->field_deadline[LANGUAGE_NONE][0]['value'] != ''
        ) {

            $deadline_year = intval((int)$term_home->field_deadline[LANGUAGE_NONE][0]['value'] / 10);
            $deadline_quarter = (int)$term_home->field_deadline[LANGUAGE_NONE][0]['value'] % 10;

            $entity->field_home_section_deadline[LANGUAGE_NONE][0]['value'] = $deadline_quarter . ' квартал 20' . $deadline_year . ' год';
        }

        // Заполнение пустого поля Готовность
        if ($entity->field_home_section_readiness[LANGUAGE_NONE][0]['value'] == '' &&
            $term_home->field_home_readiness[LANGUAGE_NONE][0]['value'] != ''
        ) {

            $entity->field_home_section_readiness[LANGUAGE_NONE][0]['value'] = $term_home->field_home_readiness[LANGUAGE_NONE][0]['value'];
        }

        // Заполнение пустого поля Этажность
        if ($entity->field_home_section_floor[LANGUAGE_NONE][0]['value'] == '' &&
            $term_home->field_number_floor[LANGUAGE_NONE][0]['value'] != ''
        ) {
            $entity->field_home_section_floor[LANGUAGE_NONE][0]['value'] =
                $term_home->field_number_floor[LANGUAGE_NONE][0]['value'];
        }
    }

    // Если это рейтинг Жилого комплекса
    /*if ($entity->field_name == "field_complex_rating") {
    $entity_id_rating = $entity->hostEntity();
  }

  if ($entity->field_name == "field_complex_finance_rating") {
    $complex = $entity->hostEntity();
    $complex = node_load($complex->nid);

    $complex->field_stock[LANGUAGE_NONE][0]['value'] = '0';

    node_save($complex);
  }

  if ($entity->field_name == "field_complex_agre_rating") {
    $a=1;
  }

  if ($entity->field_name == 'field_complex_infra_rating') {
    $a=1;
  }

  if ($entity->field_name == "field_complex_yard_rating") {
    $a=1;
  }

  if ($entity->field_name == "field_complex_info_rating") {

    // Вычисление общего рейтинга
    $entity_rating = $entity->hostEntity();

    $entity_rating->field_complex_rating_value[LANGUAGE_NONE][0]['value'] = 5;

    entity_save('field_collection_item', $entity_rating);
  }*/
}

/*
 * Implement hook_taxonomy_term_presave.
 */
function realty_taxonomy_term_presave($term)
{

    if ($term->tid && !empty($term->field_map)) {
        $place = json_decode($term->field_map[LANGUAGE_NONE][0]['placemarks']);
        $place[0]->params->tid = $term->tid;
        $term->field_map[LANGUAGE_NONE][0]['placemarks'] = json_encode($place);
    }

    // Если таксономия дома
    if ($term->tid && $term->vocabulary_machine_name == 'homes') {
        $count_room_1 = 0;
        $count_room_1c = 0;
        $count_room_2 = 0;
        $count_room_2c = 0;
        $count_room_3 = 0;
        $count_room_3c = 0;
        $count_room_other = 0;
        $count_room_otherc = 0;

        foreach ($term->field_home_section[LANGUAGE_NONE] as $section) {

            // Вычисление общего числа вкартир в Доме
            $count_room_1 += (int)$section['field_home_section_1_room'][LANGUAGE_NONE][0]['value'];
            $count_room_1c += (int)$section['field_home_section_1c_room'][LANGUAGE_NONE][0]['value'];
            $count_room_2 += (int)$section['field_home_section_2_room'][LANGUAGE_NONE][0]['value'];
            $count_room_2c += (int)$section['field_home_section_2c_room'][LANGUAGE_NONE][0]['value'];
            $count_room_3 += (int)$section['field_home_section_3_room'][LANGUAGE_NONE][0]['value'];
            $count_room_3c += (int)$section['field_home_section_3c_room'][LANGUAGE_NONE][0]['value'];
            $count_room_other += (int)$section['field_home_section_other_room'][LANGUAGE_NONE][0]['value'];
            $count_room_otherc += (int)$section['field_home_section_otherc_room'][LANGUAGE_NONE][0]['value'];
        }

        $term->field_home_quantity_1_room[LANGUAGE_NONE][0]['value'] = $count_room_1;
        $term->field_home_quantity_1c_room[LANGUAGE_NONE][0]['value'] = $count_room_1c;
        $term->field_home_quantity_2_room[LANGUAGE_NONE][0]['value'] = $count_room_2;
        $term->field_home_quantity_2c_room[LANGUAGE_NONE][0]['value'] = $count_room_2c;
        $term->field_home_quantity_3_room[LANGUAGE_NONE][0]['value'] = $count_room_3;
        $term->field_home_quantity_3c_room[LANGUAGE_NONE][0]['value'] = $count_room_3c;
        $term->field_home_quantity_other_room[LANGUAGE_NONE][0]['value'] = $count_room_other;
        $term->field_home_quantity_otherc_room[LANGUAGE_NONE][0]['value'] = $count_room_otherc;
    }
}

/**
 * get the path to the directory /files
 */

function realty_file_directory_path()
{
    return variable_get('file_directory_path', conf_path() . '/files');
}

/*
 * implement hook_menu.
 */
function realty_menu()
{

    $item['get_developer_complex'] = array(
        'title' => 'complex',
        'page callback' => 'realty_get_developer_complex',
        'access callback' => TRUE,
    );

    $item['get_id_apartment'] = array(
        'page callback' => 'realty_get_id_apartment',
        'access callback' => TRUE,
    );

    $item['add_assessmen_developer'] = array(
        'page callback' => 'realty_add_assessmen_developer',
        'access callback' => TRUE,
    );

    $item['apartment_comparison'] = array(
        'page callback' => 'realty_apartment_comparison',
        'access callback' => TRUE,
    );

    $item['count_comparison'] = array(
        'page callback' => 'realty_count_comparison',
        'access callback' => TRUE,
    );

    $item['search_map'] = array(
        'page callback' => 'realty_search_map',
        'access callback' => TRUE,
    );

    $item['get_data_complex'] = array(
        'page callback' => 'realty_get_data_complex',
        'access callback' => TRUE,
    );

    $item['apartment_signal'] = array(
        'page callback' => 'realty_apartment_signal',
        'access callback' => TRUE,
    );

    $item['realty_add_comment'] = array(
        'page callback' => 'realty_add_comment',
        'access callback' => TRUE,
    );

    $item['realty_add_answer_comment'] = array(
        'page callback' => 'realty_add_answer_comment',
        'access callback' => TRUE,
    );

    $item['realty_add_review'] = array(
        'page callback' => 'realty_add_review',
        'access callback' => TRUE,
    );

    $item['edit_user_profile'] = array(
        'page callback' => 'realty_edit_user_profile',
        'access callback' => TRUE,
    );

    $item['apartment/booking'] = array(
        'page callback' => 'realty_apartment_booking',
        'access callback' => TRUE,
    );

    $item['get_appartment_info'] = array(
        'page callback' => 'realty_get_appartment_info',
        'access callback' => TRUE,
    );

    $item['mortgage_apartment'] = array(
        'page callback' => 'realty_mortgage_apartment',
        'access callback' => TRUE,
    );

    $item['bank_info'] = array(
        'page callback' => 'realty_bank_info',
        'access callback' => TRUE,
    );

    $item['request_submit/%/%/%'] = array(
        'page callback' => 'realty_request_submit',
        'access callback' => TRUE,
    );

    $item['mortgage_info'] = array(
        'page callback' => 'realty_mortgage_info',
        'access callback' => TRUE,
    );

    $item['get_info_home'] = array(
        'page callback' => 'realty_get_info_home',
        'access callback' => TRUE,
    );

    $item['get_block_plan_complex'] = array(
        'page callback' => 'realty_get_block_plan_complex',
        'access callback' => TRUE,
    );

    $item['get_data_comment'] = array(
        'page callback' => 'realty_get_data_comment',
        'access callback' => TRUE,
    );

    $item['get_data_review'] = array(
        'page callback' => 'realty_get_data_review',
        'access callback' => TRUE,
    );

    $item['mortgage_category_info'] = array(
        'page callback' => 'realty_mortgage_category_info',
        'access callback' => TRUE,
    );

    $item['realty_complex_plan_get_home_id'] = array(
        'page callback' => 'realty_complex_plan_get_home_id',
        'access callback' => TRUE,
    );

    $item['realty_complex_plan_get_complex_plan'] = array(
        'page callback' => 'realty_complex_plan_get_plan_complex',
        'access callback' => TRUE,
    );

    $item['mortgage_get_affiliate_bank'] = array(
        'page callback' => 'realty_mortgage_ajax_callback',
        'access callback' => TRUE,
    );

    $item['news_details'] = array(
        'page callback' => 'realty_news_details',
        'access callback' => TRUE,
    );

    $item['comprassion_delete'] = array(
        'page callback' => 'realty_comprassion_delete',
        'access callback' => TRUE,
    );

    $item['realty_edit_user_profile'] = array(
        'page callback' => 'realty_get_edit_user_profile_form',
        'access callback' => TRUE,
    );

    $item['realty_get_certificate'] = array(
        'page callback' => 'realty_get_certificate',
        'access callback' => TRUE,
    );

    $item['realty_stock_details'] = array(
        'page callback' => 'realty_get_stock_details',
        'access callback' => TRUE,
    );

    $item['search_count_result'] = array(
        'page callback' => 'realty_search_count_result',
        'access callback' => TRUE,
    );

    $item['realty_apartment_icon_lazy'] = array(
        'page callback' => 'realty_apartment_icon_lazy',
        'access callback' => TRUE,
    );

    $item['realty_complex_plan_get_count_ap_floor'] = array(
        'page callback' => 'realty_complex_plan_get_count_ap_floor',
        'access callback' => TRUE,
    );

    $item['get_next_complex'] = array(
        'page callback' => 'realty_get_next_complex',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $item;
}

/**
 * Implements hook_theme().
 */

function realty_theme()
{

    $base = array(
        'file' => 'theme.inc',
        'path' => drupal_get_path('module', 'realty') . '/theme',
    );

    $items['realty_user_profile_form'] = $base + array(
            'template' => 'realty-user-profile-form',
            'render element' => 'form',
        );

    $items['realty_modal_search_form'] = array(
        'template' => 'realty-modal-search-form',
        'variables' => array(
            'std' => 'std',
            'modal_id' => NULL,
            'class' => NULL,
            'checkbox_id' => NULL,
            'text' => NULL,
            'units' => NULL,
            'submit' => FALSE,
            'options' => array(),
        ),
    );

    $items['mortgage_request_user'] = $base + array(
            'template' => 'realty-mortgage-request-user',
            'preprocess functions' => array('realty_preprocess_realty_mortgage_request_user'),
            'variables' => array(
                'node' => NULL,
            ),
        );

    $items['booking_request_user'] = $base + array(
            'template' => 'realty-booking-request-user',
            'preprocess functions' => array('realty_preprocess_realty_booking_request_user'),
            'variables' => array(
                'node' => NULL,
            ),
        );


    $items['unreservation_notice'] = $base + array(
            'template' => 'realty-unreservation-notice',
            'preprocess functions' => array('realty_preprocess_realty_unreservation_notice'),
            'variables' => array(
                'node' => NULL,
            ),
        );


    $items['realty_modal_bank_info'] = array(
        'template' => 'realty-modal-bank-info',
    );

    $items['realty_modal_notify'] = array(
        'template' => 'realty-modal-notify',
        'variables' => array(
            'title' => NULL,
            'body' => NULL,
        ),
    );

    $items['realty_modal_city'] = array(
        'template' => 'realty-modal-city',
        'variables' => array(
            'cities' => NULL,
        ),
    );

    $items['realty_modal_mortgage_info'] = array(
        'template' => 'realty-modal-mortgage-info',
    );

    $items['realty_modal_mortgage_info'] = array(
        'template' => 'realty-modal-mortgage-info',
    );

    $items['realty_modal_mortgage_category_info'] = array(
        'template' => 'realty-modal-mortgage-category-info',
    );

    $items['id_apartment_pdf'] = $base + array(
            'template' => 'realty-id-apartment-pdf',
            'preprocess functions' => array('realty_preprocess_realty_id_apartment_pdf'),
            'variables' => array(
                'node' => NULL,
            ),
        );

    $items['sending_messages'] = $base + array(
            'template' => 'realty-sending-messages',
            'variables' => array('node' => NULL),
        );

    $items['booking_request'] = $base + array(
            'template' => 'realty-booking-request',
            'preprocess functions' => array('realty_preprocess_realty_booking_request'),
            'variables' => array(
                'node' => NULL,
                'user' => FALSE,
            ),
        );

    $items['realty_comment_form'] = array(
        'render element' => 'form',
        'template' => 'realty-comment-form',
    );

    $items['realty_main_search_form'] = $base + array(
            'render element' => 'form',
            'template' => 'realty-main-search-form'
        );

    $items['realty_modal_user_login'] = array(
        'template' => 'realty-modal-user-login',
    );

    $items['realty_comparison_apartment_table'] = $base + array(
            'template' => 'realty-comparison-apartment-table',
            'variables' => array(
                'apartments' => NULL
            ),
        );

    $items['realty_booking_apartment_table'] = $base + array(
            'template' => 'realty-booking-apartment-table',
            'variables' => array(
                'apartments' => NULL
            ),
        );

    $items['realty_mortgage_apartment_table'] = $base + array(
            'template' => 'realty-mortgage-apartment-table',
            'variables' => array(
                'apartments' => NULL
            ),
        );

    $items['realty_user_login_form'] = $base + array(
            'render_element' => 'form',
            'template' => 'realty-user-login-form',
        );

    $items['realty_user_register_form'] = $base + array(
            'file' => 'theme.inc',
            'render_element' => 'form',
            'template' => 'realty-user-register-form'
        );

    $items['realty_booking_apartment_form'] = array(
        'render element' => 'form',
        'arguments' => array('form' => NULL),
        'preprocess functions' => array('realty_theme_preprocess_realty_booking_apartment_form'),
        'template' => 'realty-booking-apartment-form'
    );

    $items['realty_apartment_modal'] = array(
        //'preprocess functions' => array('realty_theme_preprocess_realty_apartment_modal'),
        'template' => 'realty-apartment-modal',
        'variables' => array(
            'plan' => FALSE
        ),
    );

    $items['realty_complex_home_plan'] = array(
        'preprocess functions' => array('realty_theme_preprocess_realty_complex_home_plan'),
        'template' => 'realty-complex-home-plan',
        'variables' => array(),
    );

    $items['realty_modal_mortgage_request_form'] = array(
        'render element' => 'form',
        'template' => 'realty-modal-mortgage-request-form',
    );

    $items['realty_email_template_mortgage_request'] = array(
        'preprocess functions' => array('realty_theme_preprocess_realty_email_template_mortgage_request'),
        'template' => 'realty-email-template-mortgage-request',
        'variables' => array(),
    );

    $items['realty_email_template_register_verification'] = array(
        'preprocess functions' => array('realty_theme_preprocess_realty_email_template_register_verification'),
        'template' => 'realty-email-template-register-verification',
        'variables' => array(),
    );

    $items['realty_email_template_request_submit'] = array(
        'preprocess functions' => array('realty_theme_preprocess_realty_email_template_request_submit'),
        'template' => 'realty-email-template-request-submit',
        'variables' => array(),
    );

    $items['realty_email_template_request_feedback'] = array(
        'preprocess functions' => array('realty_theme_preprocess_realty_email_template_request_feedback'),
        'template' => 'realty-email-template-request-feedback',
        'variables' => array(),
    );

    $items['realty_modal_new'] = array(
        'template' => 'realty-modal-new',
        'variables' => array(
            'node' => NULL
        ),
    );

    $items['realty_breadcrumbs'] = array(
        'preprocess functions' => array('realty_theme_preprocess_realty_breadcrumbs'),
        'template' => 'realty-breadcrumbs',
    );

    $items['realty_modal_stock'] = array(
        'template' => 'realty-modal-stock',
        'variables' => array(
            'node' => NULL
        ),
    );

    $items['realty_edit_user_profile_form'] = $base + array(
            'render element' => 'form',
            'template' => 'realty-edit-user-profile-form',
        );

    $items['realty_edit_user_pass'] = $base + array(
            'render element' => 'form',
            'template' => 'realty-edit-user-pass'
        );

    $items['realty_user_recovery_password'] = array(
        'template' => 'realty-user-recovery-password'
    );

    $items['realty_user_pass_reset'] = $base + array(
            'render element' => 'form',
            'template' => 'realty-user-pass-reset'
        );

    $items['realty_feedback_form'] = $base + array(
            'render element' => 'form',
            'template' => 'realty-feedback-form'
        );

    $items['realty_feedback_block'] = $base + array(
            'template' => 'realty-feedback-block'
        );

    $items['realty_user_reset_password'] = array(
        'template' => 'realty-user-reset-password'
    );

    return $items;
}

/**
 * Get all the complexes in city
 */
function realty_get_nid_all_complexes_city($city_tid)
{
    $complexes = db_query("SELECT node.nid
        FROM node
        LEFT JOIN field_data_field_complex_developer ON node.nid = field_data_field_complex_developer.entity_id
        LEFT JOIN field_data_field_city ON field_data_field_complex_developer.field_complex_developer_tid = field_data_field_city.entity_id
        WHERE node.type = 'complex' AND node.status = 1 AND field_data_field_city.field_city_tid = :city
        ", array(':city' => $city_tid))->fetchAll();

    return $complexes;
}

/**
 * Page callback to /realty/get_next_complex
 */
function realty_get_next_complex()
{
    $complexes = realty_get_nid_all_complexes_city($_POST['city']);
    $count_complex = count($complexes);
    $node = node_load($_POST['nid']);

    foreach ($complexes as $key => $complex) {
        if ($complex->nid == $_POST['nid']) {
            $next = isset($complexes[$key + 1]) ? $complexes[$key + 1]->nid : $complexes[0]->nid;
            $prev = isset($complexes[$key - 1]) ? $complexes[$key - 1]->nid : $complexes[$count_complex - 1]->nid;
        }
    }

    $image = l(theme('image', array(
            'path' => $node->field_main_photo[LANGUAGE_NONE][0]['uri'],
            'alt' => $node->title,
            'title' => $node->title,
            'attributes' => array(
                'class' => array('photo'),
            ),
        )
    ), 'node/' . $node->nid, array('html' => true));


    $logo = l(theme('image', array(
            'path' => $node->field_complex_logo[LANGUAGE_NONE][0]['uri'],
            'alt' => $node->title,
            'title' => $node->title,
            'attributes' => array(
                'class' => array('logo-c'),
            ),
        )
    ), 'node/' . $node->nid, array('html' => true));

    $developer = taxonomy_term_load($node->field_complex_developer[LANGUAGE_NONE][0]['tid']);

    print json_encode(array(
        'title' => l($node->title, 'node/' . $node->nid),
        'slogan' => !empty($node->field_slogan) ? $node->field_slogan[LANGUAGE_NONE][0]['safe_value'] : NULL,
        'image' => $image,
        'logo' => $logo,
        'details' => l(t('Подробнее о комплексе'), 'node/' . $node->nid),
        'floor' => $node->field_complex_floor[LANGUAGE_NONE][0]['safe_value'],
        'developer' => l($developer->name, 'taxonomy/term/' . $developer->tid, array(
            'attributes' => array(
                'target' => '_blank',)
        )),
        'apartment' => realty_get_apartment_active_complex($node->nid),
        'plan' => l(t('Посмотреть планировки'), 'complexes/' . $node->nid . '/plan'),
        'price' => realty_get_average_price_apartment_complex($node->nid),
        'next' => $next,
        'prev' => $prev
    ));

    drupal_exit();
}

/**
 * Page callback to realty_apartment_icon_lazy
 */
function realty_apartment_icon_lazy()
{
    global $user;
    $nid = $_POST['nid'];
    $node = node_load($nid);

    if (realty_checking_apartments_comparison($nid) == TRUE || realty_checking_apartments_comparison_cookies($nid)) {
        $img_comparsion = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/apartment_comparsion_active.svg');
        $inf['button_comparsion'] = $img_comparsion . '<p class="s-label-small color-dark_gray">Добавлена в сравнение</p>';


    } else {
        $img_comparsion = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/apartment_comparsion.svg');
        $inf['button_comparsion'] = '<div class="apartment-comparison pa" data-page="1" data-node-id="' .
            $nid . '">' . $img_comparsion . '<p class="s-label-small">Добавить в сравнение</p></div>';
    }

    if ($node->field_status[LANGUAGE_NONE][0]['value'] == 0) {

        // Если уже запрошено уведомление о изменении статуса
        if ($user->uid != 0) {
            if (realty_check_status_apartment_user($user->uid, $node->nid) == TRUE) {
                $img_booking = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/apartment_comparsion_active.svg');
                $inf['button_booking'] = $img_booking . '<p class="s-label-small color-dark_gray">Запрошено уведомление</p>';
            } // Если еще не запрошено уведомление
            else {
                $img_booking = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/apartment_booking_active.svg');
                $inf['button_booking'] = '<div class="apartment-signal pa" data-node-id="' . $node->nid .
                    '" data-page="1">' . $img_booking . '<p class="s-label-small">Оповестить о изменении статуса</p></div>';
            }
        }

        $inf['apart_status'] = '<h2 class="s_book">Забронирована</h2>';
    } // Если еще не забронирована
    else {
        $img_booking = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/apartment_booking.svg');
        $inf['button_booking'] = '<div class="pa apartment-booking-but" data-toggle="modal" data-target=".modal_free">' .
            $img_booking . '<p class="s-label-small">Забронировать<br>квартиру</p></div>';

        $inf['apart_status'] = '<h2 class="s_free">Свободна</h2>';
    }

    print json_encode($inf);

    drupal_exit();
}

/**
 * Implement hook_menu_alter
 */
function realty_menu_alter(&$item)
{
    $item['user/password']['page callback'] = 'realty_page_user_recovery_password';
    $item['user/reset/%/%/%']['page callback'] = 'realty_page_user_reset_password';
}

/*
 * Page callback to /user/password.
 */
function realty_page_user_recovery_password()
{
    return theme('realty_user_recovery_password');
}

/**
 * Page callback to user/reset/%/%/%
 */
function realty_page_user_reset_password()
{
    if (arg(5) != 'login') {
        return theme('realty_user_reset_password');
    } else {
        $uid = arg(2);
        $hashed_pass = arg(4);
        $action = 'login';
        $timestamp = arg(3);

        global $user;

        // When processing the one-time login link, we have to make sure that a user
        // isn't already logged in.
        if ($user->uid) {
            // The existing user is already logged in.
            if ($user->uid == $uid) {
                drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));
            } // A different user is already logged in on the computer.
            else {
                $reset_link_account = user_load($uid);
                if (!empty($reset_link_account)) {
                    drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
                        array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
                } else {
                    // Invalid one-time link specifies an unknown user.
                    drupal_set_message(t('The one-time login link you clicked is invalid.'));
                }
            }
            drupal_goto();
        } else {
            // Time out, in seconds, until login URL expires. Defaults to 24 hours =
            // 86400 seconds.
            $timeout = variable_get('user_password_reset_timeout', 86400);
            $current = REQUEST_TIME;
            // Some redundant checks for extra security ?
            $users = user_load_multiple(array($uid), array('status' => '1'));
            if ($timestamp <= $current && $account = reset($users)) {
                // No time out for first time login.
                if ($account->login && $current - $timestamp > $timeout) {
                    drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
                    drupal_goto('user/password');
                } elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid)) {
                    // First stage is a confirmation form, then login
                    if ($action == 'login') {
                        // Set the new user.
                        $user = $account;
                        // user_login_finalize() also updates the login timestamp of the
                        // user, which invalidates further use of the one-time login link.
                        user_login_finalize();
                        watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
                        drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in. Please change your password.'));
                        // Let the user's password be changed without the current password check.
                        $token = drupal_random_key();
                        $_SESSION['pass_reset_' . $user->uid] = $token;
                        drupal_goto('user/' . $user->uid, array('query' => array('pass-reset-token' => $token)));
                    } else {
                        $form['message'] = array('#markup' => t('<p>This is a one-time login for %user_name and will expire on %expiration_date.</p><p>Click on this button to log in to the site and change your password.</p>', array('%user_name' => $account->name, '%expiration_date' => format_date($timestamp + $timeout))));
                        $form['help'] = array('#markup' => '<p>' . t('This login can be used only once.') . '</p>');
                        $form['actions'] = array('#type' => 'actions');
                        $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Log in'));
                        $form['#action'] = url("user/reset/$uid/$timestamp/$hashed_pass/login");
                        return $form;
                    }
                } else {
                    drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
                    drupal_goto('user/password');
                }
            } else {
                // Deny access, no more clues.
                // Everything will be in the watchdog's URL for the administrator to check.
                drupal_access_denied();
                drupal_exit();
            }
        }
    }
}

/**
 * Page callback to realty_stock_details.
 */
function realty_get_stock_details()
{
    if ($_POST['nid']) {
        $nid = $_POST['nid'];
        $node = node_load($nid);
        print theme('realty_modal_stock', array('node' => $node));
    }
    drupal_exit();
}

/**
 * Page callback to search_count_result.
 */
function realty_search_count_result()
{

    // Формирование запросов
    $tables = '';
    $query = '';
    $home_tables = '';
    $home_query = '';
    $complex_tables = '';
    $complex_query = '';

    // Параметры для базового запроса
    $args = array(
        ':price_min' => $_POST['price_min'],
        ':price_max' => $_POST['price_max'],
        ':sq_min' => $_POST['sq_min'],
        ':sq_max' => $_POST['sq_max'],
        ':cost_min' => $_POST['cost_min'],
        ':cost_max' => $_POST['cost_max'],
        ':floors_min' => $_POST['floors_min'],
        ':floors_max' => $_POST['floors_max'],
        ':city' => $_POST['city']
    );

    // Формирование базового запроса для фильтра Балкон
    if (!empty($_POST['balcony'])) {
        foreach ($_POST['balcony'] as $value) {
            if ($value == 1) {
                $tables .= ', field_data_field_balcony';
                $query .= ' AND field_data_field_balcony.entity_id = node.nid
                    AND field_data_field_balcony.field_balcony_value = 1';
            }
            if ($value == 2) {
                $tables .= ', field_data_field_loggia';
                $query .= ' AND field_data_field_loggia.entity_id = node.nid
                    AND field_data_field_loggia.field_loggia_value = 1';
            }
            if ($value == 3) {
                $tables .= ', field_data_field_balcony_loggia';
                $query .= " AND field_data_field_balcony_loggia.entity_id = node.nid
                    AND field_data_field_balcony_loggia.field_balcony_loggia_value = 1";
            }
        }
    }

    // Формирование базового запроса для фильтра Количество комнат
    if (!empty($_POST['type'])) {
        $tables .= ', field_data_field_number_rooms';
        $query .= ' AND field_data_field_number_rooms.entity_id = node.nid
                AND field_data_field_number_rooms.field_number_rooms_value IN (:type)';

        $args[':type'] = $_POST['type'];
    }

    // Формирование подзапросов
    if (!empty($_POST['category']) || !empty($_POST['material']) || !empty($_POST['deadline']) ||   // Фильтры уровня дома
        !empty($_POST['complexes']) || !empty($_POST['metro']) || !empty($_POST['areas']) ||        // Фильтры уровня Жилого комплекса
        !empty($_POST['developers'])
    ) {                                                             // Фильтры уровня Застройщика

        // Формирование подзапроса для фильтра Категория
        if (!empty($_POST['category'])) {
            $home_tables .= ', field_data_field_home_category';

            $home_query .= ' field_data_field_home_category.entity_id = taxonomy_term_data.tid
                      AND field_data_field_home_category.field_home_category_tid IN (:category)';

            $args[':category'] = $_POST['category'];

            $multi_condition_home = TRUE;
        }

        // Формирование запроса для фильтра Материал стен
        if (!empty($_POST['material'])) {
            $home_tables .= ', field_data_field_material';

            if ($multi_condition_home == TRUE) {
                $home_query .= ' AND field_data_field_material.entity_id = taxonomy_term_data.tid
                         AND field_data_field_material.field_material_tid IN (:material)';
            } else {
                $home_query .= ' field_data_field_material.entity_id = taxonomy_term_data.tid
                         AND field_data_field_material.field_material_tid IN (:material)';
            }

            $args[':material'] = $_POST['material'];
            $multi_condition_home = TRUE;
        }

        // Формирование запроса для фильтра Срок сдачи
        if (!empty($_POST['deadline'])) {
            $home_tables .= ', field_data_field_deadline';

            if ($multi_condition_home == TRUE) {
                $home_query .= ' AND field_data_field_deadline.entity_id = taxonomy_term_data.tid
                         AND field_data_field_deadline.field_deadline_value IN (:deadline)';
            } else {
                $home_query .= ' field_data_field_deadline.entity_id = taxonomy_term_data.tid
                         AND field_data_field_deadline.field_deadline_value IN (:deadline)';
            }

            $args[':deadline'] = $_POST['deadline'];
            $multi_condition_home = TRUE;
        }

        // Формирование запроса для фильтра Жилой комплекс
        if (!empty($_POST['complexes'])) {
            $home_tables .= ', field_data_field_home_complex';
            $complex = TRUE;

            if ($multi_condition_home == TRUE) {
                $home_query .= ' AND field_data_field_home_complex.entity_id = taxonomy_term_data.tid
                         AND field_data_field_home_complex.field_home_complex_target_id IN (:complexes)';
            } else {
                $home_query .= ' field_data_field_home_complex.entity_id = taxonomy_term_data.tid
                         AND field_data_field_home_complex.field_home_complex_target_id IN (:complexes)';
            }

            $args[':complexes'] = $_POST['complexes'];

            $multi_condition_home = TRUE;
        }

        // Формирование подзапроса на уровне Жилого комплекса
        if (!empty($_POST['metro']) || !empty($_POST['areas']) ||
            !empty($_POST['developers'])
        ) {

            // Формирование подзапроса для фильтра Метро
            if (!empty($_POST['metro'])) {
                $complex_tables .= ', field_data_field_complex_metro';

                $complex_query .= ' field_data_field_complex_metro.entity_id = node.nid
                             AND field_data_field_complex_metro.field_complex_metro_tid IN (:metro)';

                $args[':metro'] = $_POST['metro'];

                $multi_condition_complex = TRUE;
            }

            // Формирование подзапроса для фильтра Район
            if (!empty($_POST['areas'])) {
                $complex_tables .= ', field_data_field_area';

                if ($multi_condition_complex == TRUE) {
                    $complex_query .= ' AND field_data_field_area.entity_id = node.nid
                             AND field_data_field_area.field_area_tid IN (:area)';
                } else {
                    $complex_query .= ' field_data_field_area.entity_id = node.nid
                             AND field_data_field_area.field_area_tid IN (:area)';
                }

                $args[':area'] = $_POST['areas'];

                $multi_condition_complex = TRUE;
            }

            // Формирование подзапроса для фильтра Застройщик
            if (!empty($_POST['developers'])) {
                $complex_tables .= ', field_data_field_complex_developer';
                $developer = TRUE;

                if ($multi_condition_complex == TRUE) {
                    $complex_query .= ' AND field_data_field_complex_developer.entity_id = node.nid
                             AND field_data_field_complex_developer.field_complex_developer_tid IN (:developer)';
                } else {
                    $complex_query .= ' field_data_field_complex_developer.entity_id = node.nid
                             AND field_data_field_complex_developer.field_complex_developer_tid IN (:developer)';
                }

                $multi_condition_complex = TRUE;

                $args[':developer'] = $_POST['developers'];
            }

            if ($multi_condition_home == TRUE) {
                $home_query .= ' AND field_data_field_home_complex.entity_id = taxonomy_term_data.tid
                       AND field_data_field_home_complex.field_home_complex_target_id IN (
                         SELECT node.nid FROM node' . $complex_tables . '
                          WHERE' . $complex_query . '
                       )';
            } else {
                $home_query .= ' field_data_field_home_complex.entity_id = taxonomy_term_data.tid
                       AND field_data_field_home_complex.field_home_complex_target_id IN (
                         SELECT node.nid FROM node' . $complex_tables . '
                          WHERE' . $complex_query . '
                       )';

                $multi_condition_home == TRUE;
            }

            if ($complex != TRUE) {
                $home_tables .= ', field_data_field_home_complex';
            }
        }

        // Формирование подзапроса
        $query .= ' AND field_data_field_apartament_home.entity_id = node.nid
                AND field_data_field_apartament_home.field_apartament_home_tid IN (
                  SELECT taxonomy_term_data.tid FROM taxonomy_term_data' . $home_tables . '
                    WHERE' . $home_query . '
                )';

        //$tables .= ', field_data_field_apartament_home';
    }

    // Формирование основного запроса
    $tables = 'node, field_data_field_price, field_data_field_full_cost,
             field_data_field_apartment_floor, field_data_field_gross_area,
             field_data_field_apartment_ceiling_height, field_data_field_apartament_home' . $tables;

    $query = 'SELECT node.nid from ' . $tables . '
              WHERE node.status = 1
                AND field_data_field_price.entity_id = node.nid
                AND field_data_field_price.field_price_value >= :price_min
                AND field_data_field_price.field_price_value <= :price_max
                AND field_data_field_full_cost.entity_id = node.nid
                AND field_data_field_full_cost.field_full_cost_value >= :cost_min
                AND field_data_field_full_cost.field_full_cost_value <= :cost_max
                AND field_data_field_gross_area.entity_id = node.nid
                AND field_data_field_gross_area.field_gross_area_value >= :sq_min
                AND field_data_field_gross_area.field_gross_area_value <= :sq_max
                AND field_data_field_apartment_ceiling_height.entity_id = node.nid
                AND field_data_field_apartment_ceiling_height.field_apartment_ceiling_height_value >= 0
                AND field_data_field_apartment_ceiling_height.field_apartment_ceiling_height_value <= 5
                AND field_data_field_apartment_floor.entity_id = node.nid
                AND field_data_field_apartment_floor.field_apartment_floor_value >= :floors_min
                AND field_data_field_apartment_floor.field_apartment_floor_value <= :floors_max
                AND field_data_field_apartament_home.entity_id = node.nid
                AND field_data_field_apartament_home.field_apartament_home_tid IN (
                  SELECT taxonomy_term_data.tid FROM taxonomy_term_data, field_data_field_home_complex
                    WHERE field_data_field_home_complex.entity_id = taxonomy_term_data.tid
                      AND field_data_field_home_complex.field_home_complex_target_id IN (
                        SELECT node.nid FROM node, field_data_field_complex_developer
                          WHERE field_data_field_complex_developer.entity_id = node.nid
                            AND field_data_field_complex_developer.field_complex_developer_tid IN (
                              SELECT taxonomy_term_data.tid FROM taxonomy_term_data, field_data_field_city
                                WHERE field_data_field_city.entity_id = taxonomy_term_data.tid
                                  AND field_data_field_city.field_city_tid = :city
                              )
                        )
                  )' . $query;

    // Выполнение запроса
    $count_result = db_query($query, $args)->rowCount();

    print $count_result;

    drupal_exit();
}

/**
 * Page callback to realty_get_certificate.
 */
function realty_get_certificate()
{
    if (isset($_GET['data'])) {
        $nid = $_GET['data']['nid'];
        $node = node_load($nid);
        if (empty($node->field_booking_status)) {
            if (isset($_GET['data']['name']) && isset($_GET['data']['number_contract'])) {
                $name = $_GET['data']['name'];
                $number_contract = $_GET['data']['number_contract'];
                $node->field_booking_status[LANGUAGE_NONE][0]['value'] = 1;
                $node->field_certificate_name[LANGUAGE_NONE][0]['value'] = $name;
                $node->field_certificate_number_contrac[LANGUAGE_NONE][0]['value'] = $number_contract;
                node_save($node);
                print TRUE;
                drupal_exit();
            } else {
                print FALSE;
                drupal_exit();
            }
        } else {

        }
    }
}

/**
 * Page callback to /realty_edit_user_profile.
 */
function realty_get_edit_user_profile_form()
{
    $form = drupal_get_form('realty_edit_user_profile_form');
    //unset($form['#action']);
    $form = drupal_render($form);

    print $form;
    drupal_exit();

}

/**
 * Page callback to /comprassion_delete.
 */
function realty_comprassion_delete()
{
    global $user;

    $account = user_load($user->uid);

    if (isset($_POST['nid'])) {
        $nid = $_POST['nid'];
        foreach ($account->field_apartment_comparison[LANGUAGE_NONE] as $key => $apartment) {
            if ($apartment['target_id'] == $nid) {
                break;
            }
        }
    }

    unset($account->field_apartment_comparison[LANGUAGE_NONE][$key]);
    user_save($account);
    $apartment_comprassion = views_embed_view('apartments', 'comprassion_apartment', $user->uid);
    print $apartment_comprassion;
    print '1';
    drupal_exit();
}

/**
 * Page callback to /news_details.
 */
function realty_news_details()
{
    if (isset($_POST['nid'])) {
        $nid = $_POST['nid'];
        $node = node_load($nid);

        $out = theme('realty_modal_new', array('node' => $node));

        print $out;
    }

    drupal_exit();
}


/**
 * @param $form
 * @param $form_state
 * @param array $param
 * @return mixed
 */
function realty_mortgage_request_form($form, $form_state, $param = array())
{
    global $user;
    $account = user_load($user->uid);

    $bank_tid = $param['bankId'];
    $apt_nid = $param['aptId'];
    $cityId = $param['cityId'];

    // Заголовок картиры
    if (isset($apt_nid)) {
        $node_apt = node_load($apt_nid);
        $apt_title = $node_apt->title;
    }

    // Формирование списка городов
    $terms_cities = taxonomy_get_tree(1);
    foreach ($terms_cities as $city) {
        $cities[$city->tid] = $city->name;
    }

    // Формирование списка филиалов банка в городе
    $term_bank = taxonomy_term_load($bank_tid);

    // Если ID города не указан в запросе выбираем город к которому привязана квартира
    if (!isset($cityId)) {
        $apt_info = realty_get_info_apartment($apt_nid);
        $cityId = $apt_info['city_tid'];
    }

    $view = views_get_view('term_view');
    $view->set_display('bank_affiliate');

    $view->display_handler->options['filters']['tid_raw']['value']['value'] = $bank_tid;
    $view->display_handler->options['filters']['field_bank_affiliates_city_tid']['value'] = $cityId;

    $view->pre_execute(array());
    $view->display_handler->preview();
    $view->post_execute();

    foreach ($view->result as $key => $affiliate) {
        $affiliates[$affiliate->field_collection_item_field_data_field_bank_affiliates_item_] = $affiliate->field_field_bank_affiliates_name[0]['raw']['value'] . '<br>' . $affiliate->field_field_bank_affiliates_address[0]['raw']['value'];
    }

    $form['full_name'] = array(
        '#type' => 'textfield',
        '#title' => t('ФИО'),
    );

    $form['age'] = array(
        '#type' => 'textfield',
        '#title' => t('Возраст'),
    );

    $form['mobile_phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Мобильный телефон'),
        '#default_value' => !empty($account->field_phone_number) ? $account->field_phone_number[LANGUAGE_NONE][0]['safe_value'] :
            NULL,
    );

    $form['home_phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Домашний телефон'),
    );

    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Электронная почта'),
        '#default_value' => $account->mail,
    );

    $form['amount'] = array(
        '#type' => 'textfield',
        '#default_value' => $node_apt->type == 'apartament' ? $node_apt->field_full_cost[LANGUAGE_NONE][0]['value'] : FALSE,
    );

    $form['apartment'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'readonly' => array('readonly'),
        ),
        '#default_value' => isset($apt_title) ? $apt_title : false,
    );

    $form['period'] = array(
        '#type' => 'textfield',
    );

    $form['payment'] = array(
        '#type' => 'textfield',
    );

    $form['income'] = array(
        '#type' => 'textfield',
    );

    $form['confirmation'] = array(
        '#type' => 'radios',
        '#options' => array('2-НДФЛ', 'Форма банка'),
    );

    $form['last_experience'] = array(
        '#type' => 'radios',
        '#options' => array('Менее 3 <br> месяцев', 'Более 3 <br> месяцев'),
    );

    $form['total_experience'] = array(
        '#type' => 'radios',
        '#options' => array('Менее 3 <br> лет', 'Более 3 <br> лет'),
    );

    $form['cities'] = array(
        '#type' => 'select',
        '#options' => $cities,
        '#default_value' => $cityId,
        '#ajax' => array(
            'callback' => 'realty_mortgage_ajax_callback', // @todo Не срабатывает нативный AJAX Drupal
            'event' => 'change',
        ),
    );

    $form['affiliate'] = array(
        '#type' => 'radios',
        '#options' => $affiliates,
    );

    $form['personal'] = array(
        '#type' => 'checkboxes',
        '#options' => array('yes' => t('Я соглашаюсь с ') . l(t('условиями обработки персональных данных.'), 'terms_use',
                array('attributes' => array('target' => '_blank')
                )
            ),
        ),
    );

    $form['passport_id'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'passport_id',
            'placeholder' => t('Номер'),
            'maxlength' => 6
        ),
    );

    $form['passport_series'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'passport_series',
            'placeholder' => t('Серия'),
            'maxlength' => 4
        ),
    );

    $form['date_issue'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'date_issue',
            'placeholder' => t('Дата выдачи'),
        ),
    );

    $form['issued_by'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'issued_by',
            'placeholder' => t('Кем выдан'),
        ),
    );

    $form['correct'] = array(
        '#type' => 'checkboxes',
        '#options' => array('yes' => 'Настоящим подтверждаю, что все сведения, содержащиеся в заявке, являются достоверными.'),
    );

    if (isset($node_apt) && $node_apt->type == 'apartament' && $node_apt->field_status[LANGUAGE_NONE][0]['value'] != 0) {
        $form['mortgage_booking'] = array(
            '#type' => 'checkboxes',
            '#options' => array(1 => 'Забронировать эту квартиру (отправить заявку застройщику).'),
        );

        $managers = realty_get_manager_developer($apt_nid);

        $form['managers'] = array(
            '#type' => 'radios',
            '#options' => $managers,
        );

    }

    $form['mortgage-request-submit'] = array(
        '#type' => 'submit',
        '#attributes' => array(
            'class' => array('ok-button', 'use-ajax-submit'),
        ),
        '#ajax' => array(
            'callback' => 'realty_mortgage_request_form_submit',

        ),
        '#value' => t('Отправить заявку'),
    );

    $form['#validate'][] = 'realty_mortgage_request_form_validate';

    $form['#theme'] = 'realty_modal_mortgage_request_form';

    return $form;
}

/**
 * Page callback to mortgage_apartment
 */
function realty_mortgage_ajax_callback($form, $form_state)
{

    $form = drupal_get_form('realty_mortgage_request_form', array(
            'bankId' => $_REQUEST['bankId'],
            'aptId' => $_REQUEST['aptId'],
            'cityId' => $_REQUEST['cityId']
        )
    );

    $render = render($form['affiliate']);

    print $render;
}


/**
 * Getting the developer apartments
 */
function realty_get_developer_apartment($id_apartment)
{
    $apt = node_load($id_apartment);
    $home = taxonomy_term_load($apt->field_apartament_home[LANGUAGE_NONE][0]['tid']);
    $complex = node_load($home->field_home_complex[LANGUAGE_NONE][0]['target_id']);
    $developer = taxonomy_term_load($complex->field_complex_developer[LANGUAGE_NONE][0]['tid']);

    return $developer;
}

/**
 * Form submit for mortgage request.
 */
function realty_mortgage_request_form_submit($form, &$form_state)
{
    global $user;
    $no_email = true;
    // Пользователь не авторизован
    if ($user->uid == 0) {
        $user_email = $form_state['values']['email'];

        $user_account = user_load_by_mail($user_email);

        // Пользователь не зарегистрирован
        if ($user_account == false) {

            // Создание аккаунта пользователя
            $user_account = array(
                'name' => $form_state['values']['email'],
                'mail' => $form_state['values']['email'],
                'pass' => user_password(8),
                'status' => 0,
                'roles' => array(
                    DRUPAL_AUTHENTICATED_RID => 'authenticated user',
                ),
            );

            $user_account['field_user_name'][LANGUAGE_NONE][0]['value'] = $form_state['values']['full_name'];

            $user_registered = user_save(NULL, $user_account);

            // Генерация ссылки для подтверждения email-адреса
            $timestamp = REQUEST_TIME;
            $url = url("user/registrationpassword/$user_registered->uid/$timestamp/" . user_pass_rehash($user_registered->pass, $timestamp, $user_registered->name, $user_registered->uid), array('absolute' => TRUE));

            // Отправка уведомления на email
            realty_send_message('email_verification', $user_registered->mail, array(
                    'url' => $url,
                    'account' => $user_account,
                    'password' => $user_account['pass'])
            );

            /*** Заявка на ипотеку ***/

            // ID банка
            $bank_id = $_GET['bankId'];

            // Извлечение информации о филиале банка
            $affiliate_entity_id = $form_state['values']['affiliate'];
            $affiliate_entity = entity_load('field_collection_item', array($affiliate_entity_id));

            // Извлечение email филиала
            $email = $affiliate_entity[$affiliate_entity_id]->field_bank_affiliates_email[LANGUAGE_NONE][0]['value'];

            // Извлечение информации об ипотечной программе
            $mortgage_entity_id = $_GET['mortgageId'];
            $field_mortgage = entity_load('field_collection_item', array($mortgage_entity_id));

            // Извлечение названия ипотечной программы
            $mortgage_name = $field_mortgage[$mortgage_entity_id]->field_bank_mp_name[LANGUAGE_NONE][0]['value'];

            // Заполнение опций параметрами из формы
            $options = array(
                'name' => $form_state['values']['full_name'],
                'age' => $form_state['values']['age'],
                'mobile_phone' => $form_state['values']['mobile_phone'],
                'home_phone' => $form_state['values']['home_phone'],
                'email' => $form_state['values']['email'],
                'age' => $form_state['values']['age'],
                'mortgage_id' => $mortgage_entity_id,
                'mortgage_name' => $mortgage_name,
                'amount' => $form_state['values']['amount'],
                'apartment' => $_REQUEST['aptId'] ? $_REQUEST['aptId'] : NULL,
                'period' => $form_state['values']['period'],
                'payment' => $form_state['values']['payment'],
                'income' => $form_state['values']['income'],
                'confirmation' => $form_state['values']['confirmation'] == 0 ? '2-НДФЛ' : 'Форма банка',
                'last_experience' => $form_state['values']['last_experience'] == 0 ? 'Менее 3 месяцев' : 'Более 3 месяцев',
                'total_experience' => $form_state['values']['total_experience'] == 0 ? 'Менее 3 лет' : 'Более 3 лет',
                'city' => $form_state['values']['cities'],
                'affiliate' => $mortgage_name,
                'passport_id' => $form_state['values']['passport_id'],
                'passport_series' => $form_state['values']['passport_series'],
                'date_issue' => $form_state['values']['date_issue'],
                'issued_by' => $form_state['values']['issued_by'],
                'bank' => $bank_id,
                'email_manager' => $email,
                'submitted' => 0,
                'user' => $user_registered->uid
            );

            // Создание ноды заявки на ипотеку
            $node = realty_creation_node_mortgage($options);

            // Если выбрано бронирование квартиры
            if ($form_state['values']['mortgage_booking'][1] == '1') {
                $options = array(
                    'name' => $form_state['input']['full_name'],
                    'number_phone' => $form_state['input']['mobile_phone'],
                    'email' => $form_state['input']['email'],
                    'manager' => $form_state['values']['managers'],
                    'apartment' => $node->field_booking_entity[LANGUAGE_NONE][0]['target_id'],
                    'payment' => 2,
                    'passport_id' => $form_state['values']['passport_id'],
                    'passport_series' => $form_state['values']['passport_series'],
                    'date_issue' => $form_state['values']['date_issue'],
                    'issued_by' => $form_state['values']['issued_by'],
                    'submitted' => 0,
                    'user' => $user->uid
                );

                // Создание ноды заявки на бронирование
                $node = realty_creation_node_booking($options);

                // Извлечение информации о менеджере застройщика
                $managers = entity_load('field_collection_item', array($form_state['values']['managers']));
                $manager_email = $managers[$form_state['values']['managers']]->field_manager_e_mail[LANGUAGE_NONE][0]['value'];

                // Изменение статуса квартиры
                realty_change_status_apartment($options['apartment']);
            }

            // Cообщение о необходимости подтвердить алрес электронной почты
            $message = '<h5>' .
                t('На Вашу электронную почту было отправлено письмо для подтверждения адреса. Для отправки заявки на ипотеку подтвердите Ваш email-адрес, перейдя по ссылке в письме. Сразу после подтверждения email-адреса, заявка будет отправлена специалистам в выбранный Вами банк.') .
                '</h5>';

            $close_button = '<div class="col-xs-12 modal-button">
    <button type="button" class="ok-button  modal-but" data-dismiss="modal" aria-hidden="true"> ' . t('Закрыть') . ' </button>
    </div>';

            $commands[] = ajax_command_html('#hint-box', '');
            $commands[] = ajax_command_html('#info-box', $message . $close_button);

            ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
        } // Пользователь зарегистрирован
        else {

            // Если пользователь не активирован
            if ($user_account->status == 0) {

                // Генерация нового пароля
                $change_password = array(
                    'pass' => user_password(8)
                );
                $user_registered = user_save($user_account, $change_password);

                // Генерация ссылки для подтверждения email-адреса
                $timestamp = REQUEST_TIME;
                $url = url("user/registrationpassword/$user_registered->uid/$timestamp/" . user_pass_rehash($user_registered->pass, $timestamp, $user_registered->name, $user_registered->uid), array('absolute' => TRUE));

                // Отправка уведомления на email
                realty_send_message('email_verification', $user_registered->mail, array(
                        'url' => $url,
                        'account' => $user_registered,
                        'password' => $change_password['pass'])
                );

                // Cообщение о необходимости подтвердить алрес электронной почты
                $message = '<h5>' .
                    t('На Вашу электронную почту было отправлено письмо для подтверждения адреса. Для отправки заявки на ипотеку подтвердите Ваш email-адрес, перейдя по ссылке в письме. Сразу после подтверждения email-адреса, заявка будет отправлена специалистам в выбранный Вами банк.') .
                    '</h5>';

                $close_button = '<div class="col-xs-12 modal-button">
    <button type="button" class="ok-button  modal-but" data-dismiss="modal" aria-hidden="true"> ' . t('Закрыть') . ' </button>
    </div>';

                $commands[] = ajax_command_html('#hint-box', '');
                $commands[] = ajax_command_html('#info-box', $message . $close_button);

                ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
            } // Если пользователь активирован
            else {                                                                                                                      

                // Генерация ссылки для подтверждения email-адреса
                $timestamp = REQUEST_TIME;
                $url = url("request_submit/$user_account->uid/$timestamp/" . user_pass_rehash($user_account->pass, $timestamp, $user_account->name, $user_account->uid), array('absolute' => TRUE));

                // Отправка уведомления на email
                realty_send_message('request_submit', $user_account->mail, array(
                        'url' => $url,
                        'account' => $user_account)
                );

                /*** Заявка на ипотеку ***/

                // ID банка
                $bank_id = $_GET['bankId'];

                // Извлечение информации о филиале банка
                $affiliate_entity_id = $form_state['values']['affiliate'];
                $affiliate_entity = entity_load('field_collection_item', array($affiliate_entity_id));

                // Извлечение email филиала
                $email = $affiliate_entity[$affiliate_entity_id]->field_bank_affiliates_email[LANGUAGE_NONE][0]['value'];

                // Извлечение информации об ипотечной программе
                $mortgage_entity_id = $_GET['mortgageId'];
                $field_mortgage = entity_load('field_collection_item', array($mortgage_entity_id));

                // Извлечение названия ипотечной программы
                $mortgage_name = $field_mortgage[$mortgage_entity_id]->field_bank_mp_name[LANGUAGE_NONE][0]['value'];

                // Заполнение опций параметрами из формы
                $options = array(
                    'name' => $form_state['values']['full_name'],
                    'age' => $form_state['values']['age'],
                    'mobile_phone' => $form_state['values']['mobile_phone'],
                    'home_phone' => $form_state['values']['home_phone'],
                    'email' => $form_state['values']['email'],
                    'age' => $form_state['values']['age'],
                    'mortgage_id' => $mortgage_entity_id,
                    'mortgage_name' => $mortgage_name,
                    'amount' => $form_state['values']['amount'],
                    'apartment' => $_REQUEST['aptId'] ? $_REQUEST['aptId'] : NULL,
                    'period' => $form_state['values']['period'],
                    'payment' => $form_state['values']['payment'],
                    'income' => $form_state['values']['income'],
                    'confirmation' => $form_state['values']['confirmation'] == 0 ? '2-НДФЛ' : 'Форма банка',
                    'last_experience' => $form_state['values']['last_experience'] == 0 ? 'Менее 3 месяцев' : 'Более 3 месяцев',
                    'total_experience' => $form_state['values']['total_experience'] == 0 ? 'Менее 3 лет' : 'Более 3 лет',
                    'city' => $form_state['values']['cities'],
                    'affiliate' => $mortgage_name,
                    'passport_id' => $form_state['values']['passport_id'],
                    'passport_series' => $form_state['values']['passport_series'],
                    'date_issue' => $form_state['values']['date_issue'],
                    'issued_by' => $form_state['values']['issued_by'],
                    'bank' => $bank_id,
                    'email_manager' => $email,
                    'submitted' => 0,
                    'user' => $user_account->uid
                );

                // Создание ноды заявки на ипотеку
                $node = realty_creation_node_mortgage($options);

                // Если выбрано бронирование квартиры
                if ($form_state['values']['mortgage_booking'][1] == '1') {
                    $options = array(
                        'name' => $form_state['input']['full_name'],
                        'number_phone' => $form_state['input']['mobile_phone'],
                        'email' => $form_state['input']['email'],
                        'manager' => $form_state['values']['managers'],
                        'entity' => $node->field_apartment[LANGUAGE_NONE][0]['target_id'],
                        'payment' => 2,
                        'passport_id' => $form_state['values']['passport_id'],
                        'passport_series' => $form_state['values']['passport_series'],
                        'date_issue' => $form_state['values']['date_issue'],
                        'issued_by' => $form_state['values']['issued_by'],
                        'submitted' => 0,
                        'user' => $user->uid
                    );

                    // Создание ноды заявки на бронирование
                    $node = realty_creation_node_booking($options);

                    // Извлечение информации о менеджере застройщика
                    $managers = entity_load('field_collection_item', array($form_state['values']['managers']));
                    $manager_email = $managers[$form_state['values']['managers']]->field_manager_e_mail[LANGUAGE_NONE][0]['value'];

                    // Изменение статуса квартиры
                    realty_change_status_apartment($options['apartment']);
                }

                // Cообщение об успешно поданой заявке
                $message = '<h5>' .
                    t('На Вашу электронную почту было отправлено письмо для подтверждения заявки. Для отправки заявки на ипотеку перейдите по ссылке в письме. Сразу после подтверждения, заявка будет отправлена специалистам в выбранный Вами банк.') .
                    '</h5>';

                $close_button = '<div class="col-xs-12 modal-button">
    <button type="button" class="ok-button  modal-but" data-dismiss="modal" aria-hidden="true"> ' . t('Закрыть') . ' </button>
    </div>';

                $commands[] = ajax_command_html('#hint-box', '');
                $commands[] = ajax_command_html('#info-box', $message . $close_button);

                ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
            }
        }
    } // Пользователь авторизован
    else {

        // ID банка
        $bank_id = $_GET['bankId'];

        // Извлечение информации о филиале банка
        $affiliate_entity_id = $form_state['values']['affiliate'];
        $affiliate_entity = entity_load('field_collection_item', array($affiliate_entity_id));

        // Извлечение email филиала
        $email = $affiliate_entity[$affiliate_entity_id]->field_bank_affiliates_email[LANGUAGE_NONE][0]['value'];

        // Извлечение информации об ипотечной программе
        $mortgage_entity_id = $_GET['mortgageId'];
        $field_mortgage = entity_load('field_collection_item', array($mortgage_entity_id));

        // Извлечение названия ипотечной программы
        $mortgage_name = $field_mortgage[$mortgage_entity_id]->field_bank_mp_name[LANGUAGE_NONE][0]['value'];

        // Заполнение опций параметрами из формы
        $options = array(
            'name' => $form_state['values']['full_name'],
            'age' => $form_state['values']['age'],
            'mobile_phone' => $form_state['values']['mobile_phone'],
            'home_phone' => $form_state['values']['home_phone'],
            'email' => $form_state['values']['email'],
            'age' => $form_state['values']['age'],
            'mortgage_id' => $mortgage_entity_id,
            'mortgage_name' => $mortgage_name,
            'amount' => $form_state['values']['amount'],
            'apartment' => $_REQUEST['aptId'] ? $_REQUEST['aptId'] : NULL,
            'period' => $form_state['values']['period'],
            'payment' => $form_state['values']['payment'],
            'income' => $form_state['values']['income'],
            'confirmation' => $form_state['values']['confirmation'] == 0 ? '2-НДФЛ' : 'Форма банка',
            'last_experience' => $form_state['values']['last_experience'] == 0 ? 'Менее 3 месяцев' : 'Более 3 месяцев',
            'total_experience' => $form_state['values']['total_experience'] == 0 ? 'Менее 3 лет' : 'Более 3 лет',
            'city' => $form_state['values']['cities'],
            'affiliate' => $mortgage_name,
            'passport_id' => $form_state['values']['passport_id'],
            'passport_series' => $form_state['values']['passport_series'],
            'date_issue' => $form_state['values']['date_issue'],
            'issued_by' => $form_state['values']['issued_by'],
            'bank' => $bank_id,
            'submitted' => 1,
            'user' => $user->uid
        );

        // Создание ноды заявки на ипотеку
        $node = realty_creation_node_mortgage($options);

        // Отправка уведомления менеджеру
        realty_send_message('mortgage_request', $email, $node);

        // Отправка уведомления покупателю
        realty_send_message('mortgage_request_user', $form_state['values']['email'], $node);

        // Если выбрано бронирование квартиры
        if ($form_state['values']['mortgage_booking'][1] == '1') {
            $options = array(
                'name' => $form_state['input']['full_name'],
                'number_phone' => $form_state['input']['mobile_phone'],
                'email' => $form_state['input']['email'],
                'manager' => $form_state['values']['managers'],
                'apartment' => $node->field_apartment[LANGUAGE_NONE][0]['target_id'],
                'payment' => 2,
                'passport_id' => $form_state['values']['passport_id'],
                'passport_series' => $form_state['values']['passport_series'],
                'date_issue' => $form_state['values']['date_issue'],
                'issued_by' => $form_state['values']['issued_by'],
                'submitted' => 1,
                'user' => $user->uid
            );

            // Создание ноды заявки на бронирование
            $node = realty_creation_node_booking($options);

            // Извлечение информации о менеджере застройщика
            $managers = entity_load('field_collection_item', array($form_state['values']['managers']));
            $manager_email = $managers[$form_state['values']['managers']]->field_manager_e_mail[LANGUAGE_NONE][0]['value'];

            // Отправка заявки менеджеру застройщика
            realty_send_message('booking_request', 'findome@mail.ru', $node);

            // Изменение статуса квартиры
            realty_change_status_apartment($options['apartment']);
        }

        // Cообщение об успешно поданой заявке
        $message = '<h5>' .
            t('Заявка в банк на рассмотрение условий выдачи ипотечного кредита успешно отправлена! В самое ближайшее время с Вами свяжется специалист банка!') .
            '</h5>';

        $close_button = '<div class="col-xs-12 modal-button">
    <button type="button" class="ok-button  modal-but" data-dismiss="modal" aria-hidden="true"> ' . t('Закрыть') . ' </button>
    </div>';

        $commands[] = ajax_command_html('#hint-box', '');
        $commands[] = ajax_command_html('#info-box', $message . $close_button);

        ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
    }

    drupal_exit();
}

/**
 * Form validate for mortgage request
 */
function realty_mortgage_request_form_validate($form, &$form_state)
{

    $messages = '';

    if (empty($form_state['values']['full_name'])) {
        $messages .= '<p>Пожалуйста, заполните поле ФИО</p>';
        $commands[] = ajax_command_invoke('#input-full_name', 'addClass', array('error-input'));
    }

    if (empty($form_state['values']['age'])) {
        $messages .= '<p>Пожалуйста, заполните поле Возраст</p>';
        $commands[] = ajax_command_invoke('#input-age', 'addClass', array('error-input'));
    }

    if (empty($form_state['values']['mobile_phone'])) {
        $messages .= '<p>Пожалуйста, заполните поле Мобильный телефон</p>';
        $commands[] = ajax_command_invoke('#input-mobile_phone', 'addClass', array('error-input'));
    } else {
        if (realty_check_phone_number($form_state['values']['mobile_phone']) == FALSE) {
            $messages .= '<p>' . t('Мобильный телефон некорректен') . '</p>';
        }
    }

    if (empty($form_state['values']['email'])) {
        $messages .= '<p>Пожалуйста, заполните поле Электронная почта</p>';
        $commands[] = ajax_command_invoke('#input-email', 'addClass', array('error-input'));
    }

    if (empty($form_state['values']['amount'])) {
        $messages .= '<p>Пожалуйста, заполните поле Сумма кредитования</p>';
        $commands[] = ajax_command_invoke('#input-amount', 'addClass', array('error-input'));
    }

    if (empty($form_state['values']['period'])) {
        $messages .= '<p>Пожалуйста, заполните поле Срок кредитования</p>';
        $commands[] = ajax_command_invoke('#input-period', 'addClass', array('error-input'));
    }

    if (empty($form_state['values']['payment'])) {
        $messages .= '<p>Пожалуйста, заполните поле Первоначальный взнос</p>';
        $commands[] = ajax_command_invoke('#input-payment', 'addClass', array('error-input'));
    }

    if (empty($form_state['values']['income'])) {
        $messages .= '<p>Пожалуйста, заполните поле Ежемесячный доход</p>';
        $commands[] = ajax_command_invoke('#input-income', 'addClass', array('error-input'));
    }

    if ($form_state['values']['confirmation'] == null) {
        $messages .= '<p>Пожалуйста, заполните поле Форма подтверждения</p>';
        $commands[] = ajax_command_invoke('#input-confirmation', 'addClass', array('error-input'));
    }

    if ($form_state['values']['last_experience'] == null) {
        $messages .= '<p>Пожалуйста, заполните поле Стаж на последнем месте</p>';
        $commands[] = ajax_command_invoke('#input-last_experience', 'addClass', array('error-input'));
    }

    if ($form_state['values']['total_experience'] == null) {
        $messages .= '<p>Пожалуйста, заполните поле Общий стаж</p>';
        $commands[] = ajax_command_invoke('#input-total_experience', 'addClass', array('error-input'));
    }

    if ($form_state['values']['affiliate'] == null) {
        $messages .= '<p>Пожалуйста, выберите удобный для Вас филиал банка</p>';
        $commands[] = ajax_command_invoke('#input-affiliate', 'addClass', array('error-input'));
    }

    $personal = strlen($form_state['values']['personal']['yes']);
    $correct = strlen($form_state['values']['correct']['yes']);

    if ($personal != 3) {
        $messages .= '<p>Пожалуйста, согласитесь с условиями обработки персональных данных, поставив галочку в соответствующем поле</p>';

    }
    if ($correct != 3) {
        $messages .= '<p>Пожалуйста, подтвердите достоверность введеных сведений, поставив галочку в соответствующем поле</p>';
    }

    if ($form_state['values']['mortgage_booking'][1] == '1') {
        if (!$form_state['values']['managers']) {
            $messages .= '<p> ' . t('Пожалуйста выберите менеджера') . ' </p>';
        }
    }
    /*
    if (empty($form_state['values']['date_issue'])) {
      $messages .= '<p>Поле "Дата выдачи" обязательно для заполнения</p>';
      $commands[] = ajax_command_invoke('input[name="date_issue"]', 'addClass', array('error-input-bottom'));
    }
    if (empty($form_state['values']['issued_by'])) {
      $messages .= '<p>Поле "Кем выдан" обязательно для заполнения</p>';
      $commands[] = ajax_command_invoke('input[name="issued_by"]', 'addClass', array('error-input-bottom'));
    }

    if (empty($form_state['values']['passport_series'])) {
      $messages .= '<p>' . t('Поле "Серия паспорта" обязательно для заполнения') . '</p>';
      $commands[] = ajax_command_invoke('input[name="passport_series"]', 'addClass', array('error-input-bottom'));
    }
    else {
      if (realty_check_passport_data(NULL, $form_state['values']['passport_series']) == NULL) {
        $messages .= '<p>' . t('Серия паспорта некорректна') . '</p>';
        $commands[] = ajax_command_invoke('input[name="passport_series"]', 'addClass', array('error-input-bottom'));
      }
    }

    if (empty($form_state['values']['passport_id'])) {
      $messages .= '<p>' . t('Поле "Номер паспорта" обязательно для заполнения') . '</p>';
    }
    else {
      if (realty_check_passport_data($form_state['values']['passport_id'], NULL) == NULL) {
        $messages .= '<p>' . t('Номер паспорта некорректен') . '</p>';
        $commands[] = ajax_command_invoke('input[name="passport_id"]', 'addClass', array('error-input-bottom'));
      }
    }
  */
    if ($messages != '') {
        $commands[] = ajax_command_css('#hint-box', array('display' => 'inline'));
        $commands[] = ajax_command_html('#hint-box', $messages);
        $commands[] = ajax_command_invoke('.modal_ajax', 'scrollTop', array(0));
    }

    if (!empty($commands)) {
        ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

        drupal_exit();
    }
}

/**
 * Page callback to realty/complex_plan/get_plan_complex.
 */
function realty_complex_plan_get_plan_complex()
{
    if (isset($_POST['complex_id'])) {
        $node = node_load($_POST['complex_id']);
        $complex_plan = file_get_contents(realty_file_directory_path() . '/' . $node->field_plan_complex[LANGUAGE_NONE][0]['filename']);
        print json_encode(array(
            'complex' => $complex_plan,
            'complex_plan' => TRUE,
        ));
    }
    drupal_exit();
}

/**
 * Page callback to realty_complex_plan_get_count_ap_floor
 */
function realty_complex_plan_get_count_ap_floor()
{
    $home_tid = $_POST['home'];
    $section_id = $_POST['section'];
    $floor = $_POST['floor'];
    $result = db_query("SELECT count (node.nid) AS count_ap
                        FROM node
                        LEFT JOIN field_data_field_apartament_home ON node.nid = field_data_field_apartament_home.entity_id
                        LEFT JOIN field_data_field_apartment_floor ON node.nid = field_data_field_apartment_floor.entity_id
                        LEFT JOIN field_data_field_section ON node.nid = field_data_field_section.entity_id
                        LEFT JOIN field_data_field_status ON node.nid = field_data_field_status.entity_id
                        WHERE node.status = 1 AND
                        field_data_field_apartament_home.field_apartament_home_tid = :home_tid AND
                        field_data_field_status.field_status_value = 1 AND
                        field_data_field_section.field_section_value = :section_id AND
                        field_data_field_apartment_floor.field_apartment_floor_value = :floor",
        array(':home_tid' => $home_tid, ':floor' => $floor, ':section_id' => $section_id)
    )->fetchAll();

    if (!empty($result)) {
        print $result[0]->count_ap;
    } else {
        print 0;
    }
    drupal_exit();
}

/**
 * Page callback to realty_complex_plan_get_home_id.
 */
function realty_complex_plan_get_home_id()
{
    isset($_POST['floor']) ? $num_floor = $_POST['floor'] : $num_floor = FALSE;
    isset($_POST['section_id']) ? $section_id = $_POST['section_id'] : $section_id = FALSE;
    realty_plan_complex_get_floor_plan($_POST['home_id'], $section_id, $num_floor);
}

/**
 * Get the floor plan.
 */
function realty_plan_complex_get_floor_plan($home_id, $section_id, $num_floor = FALSE, $flag = FALSE)
{

    // Если секция не указана
    if ($section_id == FALSE) {

        // Извлечение ID первой секции в доме
        $home = taxonomy_term_load($home_id);
        $entity_id_section = $home->field_home_section[LANGUAGE_NONE][0]['value'];

        $entity_section = entity_load('field_collection_item',
            array($entity_id_section));

        $section_id = $entity_section[$entity_id_section]->field_number_section[LANGUAGE_NONE][0]['value'];
    }

    $home_plan = TRUE;
    $home = taxonomy_term_load($home_id);
    if (isset($_POST['home_flag']) && !empty($home->field_home_plan)) {
        $home_plan = file_get_contents(file_create_url($home->field_home_plan[LANGUAGE_NONE][0]['uri']));
        $answer = array(
            'home_number' => $home->field_number_home[LANGUAGE_NONE][0]['value'],
            'home_plan' => $home_plan
        );
        $home_plan = TRUE;
        unset($section_id);
        print json_encode($answer);
    } else {
        $home_plan = FALSE;
    }


    if (isset($section_id) || $home_plan == FALSE) {
        $view = views_get_view('term_view');
        $view->set_display('home_plan_complex');
        $view->display_handler->options['arguments']['tid']['default_argument_options']['argument'] = $home_id;

        /*if (!empty($home->field_home_plan)) {*/
        $view->display_handler->options['filters']['field_number_section_value']['value'] = $section_id;
        /*    }
        else {
          unset($view->display_handler->options['filters']['field_number_section_value']);
        }*/

        $view->display_handler->options['filters']['field_plan_number_section_value']['value'] = $section_id;
        $view->pre_execute(array());
        $view->display_handler->preview();
        $view->post_execute();

        if (!empty($view->result)) {
            $floors = array();
            $homes = $view->result;
            $home_number = $view->result[0]->field_field_number_home[0]['raw']['value'];
            foreach ($view->result as $home) {
                if (substr_count($home->field_field_plan_number_floor[0]['raw']['value'], '-') > 0) {
                    $fls = explode('-', $home->field_field_plan_number_floor[0]['raw']['value']);
                    $j = 0;
                    for ($i = $fls[0]; $i <= $fls[1]; $i++) {
                        $i = (int)$i;
                        array_push($floors, $i);
                        if (isset($num_floor) && $i == $num_floor) {
                            $floor_plan = array(
                                'plan' => file_get_contents(file_create_url($home->field_field_image_plan_floor[0]['raw']['uri'])),
                                'floor' => $i,
                            );
                        }

                        if ($num_floor == FALSE && $j == 0) {
                            if (isset($floor_plan) && $floor_plan['floor'] > $i) {
                                $floor_plan = array(
                                    'plan' => file_get_contents(file_create_url($home->field_field_image_plan_floor[0]['raw']['uri'])),
                                    'floor' => $i,
                                );
                            } elseif (!isset($floor_plan)) {
                                $floor_plan = array(
                                    'plan' => file_get_contents(file_create_url($home->field_field_image_plan_floor[0]['raw']['uri'])),
                                    'floor' => $i,
                                );
                            }
                        }
                        $j++;
                    }
                }
                if (substr_count($home->field_field_plan_number_floor[0]['raw']['value'], ',') > 0) {
                    $fls = explode(',', $home->field_field_plan_number_floor[0]['raw']['value']);
                    sort($fls);
                    foreach ($fls as $k => $f) {
                        $f = (int)$f;
                        array_push($floors, $f);
                        if (isset($num_floor) && $f == $num_floor) {
                            $floor_plan = array(
                                'plan' => file_get_contents(file_create_url($home->field_field_image_plan_floor[0]['raw']['uri'])),
                                'floor' => $f,
                            );
                        }
                        if ($num_floor == FALSE && $k == 0) {
                            if (isset($floor_plan) && $floor_plan['floor'] > $f) {
                                $floor_plan = array(
                                    'plan' => file_get_contents(file_create_url($home->field_field_image_plan_floor[0]['raw']['uri'])),
                                    'floor' => $f,
                                );
                            } elseif (!isset($floor_plan)) {
                                $floor_plan = array(
                                    'plan' => file_get_contents(file_create_url($home->field_field_image_plan_floor[0]['raw']['uri'])),
                                    'floor' => $f,
                                );
                            }
                        }
                    }
                }
            }
            //$floors = array_unique($floors); // @todo Костыль. Дублируются этажи во views
            sort($floors);
            if ($num_floor == false) {
                $num_floor_display = 1;
            } else {
                $num_floor_display = $num_floor;
            }
            $answer_floors = '<li style="padding-right: 30px">Выберите этаж</li>';
            $answer_current_floor = $num_floor_display;

            foreach ($floors as $key => $floor) {
                if ((isset($num_floor) && $floor == $num_floor) || ($num_floor == FALSE && $key == 0)) {
                    $answer_floors .= '<li class="number-floor-active">
            <a href="#href" data-floor="' . $floor . '" data-home="' . $home_id . '" data-section="' . $section_id . '"
            class="plan-complex-home-section link-floor active-area">' .
                        $floor . '</a>
          </li>';
                } else {
                    $answer_floors .= '<li>
            <a href="#href" data-floor="' . $floor . '" data-home="' . $home_id . '" data-section="' . $section_id . '"
              rel="tooltip" data-placement="bottom" title="00"
             class="plan-complex-home-section link-floor">' .
                        $floor . '
            </a>
          </li>';
                }
            }

            $answer = array(
                'floor_plan' => $floor_plan['plan'],
                'floor_link' => $answer_floors . '</ul></li></ul>',
                'home_number' => $home_number,
                'section_number' => $section_id,
                'current_floor' => $answer_current_floor
            );

            if (count($home->field_field_home_plan) < 1) {
                $answer['section_number'] = FALSE;
            }

            if (isset($_POST['apt_id'])) {
                $apt = node_load($_POST['apt_id']);
                $apt_num = $apt->field_number_apartament[LANGUAGE_NONE][0]['value'];
            } else {
                $apt_num = FALSE;
            }

            $apartment_book = array();
            $apartment_active = array();
            $view = views_get_view('apartments');
            $view->set_display('apartment_floor');
            $view->display_handler->options['arguments']['tid']['default_argument_options']['argument'] = $home_id;
            $view->display_handler->options['filters']['field_section_value']['value'] = $section_id;
            $view->display_handler->options['filters']['field_apartment_floor_value']['value']['value'] = $floor_plan['floor'];
            $view->pre_execute(array());
            $view->display_handler->preview();
            $view->post_execute();
            $apartments_floor = $view->result;
            foreach ($homes as $home) {
                if (!empty($home->field_field_apartments)) {
                    $apartments = $home->field_field_apartments[0]['raw']['value'];
                    $apartments = json_decode($apartments);
                    foreach ($apartments as $apartment) {
                        $aps = explode('-', $apartment);
                        foreach ($aps as $k => $ap) {
                            if ($k == 0) {
                                continue;
                            } else {
                                $ap_num_fl = explode('_', $ap);
                                foreach ($apartments_floor as $ap_comp) {
                                    if ($ap_num_fl[0] == $apt_num && $floor_plan['floor'] == $ap_num_fl[1]) {
                                        $current_apartment = $apartment;
                                    }
                                    if ($ap_comp->field_field_number_apartament[0]['raw']['value'] == $ap_num_fl[0] &&
                                        $floor_plan['floor'] == $ap_num_fl[1]
                                    ) {
                                        if ($ap_comp->field_field_status[0]['raw']['value'] == 1) {
                                            $apartment_active[$apartment] = array();
                                            array_push($apartment_active[$apartment], $ap_num_fl[1]);
                                        } else {
                                            $apartment_book[$apartment] = array();
                                            array_push($apartment_book[$apartment], $ap_num_fl[1]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }


            !empty($apartment_book) ? $answer['apartment_book'] = $apartment_book : $answer['apartment_book'] = FALSE;
            !empty($apartment_active) ? $answer['apartment_active'] = $apartment_active : $answer['apartment_active'] = FALSE;
            !empty($current_apartment) ? $answer['current_apartment'] = $current_apartment : $answer['current_apartment'] = FALSE;


            print json_encode($answer);
        }
    }
    if ($flag == TRUE) {
        return $answer;
    } else {
        drupal_exit();
    }
}

/**
 * the creation of a node type booking.
 */
function realty_creation_node_booking($array_options)
{
    $a = node_load(3732);
    $count_booking = count(views_get_view_result('booking', 'all_booking'));
    $count_booking++;
    $manager = field_collection_item_load($array_options['manager']);


    $node = new stdClass();
    $node->type = 'booking';
    node_object_prepare($node);
    $node->title = 'Бронирование №' . $count_booking;
    $node->language = LANGUAGE_NONE;
    $node->body[LANGUAGE_NONE][0]['value'] = '';

    $res = db_query("SELECT * FROM node WHERE nid = :nid", array(':nid' => $array_options['entity']))->fetchField();
    if ($res) {
        $node->field_booking_entity[LANGUAGE_NONE][0]['target_id'] = $array_options['entity'];
    } else {
        $node->field_booking_developer[LANGUAGE_NONE][0]['tid'] = $array_options['entity'];
    }
    $node->field_booking_user[LANGUAGE_NONE][0]['target_id'] = $array_options['user'];
    $node->field_booking_numbers[LANGUAGE_NONE][0]['value'] = $count_booking;
    $node->field_booking_name[LANGUAGE_NONE][0]['value'] = $array_options['name'];
    $node->field_passport_id[LANGUAGE_NONE][0]['value'] = $array_options['passport_id'];
    $node->field_passport_series[LANGUAGE_NONE][0]['value'] = $array_options['passport_series'];
    $node->field_date_issue[LANGUAGE_NONE][0]['value'] = $array_options['date_issue'];
    $node->field_issued_by[LANGUAGE_NONE][0]['value'] = $array_options['issued_by'];
    $node->field_booking_number_phone[LANGUAGE_NONE][0]['value'] = $array_options['number_phone'];
    $node->field_booking_email[LANGUAGE_NONE][0]['value'] = $array_options['email'];
    $node->field_booking_manager = $manager->field_manager_name;
    $node->field_email_manager[LANGUAGE_NONE][0]['value'] = $manager->field_manager_e_mail[LANGUAGE_NONE][0]['value'];
    $node->field_method_purchase[LANGUAGE_NONE][0]['value'] = $array_options['payment'];
    $node->field_booking_submitted[LANGUAGE_NONE][0]['value'] = $array_options['submitted'];

    $node->uid = 1;
    if (!empty($array_options['documents'])) {
        $filepath = 'public://booking_documents';
        file_prepare_directory($filepath, FILE_CREATE_DIRECTORY);

        $files_count = count($array_options['documents']);
        for ($i = 0; $i < $files_count; $i++) {
            $path = $array_options['documents'][$i]['tmppath'];
            $name = $array_options['documents'][$i]['name'];
            $file = (object)array(
                'uid' => $array_options['user'],
                'uri' => $path,
                'filemime' => file_get_mimetype($path),
                'display' => 1,
                'status' => 1
            );
            if ($file = file_copy($file, $filepath . '/' . $name)) {
                drupal_set_message('Success');
            } else {
                drupal_set_message('Error', 'error');
            }
            $node->field_booking_document[LANGUAGE_NONE][$i] = (array)$file;
        }
    }

    $node->status = 1;
    $node->promote = 1;
    node_save($node);

    return $node;
}

/**
 * the creation of a node type mortgage.
 */
function realty_creation_node_mortgage($options)
{
    global $user;

    $node = new stdClass();
    $node->type = 'mortgage';

    node_object_prepare($node);

    $node->title = 'Заявка на ипотеку';
    $node->language = LANGUAGE_NONE;

    if ($options['apartment'] != NULL) {
        $node->field_apartment[LANGUAGE_NONE][0]['target_id'] = $options['apartment'];
    }
    $node->field_user[LANGUAGE_NONE][0]['target_id'] = $options['user'];
    $node->field_applicant_email[LANGUAGE_NONE][0]['value'] = $options['email'];
    $node->field_bank[LANGUAGE_NONE][0]['tid'] = $options['bank'];
    $node->field_full_name[LANGUAGE_NONE][0]['value'] = $options['name'];
    $node->field_morgage_age_applican[LANGUAGE_NONE][0]['value'] = $options['age'];
    $node->field_phone[LANGUAGE_NONE][0]['value'] = $options['mobile_phone'];
    $node->field_required_amount[LANGUAGE_NONE][0]['value'] = $options['amount'];
    $node->field_mortgage_id[LANGUAGE_NONE][0]['target_id'] = $options['mortgage_id'];
    $node->field_mortgage_name[LANGUAGE_NONE][0]['value'] = $options['mortgage_name'];
    $node->field_mortgage_period[LANGUAGE_NONE][0]['value'] = $options['period'];
    $node->field_mortgage_payment[LANGUAGE_NONE][0]['value'] = $options['payment'];
    $node->field_mortgage_income[LANGUAGE_NONE][0]['value'] = $options['income'];
    $node->field_mortgage_confirm_form[LANGUAGE_NONE][0]['value'] = $options['confirmation'];
    $node->field_mortgage_last_experience[LANGUAGE_NONE][0]['value'] = $options['last_experience'];
    $node->field_mortgage_total_experience[LANGUAGE_NONE][0]['value'] = $options['total_experience'];
    $node->field_mortgage_city[LANGUAGE_NONE][0]['tid'] = $options['city'];
    $node->field_mortgage_bank_affiliate[LANGUAGE_NONE][0]['value'] = $options['affiliate'];
    $node->field_mortgage_passport_id[LANGUAGE_NONE][0]['value'] = $options['passport_id'];
    $node->field_mortgage_passport_series[LANGUAGE_NONE][0]['value'] = $options['passport_series'];
    $node->field_mortgage_date_issue[LANGUAGE_NONE][0]['value'] = $options['date_issue'];
    $node->field_mortgage_issued_by[LANGUAGE_NONE][0]['value'] = $options['issued_by'];
    $node->field_mortgage_submitted[LANGUAGE_NONE][0]['value'] = $options['submitted'];
    $node->field_mortgage_magager_email[LANGUAGE_NONE][0]['value'] = $options['email_manager'];

    $node->uid = 1;

    if ($node = node_submit($node)) {
        node_save($node);
    }

    return $node;
}

/**
 * Change of status from apartment.
 */
function realty_change_status_apartment($nid)
{
    $node = node_load($nid);
    if ($node->field_status[LANGUAGE_NONE][0]['value'] == 1) {
        $node->field_status[LANGUAGE_NONE][0]['value'] = 0;
        node_save($node);
        return TRUE;
    } else {
        return FALSE;
    }

}

/**
 * Page callback to /apartment/booking.
 */
function realty_apartment_booking()
{
    global $user;

    if ($user->uid != 0 && isset($_GET['nid'])) {
        if (realty_change_status_apartment($_GET['nid']) == TRUE) {
            // realty_creation_node_booking();
        }
    } else {
        print 'user';
    }
    drupal_exit();
}

/**
 * Create comment.
 */
function realty_create_comment($user, $node_nid, $body, $assessment, $pid)
{

    $comment = new stdClass();
    $comment->nid = $node_nid;
    $comment->uid = $user->uid;
    $comment->name = $user->name;
    $comment->subject = 'Subject';
    $comment->status = 0;
    $comment->field_body[LANGUAGE_NONE][0]['value'] = $body;
    $comment->field_body[LANGUAGE_NONE][0]['format'] = NULL;
    $comment->field_body[LANGUAGE_NONE][0]['safe_value'] = $body;
    $comment->field_comment_assessment[LANGUAGE_NONE][0]['value'] = $assessment ? $assessment : 0;
    $comment->hostname = $_SERVER['REMOTE_HOST'] ? $_SERVER['REMOTE_HOST'] : '127.0.0.1';

    if ($pid) {
        $comment->pid = $pid;
        $comment->thread = '01.00/';
    } else {
        $comment->thread = '01/';
    }

    $comment = comment_submit($comment);
    comment_save($comment);

    return true;
}

/**
 * Page callback to /realty_add_comment.
 */
function realty_add_comment()
{
    global $user;

    // Если
    if ($_POST['comment'] && $_POST['comment'] != '' &&
        $_POST['nid'] && $user->uid != 0 &&
        (int)$_POST['assessment'] >= -1 && (int)$_POST['assessment'] <= 1
    ) {

        $_POST['pid'] == 'false' ? $pid = FALSE : $pid = $_POST['pid'];
        realty_create_comment($user, $_POST['nid'], $_POST['comment'], $_POST['complex_assessment'], $pid);

        print TRUE;
        drupal_exit();
    } else {
        print FALSE;
        drupal_exit();
    }
}

/**
 * Page callback to /realty_add_review.
 */
function realty_add_review()
{
    global $user;

    // Если поля заполены корректно
    if ($_POST['review'] && $_POST['review'] != '' &&
        $_POST['tid'] && $user->uid != 0 &&
        (int)$_POST['assessment'] >= -5 && (int)$_POST['assessment'] <= 5
    ) {

        $node_rev = db_query("SELECT field_data_field_review_developer_developer.entity_id
                          FROM field_data_field_review_developer_developer
                          WHERE field_data_field_review_developer_developer.field_review_developer_developer_target_id = :tid",
            array(':tid' => $_POST['tid']))->fetchAll();


        $_POST['pid'] == 'false' ? $pid = FALSE : $pid = $_POST['pid'];
        realty_create_comment($user, $node_rev[0]->nid, $_POST['review'], $_POST['assessment'], $pid);

        print TRUE;
        drupal_exit();
    } else {
        print FALSE;
        drupal_exit();
    }
}

/**
 * Page callback to /realty_get_appartment_info.
 */
function realty_get_appartment_info($nid = NULL)
{
    global $user;
    $nid == NULL ? $nid = $_POST['nid'] : $nid;

    $appartment = node_load($nid);
    $home = taxonomy_term_load($appartment->field_apartament_home[LANGUAGE_NONE][0]['tid']);
    $home = taxonomy_term_view($home);

    $out = array();

    if (isset($appartment->field_plan_apartment[LANGUAGE_NONE][0]['uri'])) {
        $out['img_plan'] = theme('image_style', array(
            'style_name' => 'apartment_plan_500x526',
            'path' => $appartment->field_plan_apartment[LANGUAGE_NONE][0]['uri'],
            'title' => 'План квартиры',
            'attributes' => array(
                'class' => array('apartment-image-vertical'),
            ),
        ));
    } else if (isset($appartment->field_location_floor[LANGUAGE_NONE][0]['uri'])) {
        $out['img_plan'] = theme('image_style', array(
            'style_name' => 'apartment_plan_500x526',
            'path' => $appartment->field_location_floor[LANGUAGE_NONE][0]['uri'],
            'title' => 'План квартиры',
            'attributes' => array(
                'class' => array('apartment-image-vertical'),
            ),
        ));
    } else if (isset($appartment->field_location_home[LANGUAGE_NONE][0]['uri'])) {
        $out['img_plan'] = theme('image_style', array(
            'style_name' => 'apartment_plan_500x526',
            'path' => $appartment->field_location_home[LANGUAGE_NONE][0]['uri'],
            'title' => 'План квартиры',
            'attributes' => array(
                'class' => array('apartment-image-vertical'),
            ),
        ));
    }

    $out['apt_number'] = $appartment->field_number_apartament[LANGUAGE_NONE][0]['value'];
    $out['status'] = $appartment->field_status[LANGUAGE_NONE][0]['value'];

    $tid = $appartment->field_apartament_home[LANGUAGE_NONE][0]['tid'];
    $term = taxonomy_term_load($tid);

    $out['address'] = $home['field_address_house']['#items'][0]['value'];

    $nid_complex = $term->field_home_complex[LANGUAGE_NONE][0]['target_id'];
    $node = node_load($nid_complex);

    $out['complex'] = l($node->title, 'node/' . $node->nid,
        array(
            'attributes' => array(
                'target' => '_blank',
                'class' => array(''),
            ),
        )
    );

    $tid = $node->field_complex_developer[LANGUAGE_NONE][0]['tid'];
    $term = taxonomy_term_load($tid);

    $out['developer'] = l($term->name, 'taxonomy/term/' . $term->tid,
        array(
            'attributes' => array(
                'target' => '_blank',
                'class' => array(''),
            ),
        )
    );

    $out['rooms'] = $appartment->field_number_rooms[LANGUAGE_NONE][0]['value'];
    $out['cost'] = $appartment->field_full_cost[LANGUAGE_NONE][0]['value'];
    $out['price'] = $appartment->field_price[LANGUAGE_NONE][0]['value'];
    $out['sq'] = $appartment->field_gross_area[LANGUAGE_NONE][0]['value'];
    $out['floor'] = $appartment->field_apartment_floor[LANGUAGE_NONE][0]['value'];
    $out['section'] = $appartment->field_section[LANGUAGE_NONE][0]['value'];
    !empty($appartment->field_living_space) ? $out['sq_live'] = $appartment->field_living_space[LANGUAGE_NONE][0]['value']
        : $out['sq_live'] = '-';
    $out['deadline'] = $home['field_deadline'][0]['#markup'];
    $out['path'] = '/node/' . $appartment->nid;

    $add = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/compr.svg');

    if ($appartment->field_status[LANGUAGE_NONE][0]['value'] == 1) {
        $img_booking = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/img_booking.svg');
        $book_text = '<p>Забронировать<br>квартиру</p>';
    } else {
        $img_booking = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/img_booking_book.svg');
        $book_text = '<p>Оповестить при <br>изменении статуса</p>';

    }

    $get_pdf = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/get_pdf.svg');

    $out['get_id'] = l($get_pdf . '<p>' . t('Версия для<br> печати') . '</p>',
        '#href', array(
            'external' => TRUE,
            'html' => TRUE,
            'attributes' => array(
                'id' => 'download-id-apartment',
                'data-nid-apartment' => $nid,
                'class' => array(),
            )
        )
    );

    if ($appartment->field_status[LANGUAGE_NONE][0]['value'] == 1) {
        $out['booking'] = l($img_booking . $book_text,
            '/node/' . $nid, array(
                'query' => array('booking' => TRUE),
                'external' => TRUE,
                'html' => TRUE,
                'attributes' => array('target' => '_blank')
            )
        );
    } else {
        if (realty_check_status_apartment_user($user->uid, $appartment->nid) == TRUE) {
            $img_booking = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/ready_comprasion.svg');
            $book_text = '<p>Уведомление запрошено</p>';
            $out['booking'] = '<div class="m_ap-button-ready real-div-height">'
                . $img_booking . $book_text .
                '</div>';

            drupal_add_js('jQuery(document).ajaxComplete(function(){
        $(\'.comparisonBlock\').attr(\'class\', $(\'.comparisonBlock\').attr(\'class\') + \' m_ap-button-ready\');
      });', 'inline');
        } else {
            $out['booking'] = '<div class="apartment-signal" data-node-id=' . $appartment->nid . '>'
                . $img_booking . $book_text .
                '</div>';
        }
    }

    // Если пользователь зарегистрирован
    // Если квартира уже добавлена в сравнение
    if (realty_checking_apartments_comparison($nid) == TRUE || realty_checking_apartments_comparison_cookies($nid) == TRUE) {

        $redy = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/ready_comprasion.svg');

        $out['add_comparison'] = '<div class="m_ap-button-ready real-div-height">' . $redy . '<p>Добавлено в<br> сравнение</p></div>';
    } // Если квартира еще не добавлена в сравнение
    else {
        $out['add_comparison'] = '<div class="apartment-comparison" data-node-id = "' .
            $nid . '">' . $add . '<p>
            Добавить в<br> сравнение
          </p>
        </div>';
    }

    $json = json_encode($out);
    print $json;
}

/**
 * Page callback to /edit_user_profile.
 */
function realty_edit_user_profile()
{
    global $user;

    $account = user_load($user->uid);
    if (isset($_POST['name']) && isset($_POST['phone']) && isset($_POST['mail'])) {
        $name = $_POST['name'];
        $phone = $_POST['phone'];
        $mail = $_POST['mail'];

        $account->mail = $mail;
        $account->field_user_name[LANGUAGE_NONE][0]['value'] = $name;
        if ($phone != '00000000') {

        }
        $answer = user_save($account);

        if ($answer->mail == $mail && $answer->field_user_name[LANGUAGE_NONE][0]['value'] == $name) {
            print TRUE;
            drupal_exit();
        } else {
            print FALSE;
            drupal_exit();
        }
    }
}

/**
 * Page callback to /get_data_complex.
 */
function realty_get_data_complex()
{

    if ($_POST['nid']) {
        $node = node_load($_POST['nid']);

        $answer['title'] = $node->title;

        $answer['image'] = theme('image', array(
                'path' => $node->field_main_photo[LANGUAGE_NONE][0]['uri'],
                'attributes' => array(
                    'class' => array('title-image'),
                ),
            )
        );

        if (!empty($node->field_complex_logo)) {
            $logo = theme('image', array(
                    'path' => $node->field_complex_logo[LANGUAGE_NONE][0]['uri'],
                    'attributes' => array(
                        'class' => array('logo-c'),
                    ),
                )
            );

            $answer['logo'] = l($logo, 'node/' . $node->nid,
                array(
                    'html' => TRUE,
                    'attributes' => array(
                        'class' => array(
                            'col-xs-12 half-item zero-padding',
                        )
                    )
                )
            );

        }

        if (!empty($node->field_description)) {
            $answer['description'] = $node->field_slogan[LANGUAGE_NONE][0]['safe_value'];
        }

        $answer['details'] = l(t('Перейти'), 'node/' . $node->nid, array(
                'attributes' => array('class' => array('button-info', 'button-info-top'),
                )
            )
        );

        print json_encode($answer);
    }

    drupal_exit();
}

/**
 * List all cities.
 */
function realty_get_list_city()
{
    $vid = taxonomy_vocabulary_machine_name_load('cities');
    return $terms = taxonomy_get_tree($vid->vid, 0, NULL, TRUE);
}

/**
 * Page callback to /search_map.
 */
function realty_search_map()
{

    $areas = isset($_POST['area']) ? $_POST['area'] : NULL;
    $developers = isset($_POST['developer']) ? $_POST['developer'] : NULL;
    $complexes = isset($_POST['complex']) ? $_POST['complex'] : NULL;
    $categories = isset($_POST['category']) ? $_POST['category'] : NULL;
    $stock = isset($_POST['stock']) ? $_POST['stock'] : NULL;

    $view = views_get_view('map');
    $view->set_display('map_city');

    $view->set_arguments(array($_POST['city']));

    if ($stock) {
        $view->display_handler->options['filters']['field_stock_value']['value'][$stock] = $stock;
    } elseif ($stock == 'All') {
        $view->display_handler->options['filters']['field_stock_value']['value'] = array();
    }

    if ($categories) {
        foreach ($categories as $category) {
            $view->display_handler->options['filters']['field_home_category_tid']['value'][] = $category;
        }
    }
    if ($areas) {
        foreach ($areas as $area) {
            $view->display_handler->options['filters']['field_area_tid']['value'][] = $area;
        }
    }
    if ($developers) {
        foreach ($developers as $developer) {
            $view->display_handler->options['filters']['field_complex_developer_tid']['value'][] = $developer;
        }
    }
    if ($complexes) {
        foreach ($complexes as $complex) {
            $view->display_handler->options['filters']['field_home_complex_target_id']['value'][] = $complex;
        }
    }
    $view->pre_execute(array());
    $view->display_handler->preview();
    $view->post_execute();
    if (!empty($view->result)) {
        foreach ($view->result as $key => $tid) {
            $homes[$key]['tid'] = $tid->tid;
            $homes[$key]['address'] = $tid->_field_data['tid']['entity']->field_address_house[LANGUAGE_NONE][0]['value'];
            $coords = json_decode($tid->field_field_map[0]['raw']['placemarks']);
            if (!empty($coords[0]->coords) && !isset($coords[1])) {
                $homes[$key]['coords'] = $coords[0]->coords;
                $homes[$key]['params'] = $coords[0]->params;
            } else {
                $homes[$key]['coords'] = $coords[1]->coords;
                $homes[$key]['params'] = $coords[1]->params;
            }
        }
        print json_encode($homes);
    } else
        print FALSE;
}

/**
 * Page callback to /apartment_signal.
 */
function realty_apartment_signal()
{
    global $user;

    if ($user->uid != 0) {
        if ($_POST['nid']) {
            if (realty_check_status_apartment_user($user->uid, $_POST['nid']) == TRUE) {
                print TRUE;
                drupal_exit();
            } else {
                $node = node_load($_POST['nid']);
                $node->field_user_signal[LANGUAGE_NONE][]['target_id'] = $user->uid;
                field_attach_update('node', $node);
                node_save($node);

                if ($_POST['apartment'] == 0) {
                    if ($_POST['page'] == 1) {
                        $img_booking = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/apartment_comparsion_active.svg');
                        $dindon_r = $img_booking . '<p class="s-label-small color-dark_gray">Уведомление запрошено</p>';
                    } else {
                        $dindo = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/ready_comprasion.svg');

                        $dindon_r = '<div class="m_ap-button-ready real-div-height">' . $dindo . ' . <p>Уведомление запрошено</p></div>';
                    }
                } else {
                    $dindo = theme('image', array(
                        'path' => REALTY_FRONT_THEME_PATH . '/images/dingdong_big.svg',
                        'attributes' => array(
                            'class' => array('bad-button-fix'),
                        ),
                    ));

                    $dindon_r = l($dindo . '<span class="new-tip-button">
          ' . t('Send notification if your removed') . '
            </span>', '#href', array(
                            'html' => TRUE,
                            'external' => TRUE,
                            'attributes' => array(
                                'rel' => 'tooltip',
                                'data-placement' => 'right',
                            ),
                        )
                    );
                }
                print $dindon_r;
                drupal_exit();
            }
        }
    } else {
        print 'user';
        drupal_exit();
    }
}

/**
 * Sending messages to users about the withdrawal of the reservation.
 */
function realty_sending_messages_to_users($node)
{
    $module = 'realty';
    $key = 'key';
    $language = 'ru';
    $params = array();
    $from = variable_get('site_mail');
    $send = FALSE;
    if (!empty($node->field_user_signal)) {
        foreach ($node->field_user_signal[LANGUAGE_NONE] as $uid) {
            $user = user_load($uid['target_id']);
            $message = drupal_mail($module, $key, $user->mail, $language, $params, $from, $send);
            $message['subject'] = 'Уведомление о снятии бронирования!';
            $message['body'] = array();
            $message['body'][] = theme('sending_messages', array('node' => $node));
            $system = drupal_mail_system($module, $key);
            $message = $system->format($message);
            $message['result'] = $system->mail($message);
        }
        return TRUE;
    }
}


/**
 * Implement hook_node_presave.
 */
function realty_node_presave($node)
{

    // save stock
    if ($node->type == 'stock') {
        if (!empty($node->field_complex_stock)) {
            foreach ($node->field_complex_stock[LANGUAGE_NONE] as $val) {
                $complex = node_load($val['target_id']);
                $complex->field_stock[LANGUAGE_NONE][0]['value'] = 1;
                node_save($complex);
            }
        }
    }

    // save apartment
    if ($node->type == 'apartament') {
        if ($node->field_status[LANGUAGE_NONE][0]['value'] == 0) {
            $node->field_hiden_status[LANGUAGE_NONE][0]['value'] = 0;
        }

        // Если изменился статус Квартиры
        if ($node->field_hiden_status[LANGUAGE_NONE][0]['value'] == 0 && $node->field_status[LANGUAGE_NONE][0]['value'] == 1) {
            $node->field_hiden_status[LANGUAGE_NONE][0]['value'] = 1;

            // Отправка уведомления клиентам об изменении статуса Квартиры
            if (!empty($node->field_user_signal)) {
                foreach ($node->field_user_signal[LANGUAGE_NONE] as $userId) {
                    $user = user_load($userId['target_id']);

                    realty_send_message('unreservation_notice', $user->mail, array(
                            'node' => $node,
                            'account' => $user)
                    );
                }
            }
        }

        // Вычисление цены за квадратный метр
        if ($node->field_gross_area[LANGUAGE_NONE][0]['value']) {
            $node->field_price[LANGUAGE_NONE][0]['value'] = intval($node->field_full_cost[LANGUAGE_NONE][0]['value'] /
                $node->field_gross_area[LANGUAGE_NONE][0]['value']);
        }

        // Если поле Высота потолка не заполнено
        if (empty($node->field_apartment_ceiling_height[LANGUAGE_NONE])) {

            // Заполнение поля Высота потолков значением указанным для Дома
            $term_home = taxonomy_term_load($node->field_apartament_home[LANGUAGE_NONE][0]['tid']);

            // Разбор строки со значениями высоты потолков по этажам
            $ranges = explode(';', $term_home->field_home_ceiling_height_floor[LANGUAGE_NONE][0]['value']);
            foreach ($ranges as $range) {
                $height = explode(':', $range);

                $floor = explode('-', $height[0]);

                // Если этаж квартиры удовлетворяет диапазону
                if ($node->field_apartment_floor[LANGUAGE_NONE][0]['value'] >= $floor[0] &&
                    $node->field_apartment_floor[LANGUAGE_NONE][0]['value'] <= $floor[1]
                ) {

                    // Заполнение поля Высоты потолка
                    $safe_height = str_replace(",", ".", $height[1]);
                    $node->field_apartment_ceiling_height[LANGUAGE_NONE][0]['value'] = $safe_height;
                }
            }
        }


        $taxonomy_home = taxonomy_term_load($node->field_apartament_home[LANGUAGE_NONE][0]['tid']);

        // Заполнение поле Балкон указанным для Дома
        if (!empty($taxonomy_home->field_home_balcony) && empty($node->field_balcony[LANGUAGE_NONE])) {
            $node->field_balcony[LANGUAGE_NONE][0]['value'] = $taxonomy_home->field_home_balcony[LANGUAGE_NONE][0]['value'];
        }

        // Заполнение поле Лоджия значением указанным для Дома
        if (!empty($taxonomy_home->field_home_loggia) && empty($node->field_loggia[LANGUAGE_NONE])) {
            $node->field_loggia[LANGUAGE_NONE][0]['value'] = $taxonomy_home->field_home_loggia[LANGUAGE_NONE][0]['value'];
        }

    }


    /*** Расчет рейтинга Жилого комплекса ***/

    if ($node->type == 'complex') {
        if ($_GET['destination'] == "admin/content") {

            // Отзывы о ЖК
            $avg_review_complex = realty_get_count_assessmen_review($node->nid);

            if ($avg_review_complex['negative'] != 0 && $avg_review_complex['positive'] != 0) {
                $review_quotient = $avg_review_complex['positive'] / $avg_review_complex['negative'];
            } else if ($avg_review_complex['positive'] > 0 && $avg_review_complex['negative'] == 0) {
                $review_quotient = 1.5;
            } else if ($avg_review_complex['positive'] == 0 && $avg_review_complex['negative'] > 0) {
                $review_quotient = 0.99;
            } else {
                $review_quotient = 0;
            }

            $review_complex_rating = 0;
            if ((float)$review_quotient >= 1.5) {
                $review_complex_rating = 5;
            } else if ((float)$review_quotient >= 1.01 && (float)$review_quotient <= 1.49) {
                $review_complex_rating = 2;
            } else if ((float)$review_quotient == 1) {
                $review_complex_rating = 0;
            } else if ((float)$review_quotient <= 0.99 && (float)$review_quotient > 0) {
                $review_complex_rating = -3;
            } else if ((float)$review_quotient = 0) {
                $review_complex_rating = 0;
            }

            $node->field_complex_reviews_rating_val[LANGUAGE_NONE][0]['value'] = $review_complex_rating;

            // Отзывы о Застройщике
            $term_id_developer = $node->field_complex_developer[LANGUAGE_NONE][0]['tid'];
            $term_developer = taxonomy_term_load($term_id_developer);

            $review_developer = realty_get_assessmen_developer_review($term_id_developer);
            $avg_assessmen_developer = $term_developer->field_developer_rating_ass_value['und'][0]['value'];


            // Величина рейтинга - Народный ретинг
            $peoples_rating = $review_complex_rating + $avg_assessmen_developer;
            $node->field_complex_people_rating_valu[LANGUAGE_NONE][0]['value'] = $peoples_rating;


            // Рейтинг - Финансирование
            $rating_finance = 0;

            // Собственные средства
            if ($node->field_complex_finance_rating[LANGUAGE_NONE][0]
                ['field_complex_finance_rating_own'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $rating_finance += 10;
            }

            // Заемные средства
            if ($node->field_complex_finance_rating[LANGUAGE_NONE][0]
                ['field_complex_finance_rating_cre'][LANGUAGE_NONE][0]['value'] == '0'
            ) {
                $rating_finance += 10;
            } else if ($node->field_complex_finance_rating[LANGUAGE_NONE][0]
                ['field_complex_finance_rating_cre'][LANGUAGE_NONE][0]['value'] == '1'
            ) {
                $rating_finance += 5;
            } else if ($node->field_complex_finance_rating[LANGUAGE_NONE][0]
                ['field_complex_finance_rating_cre'][LANGUAGE_NONE][0]['value'] == '2'
            ) {
                $rating_finance += 10;
            } else if ($node->field_complex_finance_rating[LANGUAGE_NONE][0]
                ['field_complex_finance_rating_cre'][LANGUAGE_NONE][0]['value'] == '3'
            ) {
                $rating_finance += 5;
            }

            // Средства участников долевого строительства больше 50%
            if ($node->field_complex_finance_rating[LANGUAGE_NONE][0]
                ['field_complex_finance_rating_pat'][LANGUAGE_NONE][0]['value'] == '1'
            ) {
                $rating_finance -= 5;
            }

            // Средства участников долевого строительства больше 50%
            if ($node->field_complex_finance_rating_pat['und'][0]['value'] == '1') {
                $rating_finance = -5;
            }

            // Величина рейтинга - Финансирование
            $node->field_complex_finance_rating_val[LANGUAGE_NONE][0]['value'] = $rating_finance;

            // Рейтинг - Договор
            $contract_rating = 0;

            // Тип договора
            if ($node->field_complex_contr_rating[LANGUAGE_NONE][0]
                ['field_complex_contr_rating_type'][LANGUAGE_NONE][0]['value'] == '0'
            ) {
                $contract_rating += 10;
            }

            // Величина рейтинга - Договор
            $node->field_complex_contr_rating_value[LANGUAGE_NONE][0]['value'] = $contract_rating;


            // Рейтинг - Инфраструктура
            $infrastruct_rating = 0;


            //Транспортная доступность
            if ($node->field_complex_infra_rating[LANGUAGE_NONE][0]['field_complex_infra_rating_trans'][LANGUAGE_NONE][0]['value'] != '') {
                $infrastruct_rating += (int)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_trans'][LANGUAGE_NONE][0]['value'];
            }

            // Метро
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_metro'][LANGUAGE_NONE][0]['value'] < 1
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_metro'][LANGUAGE_NONE][0]['value'] >= 1 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_metro'][LANGUAGE_NONE][0]['value'] <= 2
            ) {
                $infrastruct_rating += 1;
            }

            // Школа
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_schoo'][LANGUAGE_NONE][0]['value'] < 1
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_schoo'][LANGUAGE_NONE][0]['value'] >= 1 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_schoo'][LANGUAGE_NONE][0]['value'] <= 2
            ) {
                $infrastruct_rating += 1;
            }

            // Детсад
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_child'][LANGUAGE_NONE][0]['value'] < 1
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_child'][LANGUAGE_NONE][0]['value'] >= 1 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_child'][LANGUAGE_NONE][0]['value'] <= 2
            ) {
                $infrastruct_rating += 1;
            }

            // ТРЦ
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_trc'][LANGUAGE_NONE][0]['value'] < 2
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_trc'][LANGUAGE_NONE][0]['value'] >= 2 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_trc'][LANGUAGE_NONE][0]['value'] <= 4
            ) {
                $infrastruct_rating += 1;
            }

            // Автодорога
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_road'][LANGUAGE_NONE][0]['value'] > 100
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_road'][LANGUAGE_NONE][0]['value'] >= 50 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_road'][LANGUAGE_NONE][0]['value'] <= 100
            ) {
                $infrastruct_rating += 1;
            }

            // Парк, лесная зона
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_fores'][LANGUAGE_NONE][0]['value'] < 1
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_fores'][LANGUAGE_NONE][0]['value'] >= 1 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_fores'][LANGUAGE_NONE][0]['value'] <= 2
            ) {
                $infrastruct_rating += 1;
            }

            // Железная дорога
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_railw'][LANGUAGE_NONE][0]['value'] > 100
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_railw'][LANGUAGE_NONE][0]['value'] >= 50 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_railw'][LANGUAGE_NONE][0]['value'] <= 100
            ) {
                $infrastruct_rating += 1;
            }

            // ТЭЦ
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_chp'][LANGUAGE_NONE][0]['value'] > 2
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_chp'][LANGUAGE_NONE][0]['value'] >= 1 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_chp'][LANGUAGE_NONE][0]['value'] <= 2
            ) {
                $infrastruct_rating += 1;
            }

            // Трамвай
            if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_tramv'][LANGUAGE_NONE][0]['value'] > 100
            ) {
                $infrastruct_rating += 2;
            } else if ((float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_tramv'][LANGUAGE_NONE][0]['value'] >= 50 &&
                (float)$node->field_complex_infra_rating[LANGUAGE_NONE][0]
                ['field_complex_infra_rating_tramv'][LANGUAGE_NONE][0]['value'] <= 100
            ) {
                $infrastruct_rating += 1;
            }

            // Величина рейтинга - Инфраструктура
            $node->field_complex_infra_rating_value[LANGUAGE_NONE][0]['value'] = $infrastruct_rating;

            // Рейтинг - Двор/Дом
            $yard_rating = 0;

            // Парковка
            if ($node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_parkin'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $yard_rating += 2;
            }

            // Чистовая отделка
            if ($node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_fine'][LANGUAGE_NONE][0]['value'] == '1'
            ) {
                $yard_rating += 1;
            } else if ($node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_fine'][LANGUAGE_NONE][0]['value'] == '2'
            ) {
                $yard_rating += 2;
            }

            // Огороденная территория
            if ($node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_fenced'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $yard_rating += 3;
            }

            // Благоустройство двора
            if ($node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_landsc'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $yard_rating += 3;
            }

            // Высота потолков
            if ((float)$node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_height'][LANGUAGE_NONE][0]['value'] >= 3
            ) {
                $yard_rating += 3;
            } else if ((float)$node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_height'][LANGUAGE_NONE][0]['value'] >= 2.7 &&
                (float)$node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_height'][LANGUAGE_NONE][0]['value'] <= 2.99
            ) {
                $yard_rating += 2;
            }

            // Охрана
            if ($node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_securi'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $yard_rating += 3;
            }

            // Видеонаблюдение
            if ($node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_videov'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $yard_rating += 2;
            }

            // Грузовой лифт
            if ($node->field_complex_yard_rating[LANGUAGE_NONE][0]
                ['field_complex_yard_rating_freigh'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $yard_rating += 2;
            }

            // Величина рейтинга - Двор, дом
            $node->field_complex_yard_rating_value[LANGUAGE_NONE][0]['value'] = $yard_rating;


            // Рейтинг - Информационная открытость
            $info_rating = 0;

            // Компания готова предоставлять актуальную информацию о квартирах в продаже на независимых ресурсах
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_give'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 1;
            }

            // Сайт объекта
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_site'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 2;
            }

            // Проектная декларация
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_projec'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 2;
            }

            // Разрешение на строительство
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_permit'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 2;
            }

            // Устав компании
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_articl'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 2;
            }

            // Свидетельство о ГРЮЛ
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_grul'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 1;
            }

            // Страхование
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_insura'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 2;
            }

            // Информация о наличии квартир
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_apartm'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 1;
            }

            // Информация о стоимости
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_price'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 1;
            }


            // Подробная планировка каждой квартиры
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_applan'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 1;
            }

            // Подробная планировка каждого этажа
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_flplan'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 1;
            }

            // Фотоотчет не реже 1 раза в месяц
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_photo'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 2;
            }

            // web-камера на объекте
            if ($node->field_complex_info_rating[LANGUAGE_NONE][0]
                ['field_complex_info_rating_webcam'][LANGUAGE_NONE][0]['value'] == 1
            ) {
                $info_rating += 2;
            }

            // Величина рейтинга - Информационная открытость
            $node->field_omplex_info_rating_value[LANGUAGE_NONE][0]['value'] = $info_rating;

            // Общая величина рейтинга Жилой комплекс
            $node->field_complex_rating_val[LANGUAGE_NONE][0]['value'] =
                $peoples_rating + $rating_finance + $infrastruct_rating +
                $yard_rating + $info_rating + $contract_rating;
        }
    }
}

/**
 * Implement hook form_alter.
 */
function realty_form_user_profile_form_alter(&$form, &$form_id)
{
    global $user;

    if ($user->uid != 1) {
        $form['#theme'][0] = 'realty_user_profile_form';
    }
}

/**
 * Implement hook_form.
 */
function realty_edit_user_profile_form($form, &$form_state)
{
    global $user;

    $account = user_load($user->uid);

    $form['name'] = array(
        '#type' => 'textfield',
        '#default_value' => $account->field_user_name[LANGUAGE_NONE][0]['value'],
        '#attributes' => array(
            'placeholder' => t('Ф.И.О'),
            'class' => array('input-modal'),
        ),
    );

    $form['email'] = array(
        '#type' => 'textfield',
        '#default_value' => $account->mail,
        '#attributes' => array(
            'placeholder' => t('e-mail'),
            'class' => array('input-modal'),
        ),
    );

    $form['phone'] = array(
        '#type' => 'textfield',
        '#default_value' => !empty($account->field_phone_number) ? $account->field_phone_number[LANGUAGE_NONE][0]['value']
            : NULL,
        '#attributes' => array(
            'placeholder' => t('Номер телефона'),
            'class' => array('input-modal'),
        ),
    );

    $form['password'] = array(
        '#type' => 'password',
        '#attributes' => array(
            'placeholder' => t('Новый пароль'),
            'class' => array('input-modal'),
        ),
    );

    $form['password1'] = array(
        '#type' => 'password',
        '#attributes' => array(
            'placeholder' => t('Повторите пароль'),
            'class' => array('input-modal'),
        ),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#attributes' => array(
            'class' => array('ok-button', 'use-ajax-submit'),
        ),
        '#ajax' => array(
            'callback' => 'realty_edit_user_profile_form_submit',
        ),
        '#value' => t('Сохранить'),
    );

    $form['#theme'][] = 'realty_edit_user_profile_form';
    $form['#validate'][] = 'realty_edit_user_profile_form_validate';

    return $form;
}

/**
 * Form validate callback.
 */
function realty_edit_user_profile_form_validate($form, &$form_state)
{
    global $user;
    $email = $form_state['values']['email'];

    $messages = '';

    if (empty($form_state['values']['name'])) {
        $messages .= '<p>Поле "Ф.И.О" обязательно для заполенеия.</p>';
        $commands[] = ajax_command_invoke('#edit-name', 'addClass', array('error-input-bottom'));
    }
    if (empty($email)) {
        $messages .= '<p>Поле "e-mail" обязательно для заполенеия.</p>';
        $commands[] = ajax_command_invoke('#edit-email', 'addClass', array('error-input-bottom'));
    }

    if (!valid_email_address($email)) {
        $messages .= '<p>Адрес электронной почты не корректен.</p>';
        $commands[] = ajax_command_invoke('#email', 'addClass', array('error-input-bottom'));
    } else {
        $count = db_select('users')
            ->condition('mail', $email)
            ->condition('uid', $user->uid, '!=')
            ->countQuery()
            ->execute()
            ->fetchField();
        if ($count != 0) {
            $commands[] = ajax_command_invoke('#email', 'addClass', array('error-input-bottom'));
            $messages .= '<p>Данный Email адрес уже используется. Введите другой Email.</p>';
        }
    }
    if (!empty($form_state['values']['password'])) {
        if ($form_state['values']['password'] != $form_state['values']['password1']) {
            $messages .= '<p>Пароли не совпадают.</p>';
        }
    }

    if (!empty($messages)) {
        $commands[] = ajax_command_html('#div-info-edit-profile', $messages);
        ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

        drupal_exit();
    }
}

/**
 * Form submit callback.
 */
function realty_edit_user_profile_form_submit($form, &$form_state)
{
    global $user;

    drupal_add_library('system', 'jquery.form');
    drupal_add_library('system', 'drupal.ajax');

    $account = user_load($user->uid);
    $account->field_user_name[LANGUAGE_NONE][0]['value'] = $form_state['values']['name'];

    if (!empty($form_state['values']['password'])) {
        require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
        $hash_password = user_hash_password(trim($form_state['values']['password']));
        $account->pass = $hash_password;
    }

    $account->mail = $form_state['values']['email'];
    if (!empty($form_state['values']['phone'])) {
        $account->field_phone_number[LANGUAGE_NONE][0]['value'] = $form_state['values']['phone'];
    }
    user_save($account);

    $commands[] = ajax_command_html('#div-user-profile-mail', $form_state['values']['email']);

    $commands[] = ajax_command_html('#div-user-profile-phone', $form_state['values']['phone']);

    $commands[] = ajax_command_html('#div-user-profile-name', $form_state['values']['name']);

    $commands[] = ajax_command_html('#div-container-form', '<div class="body-modal-aplication">
    <p> ' . t('Изменения сохранены.') . '  </p></div>');

    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

    drupal_exit();
}

/**
 * Page callback to /get_id_apartment.
 */
function realty_get_id_apartment()
{
    $node = node_load($_GET['nid']);

    realty_generation_pdf_apartment($node);
    drupal_exit();
}

function realty_add_assessmen_developer()
{

    // Если все необходимые параметры переданны корректно
    if (isset($_POST['tid']) && isset($_POST['assessmen']) && isset($_POST['size']) &&
        isset($_SERVER['HTTP_USER_AGENT']) && isset($_SERVER['HTTP_ACCEPT_LANGUAGE']) &&
        isset($_SERVER['REMOTE_ADDR'])
    ) {

        $developer_tid = $_POST['tid'];
        $developer_assessmen = $_POST['assessmen'];

        $user_size = $_POST['size'];
        $user_agent = $_SERVER['HTTP_USER_AGENT'];
        $user_language = $_SERVER['HTTP_ACCEPT_LANGUAGE'];
        $user_addr = $_SERVER['REMOTE_ADDR'];

        // Вычисление хеш-id клента
        $user_hash = md5($user_size . $user_agent . $user_language . $user_addr);

        // Проверка наличия ранее оставленных оценок
        $assessmens_developer = realty_get_assessmens_developer($developer_tid, $user_hash);

        // Если оценку ранее не выставлялась пользователем
        if (count($assessmens_developer) == 0) {

            // Создание сущности Оценка застройщика
            realty_create_assessmen_developer($developer_tid, $developer_assessmen, $user_hash);

            // Пересчет рейтинга Застройщика и его Жилых комплексов
            realty_recalculation_rating('developer', $developer_tid);
        } // Если оценка уже выставлялась пользователем
        else {
            print 'uzhe ostavili ocenku';
        }
    } // Если переданных параметров не достаточно
    else {
        print 'error nedostatochno paramentor';
    }
}

function realty_recalculation_rating($entity_type, $entity_id)
{
    switch ($entity_type) {
        case 'developer': {
            $taxonomy_developer = taxonomy_term_load($entity_id);

            // Расчет средней оценки Застройщика
            $developer_assessmens = realty_get_assessmen_developer($entity_id);

            $assessmen_sum = array_sum($developer_assessmens);
            $assessmen_avg = $assessmen_sum / count($developer_assessmens);

            $taxonomy_developer->field_developer_rating_ass_value['und'][0]['value'] = (float)number_format($assessmen_avg, 1);;
            taxonomy_term_save($taxonomy_developer);

            /*** Перерасчет рейтинга у Жилых комплексов данного застройщика ***/

            // Получиение списка Жилых комплексов застройщика
            $complex_list = realty_get_complex_developer($entity_id);

            foreach ($complex_list as $complex) {

                // Перерасчет рейтинга Жилого комплекса
                realty_recalculation_rating('complex', $complex);
            }
        }
        case 'complex': {

            if ($entity_type == 'complex') {
                $node_complex = node_load($entity_id);

                $developer_tid = $node_complex->field_complex_developer['und'][0]['tid'];
                $term_developer = taxonomy_term_load($developer_tid);

                $developer_rating = $term_developer->field_developer_rating_ass_value['und'][0]['value'];

                $complex_reviews_rating = $node_complex->field_complex_reviews_rating_val['und'][0]['value'];
                $complex_peoples_rating_old = $node_complex->field_complex_people_rating_valu['und'][0]['value'];
                $complex_peoples_rating_new = $complex_reviews_rating + $developer_rating;

                $complex_rating_old = $node_complex->field_complex_rating_val['und'][0]['value'];
                $complex_rating_new = $complex_rating_old - $complex_peoples_rating_old + $complex_peoples_rating_new;

                // Запись значений рейтига Жилого комплекса
                $node_complex->field_complex_people_rating_valu['und'][0]['value'] = number_format($complex_peoples_rating_new, 1);
                $node_complex->field_complex_rating_val['und'][0]['value'] = number_format($complex_rating_new, 1);

                node_save($node_complex);
            }
        }
    }
}

function realty_get_complex_developer($developer_tid)
{

    $db_query = "SELECT field_data_field_complex_developer.entity_id
                FROM field_data_field_complex_developer
                WHERE field_data_field_complex_developer.field_complex_developer_tid = :developer_tid";
    $db_args = array(
        ':developer_tid' => $developer_tid
    );

    $db_query = db_query($db_query, $db_args)->fetchCol();

    return $db_query;
}

function realty_get_count_assessmens_developer($developer_tid)
{
    $db_query = "SELECT field_data_field_developer_assessmens_value.field_developer_assessmens_value_value AS assessmen, count(field_data_field_developer_assessmens_value.field_developer_assessmens_value_value) AS count
                FROM field_data_field_developer_assessmens
                  LEFT JOIN field_data_field_developer_assessmens_value ON field_data_field_developer_assessmens_value.entity_id = field_data_field_developer_assessmens.field_developer_assessmens_value
                WHERE field_data_field_developer_assessmens.entity_id = :developer_tid
                  AND field_data_field_developer_assessmens_value.field_developer_assessmens_value_value IS NOT NULL
                GROUP BY field_data_field_developer_assessmens_value.field_developer_assessmens_value_value";

    $db_args = array(
        ':developer_tid' => $developer_tid,
    );

    $db_qeury = db_query($db_query, $db_args)->fetchAllKeyed(0, 1);

    return $db_qeury;
}

function realty_get_assessmens_developer($developer_tid, $user_hash)
{

    $db_query = "SELECT field_data_field_developer_assessmens.field_developer_assessmens_value
                FROM field_data_field_developer_assessmens
                  LEFT JOIN field_data_field_developer_assessmens_user ON field_data_field_developer_assessmens_user.entity_id = field_data_field_developer_assessmens.field_developer_assessmens_value
                WHERE field_data_field_developer_assessmens.entity_id = :tid_developer
                      AND field_data_field_developer_assessmens_user.field_developer_assessmens_user_value = :user_hash";
    $db_args = array(
        ':tid_developer' => $developer_tid,
        ':user_hash' => $user_hash
    );

    $db_query = db_query($db_query, $db_args)->fetchCol();

    return $db_query;
}

function realty_create_assessmen_developer($developer_tid, $developer_assessmen, $user_hash)
{

    $taxonomy_developer = taxonomy_term_load($developer_tid);

    // Создание сущности Оценка застройщика
    $assessmen_field_collection_item = entity_create('field_collection_item', array(
        'field_name' => 'field_developer_assessmens',
        'field_developer_assessmens_value' => array(LANGUAGE_NONE => array(array('value' => $developer_assessmen))),
        'field_developer_assessmens_user' => array(LANGUAGE_NONE => array(array('value' => $user_hash))),
    ));
    $assessmen_field_collection_item->setHostEntity('taxonomy_term', $taxonomy_developer);
    $assessmen_field_collection_item->save();
}

/**
 * Page callback to /mortgage_apartment.
 */
function realty_mortgage_apartment()
{

    global $user;

    // Если ID банка и ID квартиры успешно получены
    if (isset($_GET['bankId']) && isset($_GET['aptId']) && isset($_GET['mortgageId']) ||
        isset($_GET['bankId']) && isset($_GET['cityId']) && isset($_GET['mortgageId'])
    ) {

        // Диапазон времени 10 дней
        $time_step = time() - 864000;

        // Подсчет количества поданных заявок на ипотеку в банк за последние 10 дней
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node');
        $query->propertyCondition('type', 'mortgage');
        $query->propertyCondition('created', $time_step, '>');
        $query->fieldCondition('field_user', 'target_id', $user->uid);
        $query->fieldCondition('field_mortgage_id', 'target_id', $_GET['mortgageId']);
        $result = $query->count()->execute();

        // Если количество поданных заявок меньшей двух
        if ($result <= 2) {

            // Получение формы заявки на ипотеку
            $form = drupal_get_form('realty_mortgage_request_form', array(
                'bankId' => $_GET['bankId'],
                'aptId' => $_GET['aptId'],
                'cityId' => $_GET['cityId']));

            $render = drupal_render($form);
        } // Если количество заявок больше двух
        else {
            $render = theme('realty_modal_notify',
                array(
                    'title' => 'Заявка на ипотеку',
                    'body' => 'Лимит по заявкам на ипотеку для данной ипотечной программы исчерпан. <br> Вы можете повторно отправить заявку по истечении 10 дней.'
                ));
        }
    } // Если ID банка и квартиры не получены
    else {
        $render = 'Error. Unknown bankId or aptId.';
    }

    print $render;

    drupal_exit();
}

/**
 * Page callback to /bank_info.
 */
function realty_bank_info()
{

    // Если ID банка успешно получен
    if (isset($_GET['bankId'])) {

        $resp = theme('realty_modal_bank_info');
    } else {
        $resp = 'Error. Unknown bankId';
    }

    print $resp;

    drupal_exit();
}

/**
 * Page callback to /mortgage_info.
 */
function realty_mortgage_info()
{

    // Если ID банка и ID ипотеки успешно получены
    if (isset($_GET['bankId']) && isset($_GET['mortgageId'])) {

        $resp = theme('realty_modal_mortgage_info');
    } else {
        $resp = 'Error. Unknown bankId or mortgageId';
    }

    print $resp;

    drupal_exit();
}

/**
 * Page callback to /get_block_plan_complex.
 */
function realty_get_block_plan_complex()
{
    $a = 1;

    $a = theme('realty_plan_complex', array(
        'type' => 'node',
        'id' => $_REQUEST['nid']));
}

/**
 * Page callback to /get_info_home.
 */
function realty_get_info_home()
{

    if (isset($_REQUEST['tid'])) {
        $home_tid = $_REQUEST['tid'];

        $taxonomy_home = taxonomy_term_load($home_tid);

        $home['number'] = $taxonomy_home->field_number_home[LANGUAGE_NONE][0]['value'];
        $home['floors'] = $taxonomy_home->field_number_floor[LANGUAGE_NONE][0]['value'];
        $home['queue'] = $taxonomy_home->field_home_queue[LANGUAGE_NONE][0]['value'];
        $home['readiness'] = $taxonomy_home->field_home_readiness[LANGUAGE_NONE][0]['value'];
        $home['deadline_quarter'] = $taxonomy_home->field_deadline[LANGUAGE_NONE][0]['value'] % 10;
        $home['deadline_year'] = intval($taxonomy_home->field_deadline[LANGUAGE_NONE][0]['value'] / 10);

        // Если указана и дом и секия
        if (isset($_REQUEST['section'])) {
            $section_id = $_REQUEST['section'];

            $db_query_info_section = "SELECT field_data_field_home_section_floor.field_home_section_floor_value AS section_floor,
                                  field_data_field_home_section_queue.field_home_section_queue_value AS section_queue,
                                  field_data_field_home_section_deadline.field_home_section_deadline_value AS section_deadline,
                                  field_data_field_home_section_readiness.field_home_section_readiness_value AS section_readiness

                                FROM field_data_field_home_section_floor
                                  LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_floor.entity_id
                                  LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_floor.entity_id
                                  LEFT JOIN field_data_field_home_section_queue ON field_data_field_home_section_queue.entity_id = field_data_field_home_section_floor.entity_id
                                  LEFT JOIN field_data_field_home_section_deadline ON field_data_field_home_section_deadline.entity_id = field_data_field_home_section_floor.entity_id
                                  LEFT JOIN field_data_field_home_section_readiness ON field_data_field_home_section_readiness.entity_id = field_data_field_home_section_floor.entity_id
                                  WHERE field_data_field_home_section.entity_id = :home_tid
                                  AND field_data_field_number_section.field_number_section_value = :section_id";

            $db_query = "SELECT '1' as rooms, count(*) AS count, (SELECT field_data_field_home_section_1_room.field_home_section_1_room_value
                                                              FROM field_data_field_home_section_1_room
                                                                LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_1_room.entity_id
                                                                LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_1_room.entity_id
                                                              WHERE field_data_field_home_section.entity_id = :home_tid
                                                                    AND field_data_field_number_section.field_number_section_value = :section_id) +
                                                             (SELECT field_data_field_home_section_1c_room.field_home_section_1c_room_value
                                                              FROM field_data_field_home_section_1c_room
                                                                LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_1c_room.entity_id
                                                                LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_1c_room.entity_id
                                                              WHERE field_data_field_home_section.entity_id = :home_tid
                                                                    AND field_data_field_number_section.field_number_section_value = :section_id) AS total
                                                                          FROM node
                      LEFT JOIN field_data_field_number_rooms ON field_data_field_number_rooms.entity_id = node.nid
                      LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                      LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                      LEFT JOIN field_data_field_home_quantity_1_room ON field_data_field_home_quantity_1_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_home_quantity_1c_room ON field_data_field_home_quantity_1c_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_section ON field_data_field_section.entity_id = node.nid
                      LEFT JOIN field_data_field_home_section ON field_data_field_home_section.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section.field_home_section_value
                      LEFT JOIN field_data_field_home_section_1_room ON field_data_field_home_section_1_room.entity_id = field_data_field_home_section.field_home_section_value
                      LEFT JOIN field_data_field_home_section_1c_room ON field_data_field_home_section_1c_room.entity_id = field_data_field_home_section.field_home_section_value
                    WHERE node.status = 1
                          AND field_data_field_status.field_status_value = 1
                          AND field_data_field_number_rooms.field_number_rooms_value IN (1, '1c')
                          AND field_data_field_apartament_home.field_apartament_home_tid = :home_tid
                          AND field_data_field_section.field_section_value = :section_id
                          AND field_data_field_number_section.field_number_section_value = :section_id
                    UNION ALL
                    SELECT '2' AS rooms, count(*) AS count, (SELECT field_data_field_home_section_2_room.field_home_section_2_room_value
                                                              FROM field_data_field_home_section_2_room
                                                                LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_2_room.entity_id
                                                                LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_2_room.entity_id
                                                              WHERE field_data_field_home_section.entity_id = :home_tid
                                                                    AND field_data_field_number_section.field_number_section_value = :section_id) +
                                                             (SELECT field_data_field_home_section_2c_room.field_home_section_2c_room_value
                                                              FROM field_data_field_home_section_2c_room
                                                                LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_2c_room.entity_id
                                                                LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_2c_room.entity_id
                                                              WHERE field_data_field_home_section.entity_id = :home_tid
                                                                    AND field_data_field_number_section.field_number_section_value = :section_id) AS total
                    FROM node
                      LEFT JOIN field_data_field_number_rooms ON field_data_field_number_rooms.entity_id = node.nid
                      LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                      LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                      LEFT JOIN field_data_field_home_quantity_2_room ON field_data_field_home_quantity_2_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_home_quantity_2c_room ON field_data_field_home_quantity_2c_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_section ON field_data_field_section.entity_id = node.nid
                      LEFT JOIN field_data_field_home_section ON field_data_field_home_section.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section.field_home_section_value
                      LEFT JOIN field_data_field_home_section_2_room ON field_data_field_home_section_2_room.entity_id = field_data_field_home_section.field_home_section_value
                      LEFT JOIN field_data_field_home_section_2c_room ON field_data_field_home_section_2c_room.entity_id = field_data_field_home_section.field_home_section_value
                    WHERE node.status = 1
                          AND field_data_field_status.field_status_value = 1
                          AND field_data_field_number_rooms.field_number_rooms_value IN (2, '2c')
                          AND field_data_field_apartament_home.field_apartament_home_tid = :home_tid
                          AND field_data_field_section.field_section_value = :section_id
                          AND field_data_field_number_section.field_number_section_value = :section_id
                    UNION ALL
                    SELECT '3' AS rooms, count(*) AS count, (SELECT field_data_field_home_section_3_room.field_home_section_3_room_value
                                                              FROM field_data_field_home_section_3_room
                                                                LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_3_room.entity_id
                                                                LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_3_room.entity_id
                                                              WHERE field_data_field_home_section.entity_id = :home_tid
                                                                    AND field_data_field_number_section.field_number_section_value = :section_id) +
                                                             (SELECT field_data_field_home_section_3c_room.field_home_section_3c_room_value
                                                              FROM field_data_field_home_section_3c_room
                                                                LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_3c_room.entity_id
                                                                LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_3c_room.entity_id
                                                              WHERE field_data_field_home_section.entity_id = :home_tid
                                                                    AND field_data_field_number_section.field_number_section_value = :section_id) AS total
                    FROM node
                      LEFT JOIN field_data_field_number_rooms ON field_data_field_number_rooms.entity_id = node.nid
                      LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                      LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                      LEFT JOIN field_data_field_home_quantity_3_room ON field_data_field_home_quantity_3_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_home_quantity_3c_room ON field_data_field_home_quantity_3c_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_section ON field_data_field_section.entity_id = node.nid
                      LEFT JOIN field_data_field_home_section ON field_data_field_home_section.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section.field_home_section_value
                      LEFT JOIN field_data_field_home_section_3_room ON field_data_field_home_section_3_room.entity_id = field_data_field_home_section.field_home_section_value
                      LEFT JOIN field_data_field_home_section_3c_room ON field_data_field_home_section_3c_room.entity_id = field_data_field_home_section.field_home_section_value
                    WHERE node.status = 1
                          AND field_data_field_status.field_status_value = 1
                          AND field_data_field_number_rooms.field_number_rooms_value IN (3, '3c')
                          AND field_data_field_apartament_home.field_apartament_home_tid = :home_tid
                          AND field_data_field_section.field_section_value = :section_id
                          AND field_data_field_number_section.field_number_section_value = :section_id
                    UNION ALL
                    SELECT 'other' AS rooms, count(*) AS count, (SELECT field_data_field_home_section_other_room.field_home_section_other_room_value
                                                                  FROM field_data_field_home_section_other_room
                                                                    LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_other_room.entity_id
                                                                    LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_other_room.entity_id
                                                                  WHERE field_data_field_home_section.entity_id = :home_tid
                                                                        AND field_data_field_number_section.field_number_section_value = :section_id) +
                                                                 (SELECT field_data_field_home_section_otherc_room.field_home_section_otherc_room_value
                                                                  FROM field_data_field_home_section_otherc_room
                                                                    LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section_otherc_room.entity_id
                                                                    LEFT JOIN field_data_field_home_section ON field_data_field_home_section.field_home_section_value = field_data_field_home_section_otherc_room.entity_id
                                                                  WHERE field_data_field_home_section.entity_id = :home_tid
                                                                        AND field_data_field_number_section.field_number_section_value = :section_id) AS total
                    FROM node
                      LEFT JOIN field_data_field_number_rooms ON field_data_field_number_rooms.entity_id = node.nid
                      LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                      LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                      LEFT JOIN field_data_field_home_quantity_other_room ON field_data_field_home_quantity_other_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_home_quantity_otherc_room ON field_data_field_home_quantity_otherc_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_section ON field_data_field_section.entity_id = node.nid
                      LEFT JOIN field_data_field_home_section ON field_data_field_home_section.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_number_section ON field_data_field_number_section.entity_id = field_data_field_home_section.field_home_section_value
                      LEFT JOIN field_data_field_home_section_other_room ON field_data_field_home_section_other_room.entity_id = field_data_field_home_section.field_home_section_value
                      LEFT JOIN field_data_field_home_section_otherc_room ON field_data_field_home_section_otherc_room.entity_id = field_data_field_home_section.field_home_section_value

                    WHERE node.status = 1
                          AND field_data_field_status.field_status_value = 1
                          AND field_data_field_number_rooms.field_number_rooms_value NOT IN (1, '1c', '2', '2c', 3, '3c')
                          AND field_data_field_apartament_home.field_apartament_home_tid = :home_tid
                          AND field_data_field_section.field_section_value = :section_id
                        AND field_data_field_number_section.field_number_section_value = :section_id";

            $db_args[':section_id'] = $section_id;
            $db_args[':home_tid'] = $home_tid;

            $db_info_section = db_query($db_query_info_section, $db_args)->fetchAll();
            $home['section_floor'] = $db_info_section[0]->section_floor;
            $home['section_queue'] = $db_info_section[0]->section_queue;
            $home['section_deadline'] = $db_info_section[0]->section_deadline;
            $home['section_readiness'] = $db_info_section[0]->section_readiness;
        } else {
            // Если указан только дом
            $db_query = "SELECT '1' as rooms, count(*) AS count, (SELECT field_data_field_home_quantity_1_room.field_home_quantity_1_room_value + field_data_field_home_quantity_1c_room.field_home_quantity_1c_room_value
                                                             FROM field_data_field_home_quantity_1_room, field_data_field_home_quantity_1c_room
                                                             WHERE field_data_field_home_quantity_1_room.entity_id = :home_tid
                                                                   AND field_data_field_home_quantity_1c_room.entity_id = :home_tid) AS total
                    FROM node
                      LEFT JOIN field_data_field_number_rooms ON field_data_field_number_rooms.entity_id = node.nid
                      LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                      LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                      LEFT JOIN field_data_field_home_quantity_1_room ON field_data_field_home_quantity_1_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_home_quantity_1c_room ON field_data_field_home_quantity_1c_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                    WHERE node.status = 1
                          AND field_data_field_status.field_status_value = 1
                          AND field_data_field_number_rooms.field_number_rooms_value IN (1, '1c')
                          AND field_data_field_apartament_home.field_apartament_home_tid = :home_tid
                    UNION ALL
                    SELECT '2' AS rooms, count(*) AS count, (SELECT field_data_field_home_quantity_2_room.field_home_quantity_2_room_value + field_data_field_home_quantity_2c_room.field_home_quantity_2c_room_value
                                                             FROM field_data_field_home_quantity_2_room, field_data_field_home_quantity_2c_room
                                                             WHERE field_data_field_home_quantity_2_room.entity_id = :home_tid
                                                                   AND field_data_field_home_quantity_2c_room.entity_id = :home_tid) AS total
                    FROM node
                      LEFT JOIN field_data_field_number_rooms ON field_data_field_number_rooms.entity_id = node.nid
                      LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                      LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                      LEFT JOIN field_data_field_home_quantity_2_room ON field_data_field_home_quantity_2_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_home_quantity_2c_room ON field_data_field_home_quantity_2c_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                    WHERE node.status = 1
                          AND field_data_field_status.field_status_value = 1
                          AND field_data_field_number_rooms.field_number_rooms_value IN (2, '2c')
                          AND field_data_field_apartament_home.field_apartament_home_tid = :home_tid
                    UNION ALL
                    SELECT '3' AS rooms, count(*) AS count, (SELECT field_data_field_home_quantity_3c_room.field_home_quantity_3c_room_value + field_data_field_home_quantity_3_room.field_home_quantity_3_room_value
                                                             FROM field_data_field_home_quantity_3c_room, field_data_field_home_quantity_3_room
                                                             WHERE field_data_field_home_quantity_3c_room.entity_id = :home_tid
                                                                   AND field_data_field_home_quantity_3_room.entity_id = :home_tid) AS total
                    FROM node
                      LEFT JOIN field_data_field_number_rooms ON field_data_field_number_rooms.entity_id = node.nid
                      LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                      LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                      LEFT JOIN field_data_field_home_quantity_3_room ON field_data_field_home_quantity_3_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_home_quantity_3c_room ON field_data_field_home_quantity_3c_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                    WHERE node.status = 1
                          AND field_data_field_status.field_status_value = 1
                          AND field_data_field_number_rooms.field_number_rooms_value IN (3, '3c')
                          AND field_data_field_apartament_home.field_apartament_home_tid = :home_tid
                    UNION ALL
                    SELECT 'other' AS rooms, count(*) AS count, (SELECT field_data_field_home_quantity_other_room.field_home_quantity_other_room_value + field_data_field_home_quantity_otherc_room.field_home_quantity_otherc_room_value
                                                                 FROM field_data_field_home_quantity_other_room, field_data_field_home_quantity_otherc_room
                                                                 WHERE field_data_field_home_quantity_other_room.entity_id = :home_tid
                                                                       AND field_data_field_home_quantity_otherc_room.entity_id = :home_tid) AS total
                    FROM node
                      LEFT JOIN field_data_field_number_rooms ON field_data_field_number_rooms.entity_id = node.nid
                      LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                      LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                      LEFT JOIN field_data_field_home_quantity_other_room ON field_data_field_home_quantity_other_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                      LEFT JOIN field_data_field_home_quantity_otherc_room ON field_data_field_home_quantity_otherc_room.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                    WHERE node.status = 1
                          AND field_data_field_status.field_status_value = 1
                          AND field_data_field_number_rooms.field_number_rooms_value NOT IN (1, '1c', '2', '2c', 3, '3c')
                          AND field_data_field_apartament_home.field_apartament_home_tid = :home_tid";

            $db_args[':home_tid'] = $home_tid;
        }

        $query_apartments = db_query($db_query, $db_args)->fetchAll();
    }

    foreach ($query_apartments as $apartments) {
        $query_apartments['active_count'] += $apartments->count;
        $query_apartments['total_count'] += $apartments->total;
    }

    $home['apartments'] = $query_apartments;

    print json_encode($home);

    drupal_exit();
}

/**
 * Page callback to /get_data_comment.
 */
function realty_get_data_comment()
{

    if ($_REQUEST['cid']) {
        $comment_id = $_REQUEST['cid'];

        $entity_comment = comment_load($comment_id);
        $entity_user = user_load($entity_comment->uid);

        $comment = array(
            'author' => $entity_user->field_user_name[LANGUAGE_NONE][0]['value'],
            'text' => $entity_comment->field_body[LANGUAGE_NONE][0]['value'],
        );
    }

    print json_encode($comment);
}

/**
 * Page callback to /get_data_review.
 */
function realty_get_data_review()
{

    if ($_REQUEST['nid']) {
        $review_id = $_REQUEST['nid'];

        $node_review = node_load($review_id);
        $entity_user = user_load($node_review->uid);

        $comment = array(
            'author' => $entity_user->field_user_name[LANGUAGE_NONE][0]['value'],
            'text' => $node_review->body[LANGUAGE_NONE][0]['value'],
        );
    }

    print json_encode($comment);
}

/**
 * Page callback to /request_submit.
 */
function realty_request_submit()
{

    $user_id = arg(1);
    $timestamp = arg(2);
    $pass_hash = arg(3);

    $user_account = user_load($user_id);
    $user_rehash = user_pass_rehash($user_account->pass, $timestamp, $user_account->name, $user_account->uid);

    // Если хеш совпадает
    if ($pass_hash == $user_rehash) {

        // Авторизация ползователя
        global $user;
        $user = $user_account;

        $login_array = array('name' => $user->name);
        user_login_finalize($login_array);

        // Поиск сформированных но не отправленых заявок на квартиру
        $bookings = db_query('SELECT field_data_field_booking_user.entity_id
                            FROM field_data_field_booking_user, field_data_field_booking_submitted
                            WHERE field_data_field_booking_user.entity_id = field_data_field_booking_submitted.entity_id
                              AND field_data_field_booking_user.field_booking_user_target_id = :user_id
                              AND field_data_field_booking_submitted.field_booking_submitted_value = 0',
            array(
                ':user_id' => $user_id,
            ))->fetchAll();

        // Если есть не отправленные заявки
        if (!empty($bookings)) {

            // Отправка не отправленных заявок на квартиру
            foreach ($bookings as $booking) {

                $node = node_load($bookings[0]->entity_id);

                $manager_email = $node->field_email_manager[LANGUAGE_NONE][0]['value'];
                $user_email = $node->field_booking_email[LANGUAGE_NONE][0]['value'];

                // Прикрепление документов
                if (!empty($node->field_booking_document)) {
                    foreach ($node->field_booking_document[LANGUAGE_NONE] as $val) {
                        $files[] = file_load($val['fid']);
                    }
                }

                // Отправка уведомления застройщику
                realty_send_message('booking_request', 'findome@mail.ru', $node, $files);

                // Отправка уведомления пользователю
                realty_send_message('booking_request_user', $user_email, $node);

                // Изменение статуса квартиры
                realty_change_status_apartment($node->field_booking_apartment[LANGUAGE_NONE][0]['target_id']);

                // Изменение статуса заявки
                $node->field_booking_submitted[LANGUAGE_NONE][0]['value'] = 1;
                node_save($node);

                $booking_sended = TRUE;
            }
        }

        // Поиск сформированных но не отправленых заявок на ипотеку
        $mortgages = db_query('SELECT field_data_field_user.entity_id
                            FROM field_data_field_user, field_data_field_mortgage_submitted
                            WHERE field_data_field_user.entity_id = field_data_field_mortgage_submitted.entity_id
                              AND field_data_field_user.field_user_target_id = :user_id
                              AND field_data_field_mortgage_submitted.field_mortgage_submitted_value = 0',
            array(
                ':user_id' => $user_id,
            ))->fetchAll();

        if (!empty($mortgages)) {

            // Отправка не отправленных заявок на ипотеку
            foreach ($mortgages as $mortgage) {
                $node = node_load($mortgage->entity_id);

                $manager_email = $node->field_mortgage_magager_email[LANGUAGE_NONE][0]['value'];
                $user_email = $node->field_applicant_email[LANGUAGE_NONE][0]['value'];

                // Отправка уведомления менеджру застройщика
                realty_send_message('mortgage_request', $manager_email, $node);

                // Отправка уведомления покупателю
                realty_send_message('mortgage_request_user', $user_email, $node);

                // Изменение статуса заявки
                $node->field_mortgage_submitted[LANGUAGE_NONE][0]['value'] = 1;

                node_save($node);

                $mortgage_sended = TRUE;
            }
        }


        // Если заявки на ипотеку и на квартиру были отправлены
        if ($booking_sended && $mortgage_sended) {

            // Перенаправление в личный кабинет
            $options = array('query' => array('p' => 'booking_mortgage_request_success'));
        } else {
            // Если заявка га квартиру была отправлена
            if ($booking_sended) {
                $options = array('query' => array('p' => 'booking_request_success'));
            } // Если заявка на ипотеку была отправлена
            else if ($mortgage_sended) {
                $options = array('query' => array('p' => 'mortgage_request_success'));
            } // Если заявок нет
            else {
                $options = array('query' => array('p' => 'request_not_found'));
            }
        }

        drupal_goto('/user/' . $user->uid, $options);
    } // Если хеши не совпадают
    else {
        drupal_not_found();
    }

    drupal_exit();
}

/**
 * Page callback to /mortgage_category_info.
 */
function realty_mortgage_category_info()
{

    // Если ID категории ипотеки успешно получен
    if (isset($_GET['mortgageCategoryId'])) {

        $resp = theme('realty_modal_mortgage_category_info');
    } else {
        $resp = 'Error. Unknown mortgageCategoryId';
    }

    print $resp;

    drupal_exit();
}

/**
 * Page callback to /count_compatison.
 */
function realty_count_comparison()
{

    global $user;

    // Количество квартир добвленных в сравнение
    // Если пользователь не авторизован
    if ($user->uid == 0) {

        if ($_COOKIE['comparison']) {
            $comparison = json_decode($_COOKIE['comparison']);

            $comparison_count = count($comparison);
        } else {
            $comparison_count = 0;
        }
    } // Если пользователь авторизован
    else {
        $user_account = user_load($user->uid);

        $comparison_count = count($user_account->field_apartment_comparison[LANGUAGE_NONE]);
    }

    print $comparison_count;
}

/**
 * Page callback to /apartment_comparison.
 */
function realty_apartment_comparison()
{
    global $user;

    if ($_POST['nid']) {
        $account = user_load($user->uid);

        if ($user->uid != 0) {
            $node = node_load($_POST['nid']);
            $flag = FALSE;
            if (isset($account->field_apartment_comparison)) {
                if (!isset($account->field_apartment_comparison[LANGUAGE_NONE])) {
                    $account->field_apartment_comparison = array(
                        LANGUAGE_NONE => array(),
                    );
                }
                foreach ($account->field_apartment_comparison[LANGUAGE_NONE] as $val) {
                    if ($val['target_id'] == $node->nid) {
                        $flag = TRUE;
                        break;
                    }
                }

                if ($flag == FALSE) {
                    array_push($account->field_apartment_comparison[LANGUAGE_NONE], array('target_id' => $node->nid));
                    user_save($account);
                }
            }
        }

        $_POST['apartment'] == 0 ? $path = REALTY_FRONT_THEME_PATH . '/images/ready.svg' :
            $path = REALTY_FRONT_THEME_PATH . '/images/ready_comprasion.svg';

        if ($_POST['apartment'] == 1) {
            if ($_POST['page']) {
                $img_comparsion = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/apartment_comparsion_active.svg');
                $add_r['html'] = $img_comparsion . '<p class="s-label-small color-dark_gray">Уже в сравнении</p>';
            } else {
                $add = theme('image', array(
                    'path' => REALTY_FRONT_THEME_PATH . '/images/ready_comprasion.svg',
                    'attributes' => array(
                        'class' => array('but1', 'bfix', 'butfix'),
                    ),
                ));

                $add_r['html'] = $add . '<div class="ap-text" id="comparison">Уже в срвнении</div>';
            }
        } else {
            if ($_POST['page']) {
                $img_comparsion = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/apartment_comparsion_active.svg');
                $add_r['html'] = $img_comparsion . '<p class="s-label-small color-dark_gray">Добавлена в сравнение</p>';


                $node_apartment = node_load($_POST['nid']);
                $taxonomy_home = taxonomy_term_load($node_apartment->field_apartament_home['und'][0]['tid']);
                $node_complex = node_load($taxonomy_home->field_home_complex['und'][0]['target_id']);

                $add_r['apt_info'] = 'Квартира №' . $node_apartment->field_number_apartament['und'][0]['value'] . ', ' . $node_complex->title . ', Дом №' . $taxonomy_home->field_number_home['und'][0]['value'];
            } else {
                $add = file_get_contents(REALTY_FRONT_THEME_PATH . '/images/ready_comprasion.svg');

                $add_r['html'] = '<div class="m_ap-button-ready real-div-height">' . $add . ' . <p>Добавлена в<br> сравнение</p></div>';

                $node_apartment = node_load($_POST['nid']);
                $taxonomy_home = taxonomy_term_load($node_apartment->field_apartament_home['und'][0]['tid']);
                $node_complex = node_load($taxonomy_home->field_home_complex['und'][0]['target_id']);

                $add_r['apt_info'] = 'Квартира №' . $node_apartment->field_number_apartament['und'][0]['value'] . ', ' . $node_complex->title . ', Дом №' . $taxonomy_home->field_number_home['und'][0]['value'];
            }
        }

        print json_encode($add_r);

        drupal_exit();
    } else {
        print FALSE;
        drupal_exit();
    }
}

/*
 *Page callback to /get_developer_complex.
 */
function realty_get_developer_complex()
{
    if (isset($_POST['developer'])) {
        foreach ($_POST['developer'] as $value) {
            $developer_id[] = $value;
        }
        $complexes = realty_get_complex_current_city($developer_id, $_POST['city']);
    } else {
        $complexes = realty_get_complex_current_city(null, $_POST['city']);
    }
    $options = '';
    if (!empty($complexes)) {
        foreach ($complexes as $key => $complex) {
            if ($_POST['map']) {
                $options['modal'] .= '
        <div class="col-xs-4 modal-list-item">
            <li>
              <div class="modal_checkbox">
                <span>
                  <input type="checkbox" id="id-map-complex-' . $key . '" class="inlineCheckbox1 CheckboxMapComplex" value="' . $key . '">
                  <label for="id-map-complex-' . $key . '">' . $complex . '</label>
                </span>
              </div>
            </li>
          </div>';
                $options['select'] .= '<option value=' . $key . '>' . $complex . '</option>';
            } else {
                $options['modal'] .= '
          <div class="col-xs-4 modal-list-item">
            <li>
              <div class="modal_checkbox">
                <span>
                  <input type="checkbox" id="id-complex-' . $key . '" class="inlineCheckbox1 CheckboxComplex complex-' . $key . '" value="' . $key . ';' . $complex . '">
                  <label for="id-complex-' . $key . '">' . $complex . '</label>
                </span>
              </div>
            </li>
          </div>';
                $options['select'] .= '<option value=' . $key . '>' . $complex . '</option>';
            }
        }
    }
    print json_encode($options);
    drupal_exit();
}


/**
 * Get options the current city
 */
function realty_get_options_current_city($option)
{

    $city = menu_get_object('taxonomy_term', 2);
    if ($city == NULL) {
        $tid = arg(1);
        $city = taxonomy_term_load($tid);
    }
    $city != NULL ? $city_tid = $city->tid : $city_tid = $_GET['field_city_tid'];
    $view = views_get_view('search');
    if ($option == 'area') {
        $result = views_get_view_result('search', 'search_area', $city_tid);
    }
    if ($option == 'metro') {
        $result = views_get_view_result('search', 'search_metro', $city_tid);
    }

    foreach ($result as $value) {
        $options[$value->tid] = $value->taxonomy_term_data_name;
    }

    isset($options) ?: $options = NULL;

    return $options;
}


/**
 * Get developers the current city
 */
function realty_get_developer_current_city()
{
    $city = menu_get_object('taxonomy_term', 2);

    if ($city == NULL) {
        if (arg(1) == 'city') {
            $tid = arg(2);
            $city = taxonomy_term_load($tid);
        } else {
            $tid = arg(1);
            $city = taxonomy_term_load($tid);
        }
    }
    $city != NULL ? $city_tid = $city->tid : $city_tid = $_GET['field_city_tid'];

    $view = views_get_view_result('term_view', 'developers_search', $city_tid);
    foreach ($view as $value) {
        $developer_option[$value->tid] = str_replace('"', '', $value->_field_data['tid']['entity']->name);
    }

    isset($developer_option) ?: $developer_option = NULL;

    return $developer_option;
}

/**
 * Get complex the current city
 */
function realty_get_complex_current_city($developers = NULL, $city_tid = NULL)
{
    $city = menu_get_object("taxonomy_term", 2);

    if ($city == NULL) {
        $tid = arg(1);
        $city = taxonomy_term_load($tid);
    }

    if (isset($_GET['field_city_tid']) || $city) {
        $city != NULL ? $city_tid = $city->tid : $city_tid = $_GET['field_city_tid'];
    }

    $view = views_get_view('complex');
    if ($developers != NULL && $city == NULL) {
        $view->set_display('complex_developers');
        unset($view->display_handler->options['filters']['field_complex_developer_tid']['value']);
        foreach ($developers as $value) {
            $view->display_handler->options['filters']['field_complex_developer_tid']['value'][$value] = $value;
        }
    } else {
        $view->set_display('complexs_search');
        $view->display_handler->options['arguments']['tid']['default_argument_options']['argument'] = $city_tid;
    }

    $view->pre_execute(array());
    $view->display_handler->preview();
    $view->post_execute();
    $complex_option = array();
    foreach ($view->result as $value) {
        $complex_option[$value->nid] = str_replace('"', '', $value->node_title);
    }

    isset($complex_option) ?: $complex_option = NULL;

    return $complex_option;
}

/**
 * Generate pdf file id apartments.
 */
function realty_generation_pdf_apartment($node)
{
    $html = theme('id_apartment_pdf', array('node' => $node));
    $error = FALSE;

    if (($library = libraries_load('phpwkhtmltopdf')) && !empty($library['loaded'])) {
        $pdf = new WkHtmlToPdf;
        $pdf->setOptions(array(
            'page-width' => 400
        ));
        $file_path = $_SERVER['DOCUMENT_ROOT'] . '/sites/default/files/pdf/' . time() . '.html';
        if (file_put_contents($file_path, $html)) {
            $pdf->addPage($file_path);
            $pdf_path = $_SERVER['DOCUMENT_ROOT'] . "/sites/default/files/pdf/apartment-$node->nid.pdf";
            $pdf_file = "/sites/default/files/pdf/apartment-$node->nid.pdf";
            if (!$pdf->saveAs($pdf_path)) {
                $error = TRUE;
                watchdog(
                    'mymodule',
                    'message: @message',
                    array('@message' => $pdf->getError())
                );
            }
            unlink($file_path);
        } else {
            $error = TRUE;
        }
    } else {
        $error = TRUE;
    }

    if ($error) {
        print $html;
    }
    print $pdf_file;

    drupal_exit();
}

/**
 * Form builder for search map form.
 */
function realty_realty_comment_form($form, $form_state)
{

    $form['body'] = array(
        '#title' => 'body',
        '#type' => 'textfield',
        '#rows' => 6,
        'attributes' => array(
            'class' => array('form-control', 'comment-textarea'),
        ),
    );

    $form['#theme'][] = 'realty_comment_form';

    return $form;
}


/**
 * Form builder for search map form.
 */
function realty_search_map_form($form, $form_state)
{

    $category_option = realty_options_search('category');

    $form['category'] = array(
        '#type' => 'select',
        '#title' => 'Category',
        '#name' => 'category[]',
        '#options' => $category_option,
        '#attributes' => array(
            'id' => 'map-filter',
            'multiple' => 'multiple',
            'class' => array('maps'),
        ),
    );

    return $form;
}

/**
 * builder for years range.
 */
function realty_get_years_range($years_count = 6)
{

    $year = date('y');

    for ($i = 0; $i < $years_count; $i++) {
        $years_range[] = (string)$year++;
    }
    return $years_range;
}

/**
 * Options to search for apartments.
 */

function realty_options_search($option)
{

    switch ($option) {
        case 'room' :
            return array(
                '1' => '1 комнатa',
                '1c' => '1 комнатная студия',
                '2' => '2 комнаты',
                '2c' => '2 комнатная студия',
                '3' => '3 комнаты',
                '3c' => '3 комнатная студия',
                '4' => '4 комнаты',
                '4c' => '4 комнатная студия',
                '5' => '5 комнат',
                '5c' => '5 комнатная студия',
            );

        case 'quarter' :
            return array(
                '1' => '1 квартал',
                '2' => '2 квартал',
                '3' => '3 квартал',
                '4' => '4 квартал',
            );

        case 'masonry' :
            return array(
                '1' => 'Кирпич',
                '2' => 'Монолит',
            );

        case 'category' :
            return array(
                '1' => 'Эконом',
                '2' => 'Комфорт',
                '3' => 'Бизнес',
            );
        case 'balcony' :
            return array(
                '1' => 'Балкон',
                '2' => 'Лоджия',
                '3' => 'Балкон+Лоджия',
            );
        case 'deadline' :
            return array(
                '151' => '1 квартал 2015',
                '152' => '2 квартал 2015',
                '153' => '3 квартал 2015',
                '154' => '4 квартал 2015',
                '161' => '1 квартал 2016',
                '162' => '2 квартал 2016',
                '163' => '3 квартал 2016',
                '164' => '4 квартал 2016',
                '171' => '1 квартал 2017',
                '172' => '2 квартал 2017',
                '173' => '3 квартал 2017',
                '174' => '4 квартал 2017',
                '181' => '1 квартал 2018',
                '182' => '2 квартал 2018',
                '183' => '3 квартал 2018',
                '184' => '4 квартал 2018',
                '191' => '1 квартал 2019',
                '192' => '2 квартал 2019',
                '193' => '3 квартал 2019',
                '194' => '4 квартал 2019',
                '201' => '1 квартал 2020',
                '202' => '2 квартал 2020',
                '203' => '3 квартал 2020',
                '204' => '4 квартал 2020',
            );
    }
}

/**
 * Form builder for search form.
 */
function realty_filter_form($form, $form_state)
{

    $area_option = realty_get_options_current_city('area');
    $metro_option = realty_get_options_current_city('metro');
    $developer_option = realty_get_developer_current_city();
    $complex_option = realty_get_complex_current_city();
    $room_option = realty_options_search('room');
    $quarter_option = realty_options_search('quarter');

    $material_terms = taxonomy_get_tree(12);

    foreach ($material_terms as $key => $material_term) {
        $material_term_full[] = taxonomy_term_load($material_term->tid);
        $material_option[$material_term_full[$key]->tid] = $material_term_full[$key]->name;
    }

    $balcony_option = realty_options_search('balcony');

    $categories = taxonomy_get_tree(9);
    foreach ($categories as $categorie) {
        $category_option[$categorie->tid] = $categorie->name;
    }

    $city = menu_get_object('taxonomy_term', 2);

    $form['#action'] = '/search/' . $city->tid;

    $form['area'] = array(
        '#type' => 'select',
        '#title' => 'area',
        '#name' => 'area[]',
        '#options' => $area_option,
        '#attributes' => array(
            'id' => 'select_area',
            'multiple' => 'multiple',
        ),
    );

    $form['metro'] = array(
        '#type' => 'select',
        '#title' => 'metro',
        '#name' => 'metro[]',
        '#options' => $metro_option,
        '#attributes' => array(
            'id' => 'select_metro',
            'multiple' => 'multiple',
        ),
    );

    $form['material'] = array(
        '#type' => 'select',
        '#title' => 'material',
        '#name' => 'material[]',
        '#options' => $material_option,
        '#attributes' => array(
            'id' => 'select_material',
            'multiple' => 'multiple',
        ),
    );


    $form['balcony'] = array(
        '#type' => 'select',
        '#title' => 'balcony',
        '#name' => 'balcony[]',
        '#options' => $balcony_option,
        '#attributes' => array(
            'id' => 'select_balkon',
            'multiple' => 'multiple',
        ),
    );

    $form['category'] = array(
        '#type' => 'select',
        '#title' => 'category',
        '#name' => 'category[]',
        '#options' => $category_option,
        '#default_value' => isset($_GET['category']) ? $_GET['category'] : 0,
        '#attributes' => array(
            'id' => 'select_category',
            'multiple' => 'multiple',
        ),
    );

    $form['type'] = array(
        '#type' => 'select',
        '#title' => 'type',
        '#name' => 'type[]',
        '#options' => realty_options_search('room'),
        '#attributes' => array(
            'id' => 'select_type',
            'multiple' => 'multiple',
        ),
    );

    $form['developer'] = array(
        '#type' => 'select',
        '#title' => 'developer',
        '#name' => 'developer[]',
        '#options' => $developer_option,
        '#attributes' => array(
            'id' => 'select_developer',
            'multiple' => 'multiple',
        ),
    );

    $form['complex'] = array(
        '#type' => 'select',
        '#title' => 'complex',
        '#name' => 'complex[]',
        '#options' => $complex_option,
        '#attributes' => array(
            'id' => 'select_complex',
            'multiple' => 'multiple',
        ),
    );

    $form['deadline'] = array(
        '#type' => 'select',
        '#title' => 'deadline',
        '#name' => 'deadline[]',
        '#options' => realty_options_search('deadline'),
        '#attributes' => array(
            'id' => 'select_deadline',
            'multiple' => 'multiple',
        ),
    );

    $form['floor_min'] = array(
        '#type' => 'textfield',
        '#title' => 'min room',
        '#attributes' => array(
            'id' => 'textfield_floor_min',
        ),
    );

    $form['floor_max'] = array(
        '#type' => 'textfield',
        '#title' => 'max room',
        '#attributes' => array(
            'id' => 'textfield_floor_max',
        ),
    );

    $form['sq_min'] = array(
        '#type' => 'textfield',
        '#title' => 'min sq',
        '#attributes' => array(
            'id' => 'textfield_sq_min',
        ),
    );

    $form['sq_max'] = array(
        '#type' => 'textfield',
        '#title' => 'max sq',
        '#attributes' => array(
            'id' => 'textfield_sq_max',
        ),
    );

    $form['price_min'] = array(
        '#type' => 'textfield',
        '#title' => 'Price from',
        '#attributes' => array(
            'id' => 'textfield_price_min',
        ),
    );

    $form['price_max'] = array(
        '#type' => 'textfield',
        '#title' => 'Price to',
        '#attributes' => array(
            'id' => 'textfield_price_max',
        ),
    );

    $form['cost_min'] = array(
        '#type' => 'textfield',
        '#title' => 'Cost min',
        '#attributes' => array(
            'id' => 'textfield_cost_min',
        ),
    );

    $form['cost_max'] = array(
        '#type' => 'textfield',
        '#title' => 'Cost max',
        '#attributes' => array(
            'id' => 'textfield_cost_max',
        ),
    );

    $form['realty-filter-submit'] = array(
        '#type' => 'submit',
        '#value' => t('Применить'),
    );

    return $form;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function realty_ctools_plugin_directory($owner, $plugin_type)
{
    if ($owner == 'panels') {
        return "plugins/$plugin_type";
    }

    if ($owner == 'ctools' && $plugin_type == 'content_types') {
        return "plugins/content_types";
    }
}

/**
 * Checking apartments in comparison.
 */
function realty_checking_apartments_comparison($nid)
{
    global $user;
    $account = user_load($user->uid);

    $flag = FALSE;
    if (!empty($account->field_apartment_comparison)) {
        foreach ($account->field_apartment_comparison[LANGUAGE_NONE] as $apartment) {
            if ($apartment['target_id'] == $nid) {
                $flag = TRUE;
                break;
            }
        }
    }

    return $flag;
}

/**
 * Checking apartments in comparison cookies.
 */
function realty_checking_apartments_comparison_cookies($nid)
{
    $flag = FALSE;

    if ($_COOKIE['comparison']) {
        $comparison = json_decode($_COOKIE['comparison']);
        if (in_array($nid, $comparison)) {
            $flag = TRUE;
        }
    }

    return $flag;
}

/**
 * Check subscription status tracking
 */
function realty_check_status_apartment_user($uid, $nid)
{
    if ($uid != 0) {
        $node = node_load($nid);
        $flag = FALSE;
        if (!empty($node->field_user_signal[LANGUAGE_NONE])) {
            foreach ($node->field_user_signal[LANGUAGE_NONE] as $value) {
                if ($value['target_id'] == $uid) {
                    $flag = TRUE;
                    break;
                }
            }
        } else {
            $flag = FALSE;
        }
    } else {
        $flag = FALSE;
    }
    return $flag;
}

/**
 * Get the current city.
 */
function realty_get_current_city()
{

    if (!isset($_GET['q'])) {
        return NULL;
    }

    $entity = explode('/', $_GET['q']);

    if ($entity[0] == 'taxonomy' || $entity[0] == 'developer') {
        if ($entity[0] == 'taxonomy') {
            $tid = $entity[2];
        } elseif ($entity[0] == 'developer') {
            $tid = $entity[1];
        }
        $term = taxonomy_term_load($tid);
        if ($term->vocabulary_machine_name == 'cities') {
            return $term;
        }
        if ($term->vocabulary_machine_name == 'developers') {
            $city_id = $term->field_city[LANGUAGE_NONE][0]['tid'];
            $city = taxonomy_term_load($city_id);
            return $city;
        }
    }

    if ($entity[0] == 'node' || $entity[0] == 'complexes' || $entity[0] == 'apartment') {
        $nid = $entity[1];
        $node = node_load($nid);
        if ($node && $node->type == 'complex') {
            $dev_id = $node->field_complex_developer[LANGUAGE_NONE][0]['tid'];
            $term = taxonomy_term_load($dev_id);
            $city_id = $term->field_city[LANGUAGE_NONE][0]['tid'];
            $city = taxonomy_term_load($city_id);
            return $city;
        }
        if ($node && $node->type == 'apartament') {
            $home_id = $node->field_apartament_home[LANGUAGE_NONE][0]['tid'];
            $home = taxonomy_term_load($home_id);
            $complex_id = $home->field_home_complex[LANGUAGE_NONE][0]['target_id'];
            $complex = node_load($complex_id);
            $dev_id = $complex->field_complex_developer[LANGUAGE_NONE][0]['tid'];
            $term = taxonomy_term_load($dev_id);
            $city_id = $term->field_city[LANGUAGE_NONE][0]['tid'];
            $city = taxonomy_term_load($city_id);
            return $city;
        }
    }
    if ($entity[0] == 'search' || $entity[0] == 'apartment') {
        $city = taxonomy_term_load($entity[1]);
        return $city;
    }

    if (($entity[0] == 'developers' || $entity[0] == 'complexes' || $entity[0] == 'stock' || $entity[0] == 'news' ||
            $entity[0] == 'mortgage')
        && $entity[1] == 'city'
    ) {
        $city = taxonomy_term_load($entity[2]);
        return $city;
    }
}

/**
 * Form builder for filter form complex apartments.
 */
function realty_filter_complex_apartment_form($form, $form_state)
{
    $arg_0 = arg('0');
    $arg_1 = arg('1');
    if ($arg_1 == 'term' || $arg_0 == 'developer') {
        $arg_1 == 'term' ? $tid = arg('2') : $tid = $arg_1;
        $homes = views_get_view_result('term_view', 'homes_developer', $tid);
    } else {
        $node_id = arg('1');
        $node = node_load($node_id);
        if ($node->type == 'apartament') {
            $home = taxonomy_term_load($node->field_apartament_home[LANGUAGE_NONE][0]['tid']);
            $nid = $home->field_home_complex[LANGUAGE_NONE][0]['target_id'];
        } else {
            $nid = $node->nid;
        }
        $homes = views_get_view_result('term_view', 'homes_complex', $nid);
    }
    foreach ($homes as $key => $home) {
        $options[$home->tid] = $home->field_field_address_house[0]['rendered']['#markup'];
        $sections[$home->field_field_address_house[0]['rendered']['#markup']]
        [$home->field_field_number_section[0]['raw']['value'] . ':' . $home->tid] =
            $home->field_field_number_section[0]['raw']['value'];
    }
    $form['address'] = array(
        '#type' => 'select',
        '#options' => $options,
        '#multiple' => TRUE,
        '#size' => 5,
        '#attributes' => array(
            'class' => array('cf'),
            'id' => 'filter-form-address',
        ),
    );

    $form['sections'] = array(
        '#type' => 'select',
        '#options' => $sections,
        '#multiple' => TRUE,
        '#size' => 5,
        '#attributes' => array(
            'class' => array('cf'),
            'id' => 'filter-form-section',
        ),
    );

    return $form;

}

/**
 * Get home function
 */
function realty_get_homes()
{

    $arg_0 = arg('0');
    $arg_1 = arg('1');

    // Если запрошена страница Застройщика
    if ($arg_1 == 'term' || $arg_0 == 'developer') {
        $arg_1 == 'term' ? $tid = arg('2') : $tid = $arg_1;
        $homes = views_get_view_result('term_view', 'homes_developer', $tid);
    } // Если запрошена страница какого-либо материала
    else {
        $node_id = arg('1');
        $node = node_load($node_id);

        // Если тип материала Квартира
        if ($node->type == 'apartament') {
            $home = taxonomy_term_load($node->field_apartament_home[LANGUAGE_NONE][0]['tid']);
            $nid = $home->field_home_complex[LANGUAGE_NONE][0]['target_id'];
        } // Если тип материала Жилой комплекс
        else {
            $nid = $node->nid;
        }

        // Извлечение списка домов
        $homes = views_get_view_result('term_view', 'homes_complex', $nid);
    }

    // Обработка списка домов
    foreach ($homes as $key => $home) {
        $options[$home->tid] = $home->field_field_address_house[0]['rendered']['#markup'];

        // Если в доме отмечены секции
        if (isset($home->field_field_number_section[0]['raw']['value'])) {

            /* Получение безопасного css идентификатора для секции
       *
       *  В базе данных id секции может иметь вид 1.2,
       *  использовать такой идентификатор в объектах css нельзя,
       *  поэтому используется дополнительное преобразование.
       */
            $section_safe_value = str_replace("_", ".",
                $home->field_field_number_section[0]['raw']['value']);

            $sections[$home->field_field_address_house[0]['rendered']['#markup']]
            [$section_safe_value . '-' . $home->tid] = $section_safe_value;
        }
    }

    unset ($homes);
    $homes = array();

    foreach ($sections as $home => $home_array) {

        // Отделение идентификатора секции от ее обозначения
        $sections_array = array_keys($home_array);
        $homes['sections_string'][$home][0] = '';

        /* Формирование списка секция для дома
     *
     *  Формат списка [адрес дома][0]="номер секции 1;номер сеции 2;"
     *  необходим в модальном окне фильтра секции (data-sections).
     *  Используеся для группового выделения всех секций в доме.
     */
        foreach ($sections_array as $section) {
            $homes['sections_string'][$home][0] = strlen($homes['sections_string'][$home][0]) == 0 ?
                $section : $homes['sections_string'][$home][0] . ';' . $section;
        }
    }

    $homes['homes'] = $options;
    $homes['sections'] = $sections;

    return $homes;
}

/**
 * Implement hook_form_alter.
 */
function realty_form_views_exposed_form_alter(&$form, &$form_state)
{

    $city = menu_get_object('taxonomy_term', 2);
    if ($city == NULL) {
        $city = taxonomy_term_load(arg(1));
    }
    if ($form['#id'] == 'views-exposed-form-apartments-apartment-complex' ||
        $form['#id'] == 'views-exposed-form-apartments-apartment-developer'
    ) {
        if (arg(0) != 'admin') {
            //$form['#theme'] = 'realty_views_exposed_form';
        }
    }

    if (arg(0) != 'search') {
        if ($form['#id'] == 'views-exposed-form-apartments-result-search') {
            $form['#action'] = '/search/' . $city->tid;
            $form['#theme'] = 'realty_main_search_form';
            $form['#id'] == 'realty-views-exposed-form-apartments-result-search';
        }
    } elseif (arg(0) == 'search') {
        if (isset($_POST['floor_min'])) {
            $form_state['input']['field_apartment_floor_value']['min'] = $_POST['floor_min'];
            $form_state['input']['field_apartment_floor_value']['max'] = $_POST['floor_max'];
        } else if (!isset($_POST['field_apartment_floor_value'])) {
            $form_state['input']['field_apartment_floor_value']['min'] = 1;
            $form_state['input']['field_apartment_floor_value']['max'] = 30;
        }

        if (isset($_POST['sq_min'])) {
            $form_state['input']['field_gross_area_value']['min'] = $_POST['sq_min'];
            $form_state['input']['field_gross_area_value']['max'] = $_POST['sq_max'];
        } else if (!isset($_POST['field_gross_area_value'])) {
            $form_state['input']['field_gross_area_value']['min'] = 0;
            $form_state['input']['field_gross_area_value']['max'] = 200;
        }

        if (isset($_POST['price_max'])) {
            $form_state['input']['field_price_value']['min'] = (int)$_POST['price_min'];
            $form_state['input']['field_price_value']['max'] = (int)$_POST['price_max'];
        } else if (!isset($_POST['field_price_value'])) {
            $form_state['input']['field_price_value']['min'] = 0;
            $form_state['input']['field_price_value']['max'] = 100000;
        }

        if (isset($_POST['cost_max'])) {
            $form_state['input']['field_full_cost_value']['min'] = (int)$_POST['cost_min'];
            $form_state['input']['field_full_cost_value']['max'] = (int)$_POST['cost_max'];
        } else if (!isset($_POST['field_full_cost_value'])) {
            $form_state['input']['field_full_cost_value']['min'] = 0;
            $form_state['input']['field_full_cost_value']['max'] = 5000000;
        }
        if (!isset($_POST['field_apartment_ceiling_height_value'])) {
            $form_state['input']['field_apartment_ceiling_height_value']['min'] = 0;
            $form_state['input']['field_apartment_ceiling_height_value']['max'] = 5;
        }

        if (isset($_POST['area'])) {
            foreach ($_POST['area'] as $area) {
                $form_state['input']['field_area_tid'][] = $area;
            }
        }
        if (isset($_POST['metro'])) {
            foreach ($_POST['metro'] as $metro) {
                $form_state['input']['field_complex_metro_tid'][] = $metro;
            }
        }

        if (isset($_POST['material'])) {
            foreach ($_POST['material'] as $material) {
                $form_state['input']['field_material_tid'][] = $material;
            }
        }

        if (isset($_POST['deadline'])) {
            foreach ($_POST['deadline'] as $deadline) {
                $form_state['input']['field_deadline_value'][] = $deadline;
            }
        }

        if (isset($_POST['category'])) {
            foreach ($_POST['category'] as $category) {
                $form_state['input']['field_home_category_tid'][] = $category;
            }
        }

        if (isset($_POST['developer'])) {
            foreach ($_POST['developer'] as $developer) {
                $form_state['input']['field_complex_developer_tid'][] = $developer;
            }
        }

        if (isset($_POST['complex'])) {
            foreach ($_POST['complex'] as $complex) {
                $form_state['input']['field_home_complex_target_id'][] = $complex;
            }
        }

        if (isset($_POST['type'])) {
            if (is_array($_POST['type'])) {
                foreach ($_POST['type'] as $type) {
                    $form_state['input']['field_number_rooms_value'][] = $type;
                }
            }/* else {
        $form_state['input']['field_number_rooms_value'][] = $_POST['type'];
      }*/
        }
        if (isset($_GET['type'])) {
            $form_state['input']['field_number_rooms_value'][] = $_GET['type'];
        }

        if (isset($_POST['balcony'])) {
            foreach ($_POST['balcony'] as $balcony) {
                if ($balcony == '1') {
                    $form_state['input']['field_balcony_value'] = '1';
                }
                if ($balcony == '2') {
                    $form_state['input']['field_loggia_value'] = '1';
                }
                if ($balcony == '3') {
                    $form_state['input']['field_balcony_loggia_value'] = '1';
                }
            }
        }

        $form['field_city_tid']['#value'] = $city->tid;
        $form['#action'] = '/search/' . $city->tid;
    }
}

/**
 * Get a picture of a small logo
 */
function realty_get_image_micro_logo()
{
    return theme('image', array(
        'path' => REALTY_FRONT_THEME_PATH . '/images/micrologo.png',
        'attributes' => array(
            'class' => array('micrologo'),
        ),
    ));
}

function realty_get_image_close()
{
    return theme('image', array(
        'path' => REALTY_FRONT_THEME_PATH . '/images/close.png',
        'title' => t('Close'),
    ));
}

/**
 * Implement hook_form_alter.
 */
function realty_form_alter(&$form, &$form_state, $form_id)
{
    global $user;

    if ($form_id == 'user_login') {
        $form['#theme'][] = 'realty_user_login_form';
        // $form['#validate'][] = 'realty_login_validate';
        $form['#submit'][] = 'realty_user_login_submit';
    }

    if ($form_id == 'user_register_form') {
        if ($user->uid != 1) {
            $html_id = drupal_html_id('ajax-register-' . str_replace('_', '-', 'user_register_form') . '-wrapper');
            $form['#theme'][] = 'realty_user_register_form';
            // Add ajax functionality to form submit button.
            $form['actions']['submit']['#ajax'] = array(
                'callback' => 'realty_user_register_form_ajax_callback',
                'wrapper' => $html_id,
                'event' => 'click',
            );
        }
    }

    if ($form['form_id']['#id'] == 'edit-user-pass') {
        $form['#theme'][] = 'realty_edit_user_pass';
        $form['#submit'][] = 'realty_user_pass_submit';
        $form['name']['#default_value'] = '';
    }


    if ($form['#form_id'] == 'user_pass_reset') {
        $form['#theme'] = array('realty_user_pass_reset');
    }
}

/**
 * Submit realty_user_login_submit
 */
function realty_user_login_submit()
{
    global $user;

    $user_comparison = array();
    if (!empty($user->field_apartment_comparison)) {
        foreach ($user->field_apartment_comparison[LANGUAGE_NONE] as $val) {
            $user_comparison[] = $val['target_id'];
        }
    }

    $comparison = array();
    if (isset($_COOKIE['comparison'])) {
        $comparison = json_decode($_COOKIE['comparison']);
    }

    $result_comparison = array_unique(array_merge($user_comparison, $comparison));

    if (!empty($result_comparison)) {
        $user->field_apartment_comparison[LANGUAGE_NONE] = array();
        $comparison_cookies = array();
        foreach ($result_comparison as $val) {
            $user->field_apartment_comparison[LANGUAGE_NONE][]['target_id'] = $val;
            $comparison_cookies[] = $val;
        }
        user_save($user);
        setcookie("comparison", json_encode($comparison_cookies), (time() + 3600) * 24 * 365, '/');
    }
    $a = 1;
}

/**
 * Submit realty_edit_user_pass
 */
function realty_user_pass_submit($form, &$form_state)
{

    $commands[] = ajax_command_html('#massage-user-reset', t('Further instructions have been sent to your e-mail address.'));
    $commands[] = ajax_command_html('.error', '');
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

    drupal_exit();
}

/**
 *Form validate callback.
 */
function realty_login_validate(&$form, &$form_state, $form_id)
{

    $commands = array();
    $errors = '';

    if (empty($form_state['values']['name'])) {
        $errors .= '<li>' . ('Поле "e-mail" обязательно для заполнения') . '</li>';
        $commands[] = ajax_command_invoke('input[name="name"]', 'addClass', array('input-modal-error'));
    }

    if (empty($form_state['values']['pass'])) {
        $errors .= '<li>' . t('Поле "пароль" обязательно для заполнения') . '</li>';
        $commands[] = ajax_command_invoke('input[name="pass"]', 'addClass', array('input-modal-error'));
    }

    if (!empty($commands)) {
        $commands[] = ajax_command_replace(
            '#login-error',
            '<div class="col-xs-12 error-hint">' . $errors . '</div>');

        ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
        drupal_exit();
    }
}

/**
 * Ajax callback for USER REGISTER form.
 */
function realty_user_register_form_ajax_callback($form, $form_state)
{
    $a = 1;
}

/**
 * Get managers is developer.
 */
function realty_get_manager_developer($nid = NULL, $developer_tid = NULL)
{
    if ($nid) {
        $nid == NULL ? $nid = arg(1) : $nid = $nid;
        $node = node_load($nid);
        if ($node->type == 'complex') {
            $complex = $node;
        } elseif ($node->type == 'apartament') {
            $home = taxonomy_term_load($node->field_apartament_home[LANGUAGE_NONE][0]['tid']);
            $complex = node_load($home->field_home_complex[LANGUAGE_NONE][0]['target_id']);
        }
        $dev_tid = $complex->field_complex_developer[LANGUAGE_NONE][0]['tid'];
    } elseif ($developer_tid) {
        $dev_tid = $developer_tid;
    }

    $managers = views_get_view_result('term_view', 'managers_developer', $dev_tid);
    foreach ($managers as $manager) {
        $options_manager[$manager->field_collection_item_field_data_field_manager_item_id] = $manager->field_field_manager_name[0]['raw']['safe_value'];
    }
    return $options_manager;
}

/**
 * check the phone number
 */
function realty_check_phone_number($phone_number)
{

    $phone_number = preg_replace('/\s|\+|-|\(|\)/', '', $phone_number);

    if (is_numeric($phone_number)) {
        if (strlen($phone_number) < 5) {
            return FALSE;
        } else {
            return $phone_number;
        }
    } else {
        return FALSE;
    }
}

/**
 * check the passport data
 */
function realty_check_passport_data($id = NULL, $series = NULL)
{

    if ($id) {
        $id = preg_replace('/\s|\+|-|\(|\)/', '', $id);
        if (is_numeric($id)) {
            if (strlen($id) != 6) {
                return FALSE;
            } else {
                return $id;
            }
        } else {
            return FALSE;
        }
    }

    if ($series) {
        $series = preg_replace('/\s|\+|-|\(|\)/', '', $series);
        if (is_numeric($series)) {
            if (strlen($series) != 4) {
                return FALSE;
            } else {
                return $series;
            }
        } else {
            return FALSE;
        }
    }
}


/**
 * Form builder for filter form booking apartment.
 */
function realty_booking_apartment_form($form, $form_state, $node, $developer)
{
    global $user;

    $account = user_load($user->uid);

    $managers = realty_get_manager_developer($node->nid);

    $options_payment = array(
        0 => t('Наличными'),
        1 => t('Рассрочка(по условиям застройщика)'),
        2 => t('Ипотека')
    );

    if ($node) {
        $managers = realty_get_manager_developer($node->nid);
        $en_default_value = $node->nid;
    } elseif ($developer) {
        $managers = realty_get_manager_developer(NULL, $developer->tid);
        $en_default_value = $developer->tid;
    }

    $form['entity'] = array(
        '#type' => 'hidden',
        '#default_value' => $en_default_value
    );

    $form['name'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'name',
            'placeholder' => t('Ф.И.О'),
        ),
    );

    $form['number_phone'] = array(
        '#type' => 'textfield',
        '#default_value' => !empty($account->field_phone_number) ? $account->field_phone_number[LANGUAGE_NONE][0]['safe_value'] :
            NULL,
        '#attributes' => array(
            'placeholder' => t('Контактный телефон'),
            'class' => array('input-modal'),
            'id' => 'number_phone',
        ),
    );

    $form['email'] = array(
        '#type' => 'textfield',
        '#default_value' => $account->mail,
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'email',
            'placeholder' => t('e-mail'),
        ),
    );

    $form['passport_id'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'passport_id',
            'placeholder' => t('Номер'),
            'maxlength' => 6
        ),
    );

    $form['passport_series'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'passport_series',
            'placeholder' => t('Серия'),
            'maxlength' => 4
        ),
    );

    $form['date_issue'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'date_issue',
            'placeholder' => t('Дата выдачи'),
        ),
    );

    $form['issued_by'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'class' => array('input-modal'),
            'id' => 'issued_by',
            'placeholder' => t('Кем выдан'),
        ),
    );

    $form['documents'] = array(
        '#type' => 'plupload',
        '#plupload_settings' => array(
            'runtimes' => 'html5',
            'chunk_size' => '1mb',
        ),
    );;

    $form['managers'] = array(
        '#type' => 'radios',
        '#options' => $managers,
    );
    /*
    $form['payment'] = array(
      '#type' => 'radios',
      '#options' => $options_payment,
    );
  */
    $form['number_contract'] = array(
        '#type' => 'textfield',
        '#title' => t('Номер договора'),
        '#attributes' => array(
            'class' => array('comment-input'),
            'id' => 'number_contract',
        ),
    );

    $form['bank_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Наименование банка'),
        '#attributes' => array(
            'class' => array('comment-input'),
            'id' => 'bank_name',
        ),
    );

    $form['sum'] = array(
        '#type' => 'textfield',
        '#title' => t('Сумма'),
        '#attributes' => array(
            'class' => array('comment-input'),
            'id' => 'sum',
        ),
    );

    $form['mortgage_applications'] = array(
        '#type' => 'checkboxes',
        '#options' => array(
            '1' => t('Отправить заявку на ипотеку (перейти после подачи заявки на квартиру к выбору ипотечной программы от банков партнеров).')
        ),
    );

    $form['personal'] = array(
        '#type' => 'checkboxes',
        '#options' => array('yes' => t('Я соглашаюсь с ') . l(t('условиями обработки персональных данных.'), 'policy',
                array(
                    'query' => array('p' => 114),
                    'attributes' => array('target' => '_blank')
                )
            ),
        ),
    );

    $form['correct'] = array(
        '#type' => 'checkboxes',
        '#options' => array(
            'yes' => t('Настоящим подтверждаю, что все сведения, содержащиеся в заявке, являются достоверными')
        ),
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#attributes' => array(
            'class' => array('col-xs-4', 'col-xs-offset-4', 'comment-button', 'margin-bottom-50'),
        ),
        '#ajax' => array(
            'callback' => 'realty_booking_apartment_form_submit',
        ),
        '#value' => t('Отправить заявку'),
    );

    $form['#validate'][] = 'realty_booking_apartment_form_validate';
    $form['#theme'] = 'realty_booking_apartment_form';

    return $form;
}


/**
 * Form validate callback.
 */
function realty_booking_apartment_form_validate($form, &$form_state)
{
    $commands = array();
    $errors = '';

    $commands[] = ajax_command_html('#div-info-box', '');

    if (empty($form_state['values']['number_phone'])) {
        $errors .= '<p>' . t('Поле "Контактный телефон" обязательно для заполнения') . '</p>';
        $commands[] = ajax_command_invoke('input[name="number_phone"]', 'addClass', array('error-input-bottom'));
    } else {
        if (realty_check_phone_number($form_state['values']['number_phone']) == FALSE) {
            $errors .= '<p>' . t('Контактный телефон некорректен') . '</p>';
        }
    }

    if (empty($form_state['values']['name'])) {
        $errors .= '<p>' . t('Поле "Ф.И.О" обязательно для заполнения') . '</p>';
        $commands[] = ajax_command_invoke('input[name="name"]', 'addClass', array('error-input-bottom'));
    }

    if (empty($form_state['values']['email'])) {
        $errors .= '<p>' . t('Поле "e-mail" обязательно для заполнения') . '</p>';
        $commands[] = ajax_command_invoke('input[name="email"]', 'addClass', array('error-input-bottom'));
    }
    /*
    if(!$form_state['values']['managers']) {
      $errors .= '<p>' . t('Выберите менеджера') . '</p>';
    }
  */
    /*
  if(!isset($form_state['values']['payment'])) {
    $errors .= '<p>' . t('Выберите способ покупки') . '</p>';
  }*/
    /*
    if (empty($form_state['values']['passport_id'])) {
      $errors .= '<p>' . t('Поле "Номер паспорта" обязательно для заполнения') . '</p>';
      $commands[] = ajax_command_invoke('input[name="passport_id"]', 'addClass', array('error-input-bottom'));
    }
    else {
      if (realty_check_passport_data($form_state['values']['passport_id'], NULL) == NULL) {
        $errors .= '<p>' . t('Номер паспорта некорректен') . '</p>';
        $commands[] = ajax_command_invoke('input[name="passport_id"]', 'addClass', array('error-input-bottom'));
      }
    }

    if (empty($form_state['values']['passport_series'])) {
      $errors .= '<p>' . t('Поле "Серия паспорта" обязательно для заполнения') . '</p>';
      $commands[] = ajax_command_invoke('input[name="passport_series"]', 'addClass', array('error-input-bottom'));
    }
    else {
      if (realty_check_passport_data(NULL, $form_state['values']['passport_series']) == NULL) {
        $errors .= '<p>' . t('Серия паспорта некорректна') . '</p>';
        $commands[] = ajax_command_invoke('input[name="passport_series"]', 'addClass', array('error-input-bottom'));
      }
    }

    if (empty($form_state['values']['date_issue'])) {
      $errors .= '<p>' . t('Поле "Дата выдачи" обязательно для заполнения') . '</p>';
      $commands[] = ajax_command_invoke('input[name="date_issue"]', 'addClass', array('error-input-bottom'));
    }

    if (empty($form_state['values']['issued_by'])) {
      $errors .= '<p>' . t('Поле "Кем выдан" обязательно для заполнения') . '</p>';
      $commands[] = ajax_command_invoke('input[name="issued_by"]', 'addClass', array('error-input-bottom'));
    }

  */
    $personal = strlen($form_state['values']['personal']['yes']);
    $correct = strlen($form_state['values']['correct']['yes']);

    if ($personal != 3) {
        $errors .= '<p>' . t('Пожалуйста, согласитесь с условиями обработки персональных данных, поставив галочку в соответствующем поле') . '</p>';

    }
    if ($correct != 3) {
        $errors .= '<p>' . t('Пожалуйста, подтвердите достоверность введеных сведений, поставив галочку в соответствующем поле') . '</p>';
    }

    if (!empty($errors)) {
        $commands[] = ajax_command_html('#div-info-box', $errors);
        $commands[] = ajax_command_invoke('.modal_free', 'scrollTop', array(0));
        ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
        drupal_exit();
    }

}

function realty_user_presave(&$edit, $account, $category)
{

    // Если пользователь не новый, и у него изменился статус на активный
    if ($account->uid && $account->status === "0" && $edit['status'] == 1) {

        $user_id = $account->uid;

        // Поиск сформированных но не отправленых заявок на квартиру
        $bookings = db_query('SELECT field_data_field_booking_user.entity_id
                            FROM field_data_field_booking_user, field_data_field_booking_submitted
                            WHERE field_data_field_booking_user.entity_id = field_data_field_booking_submitted.entity_id
                              AND field_data_field_booking_user.field_booking_user_target_id = :user_id
                              AND field_data_field_booking_submitted.field_booking_submitted_value = 0',
            array(
                ':user_id' => $user_id,
            ))->fetchAll();

        // Отправка не отправленных заявок на квартиру
        foreach ($bookings as $booking) {
            $node = node_load($booking->entity_id);

            // attach documents
            if (!empty($node->field_booking_document)) {
                foreach ($node->field_booking_document[LANGUAGE_NONE] as $val) {
                    $files[] = file_load($val['fid']);
                }
            }

            $manager_email = $node->field_email_manager[LANGUAGE_NONE][0]['value'];

            // Отправка уведомления менеджру застройщика
            realty_send_message('booking_request', 'findome@mail.ru', $node, $files);

            // Отправка уведомления покупателю
            realty_send_message('booking_request_user', $account->mail, $node);

            // Изменение статуса квартиры
            realty_change_status_apartment($node->field_booking_apartment[LANGUAGE_NONE][0]['target_id']);

            // Изменение статуса заявки
            $node->field_booking_submitted[LANGUAGE_NONE][0]['value'] = 1;

            node_save($node);
        }

        // Поиск сформированных но не отправленых заявок на ипотеку
        $mortgages = db_query('SELECT field_data_field_user.entity_id
                            FROM field_data_field_user, field_data_field_mortgage_submitted
                            WHERE field_data_field_user.entity_id = field_data_field_mortgage_submitted.entity_id
                              AND field_data_field_user.field_user_target_id = :user_id
                              AND field_data_field_mortgage_submitted.field_mortgage_submitted_value = 0',
            array(
                ':user_id' => $user_id,
            ))->fetchAll();

        // Отправка не отправленных заявок на ипотеку
        foreach ($mortgages as $mortgage) {
            $node = node_load($mortgage->entity_id);

            $manager_email = $node->field_mortgage_magager_email[LANGUAGE_NONE][0]['value'];

            // Отправка уведомления менеджру застройщика
            realty_send_message('mortgage_request', $manager_email, $node);

            // Отправка уведомления покупателю
            realty_send_message('mortgage_request_user', $account->mail, $node);

            // Изменение статуса заявки
            $node->field_mortgage_submitted[LANGUAGE_NONE][0]['value'] = 1;

            node_save($node);
        }
    }
}

/**
 *  Form submit callback
 */
function realty_booking_apartment_form_submit($form, &$form_state)
{
    global $user;
    $not_login = true;

    // Пользователь не авторизован
    if (!$not_login) {
        $user_email = $form_state['values']['email'];

        $user_account = user_load_by_mail($user_email);

        // Пользователь не зарегистрирован
        if ($user_account == false) {

            // Создание аккаунта пользователя
            $user_account = array(
                'name' => $form_state['values']['email'],
                'mail' => $form_state['values']['email'],
                'pass' => user_password(8),
                'status' => 0,
                'roles' => array(
                    DRUPAL_AUTHENTICATED_RID => 'authenticated user',
                ),
            );

            $user_account['field_user_name'][LANGUAGE_NONE][0]['value'] = $form_state['values']['name'];

            $user_registered = user_save(NULL, $user_account);

            // Генерируем ссылку для подтверждения email-адреса
            $timestamp = REQUEST_TIME;
            $url = url("user/registrationpassword/$user_registered->uid/$timestamp/" . user_pass_rehash($user_registered->pass, $timestamp, $user_registered->name, $user_registered->uid), array('absolute' => TRUE));

            // Отправляем уведомление на email
            realty_send_message('email_verification', $user_registered->mail, array(
                    'url' => $url,
                    'account' => $user_account,
                    'password' => $user_account['pass'])
            );

            // Include additinal ajax commands.
            ctools_include('ajax');
            ctools_include('modal');

            // Заполняем опции параметрами из формы
            $options = array(
                'name' => $form_state['values']['name'],
                'number_phone' => $form_state['values']['number_phone'],
                'email' => $form_state['values']['email'],
                'documents' => $form_state['values']['documents'],
                'manager' => $form_state['values']['managers'],
                'entity' => $form_state['values']['entity'],
                'payment' => $form_state['values']['payment'],
                'passport_id' => $form_state['values']['passport_id'],
                'passport_series' => $form_state['values']['passport_series'],
                'date_issue' => $form_state['values']['date_issue'],
                'issued_by' => $form_state['values']['issued_by'],
                'number_contract' => $form_state['values']['number_contract'],
                'bank_name' => $form_state['values']['bank_name'],
                'sum' => $form_state['values']['sum'],
                'submitted' => 0,
                'user' => $user_registered->uid
            );

            // Create node bookings
            $node = realty_creation_node_booking($options);

            // Returns a message on successful application filed
            $message = '<div id="info-box" >';
            $message .= '<h5>' . t('На Вашу электронную почту было отправлено письмо для подтверждения адреса. Для отправки заявки на квартиру подтвердите Ваш email-адрес, перейдя по ссылке в письме. Сразу после подтверждения email-адреса, заявка будет отправлена специалистам отдела продаж застройщика.') . '</h5>';
            $message .= '</h5>';

            $close_button = '<div class="col-xs-12 modal-button">
    <button type="button" class="ok-button  modal-but" data-dismiss="modal" aria-hidden="true">Закрыть</button>
    </div>';

            $commands[] = ajax_command_html('#ajax-div-modal-booking-form', $message . $close_button);
            $commands[] = ajax_command_html('#div-info-box', '');
            ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

            drupal_exit();
        } // Пользователь зарегистрирован
        else {

            // Формирование ссылки для подтверждения заявки
            $timestamp = REQUEST_TIME;
            $url = url("request_submit/$user_account->uid/$timestamp/" . user_pass_rehash($user_account->pass, $timestamp, $user_account->name, $user_account->uid), array('absolute' => TRUE));

            // Отправка уведомления на email
            realty_send_message('request_submit', $user_account->mail, array(
                    'url' => $url,
                    'account' => $user_account)
            );

            // Include additinal ajax commands.
            ctools_include('ajax');
            ctools_include('modal');

            // Заполняем опции параметрами из формы
            $options = array(
                'name' => $form_state['values']['name'],
                'number_phone' => $form_state['values']['number_phone'],
                'email' => $form_state['values']['email'],
                'documents' => $form_state['values']['documents'],
                'manager' => $form_state['values']['managers'],
                'entity' => $form_state['values']['entity'],
                'payment' => $form_state['values']['payment'],
                'passport_id' => $form_state['values']['passport_id'],
                'passport_series' => $form_state['values']['passport_series'],
                'date_issue' => $form_state['values']['date_issue'],
                'issued_by' => $form_state['values']['issued_by'],
                'number_contract' => $form_state['values']['number_contract'],
                'bank_name' => $form_state['values']['bank_name'],
                'sum' => $form_state['values']['sum'],
                'submitted' => 0,
                'user' => $user_account->uid
            );

            // Create node bookings
            $node = realty_creation_node_booking($options);

            // Returns a message on successful application filed
            $message = '<div id="info-box" >';
            $message .= '<h5>' . t('На Вашу электронную почту было отправлено письмо для подтверждения заявки. Для отправки заявки на квартиру перейдите по ссылке в письме. Сразу после подтверждения, заявка будет отправлена специалистам отдела продаж застройщика.') . '</h5>';
            $message .= '</div>';

            $close_button = '<div class="col-xs-12 modal-button">
    <button type="button" class="ok-button  modal-but" data-dismiss="modal" aria-hidden="true">Закрыть</button>
    </div>';

            $commands[] = ajax_command_html('#ajax-div-modal-booking-form', $message . $close_button);
            $commands[] = ajax_command_html('#div-info-box', '');
            ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

            drupal_exit();
        }
    } // Пользователь авторизован
    elseif($not_login) {

        // Include additinal ajax commands.
        ctools_include('ajax');
        ctools_include('modal');

        // Заполняем опции параметрами из формы
        $options = array(
            'name' => $form_state['values']['name'],
            'number_phone' => $form_state['values']['number_phone'],
            'email' => $form_state['values']['email'],
            'documents' => $form_state['values']['documents'],
            'manager' => $form_state['values']['managers'],
            'entity' => $form_state['values']['entity'],
            'payment' => $form_state['values']['payment'],
            'passport_id' => $form_state['values']['passport_id'],
            'passport_series' => $form_state['values']['passport_series'],
            'date_issue' => $form_state['values']['date_issue'],
            'issued_by' => $form_state['values']['issued_by'],
            'number_contract' => $form_state['values']['number_contract'],
            'bank_name' => $form_state['values']['bank_name'],
            'sum' => $form_state['values']['sum'],
            'submitted' => 1,
            'user' => $user->uid
        );

        // Create node bookings
        $node = realty_creation_node_booking($options);

        // attach documents
        if (!empty($node->field_booking_document)) {
            foreach ($node->field_booking_document[LANGUAGE_NONE] as $val) {
                $files[] = file_load($val['fid']);
            }
        }

        //  find the e-mail manager
        $apt_info = realty_get_info_apartment($options['apartment']);
        $developer = taxonomy_term_load($apt_info['developer_tid']);

        if ($form_state['values']['managers'] == 'sale') {
            $manager_email = $developer->field_email_sale[LANGUAGE_NONE][0]['value'];
        } else {
            $managers = entity_load('field_collection_item', array($form_state['values']['managers']));
            $manager_email = $managers[$form_state['values']['managers']]->field_manager_e_mail[LANGUAGE_NONE][0]['value'];
        }

        // Send a request to the manager
        realty_send_message('booking_request', 'findome@mail.ru', $node, $files);

        realty_send_message('booking_request_user', $options['email'], $node);

        // Change the status of the apartment on the booked
        realty_change_status_apartment($form_state['values']['apartment']);


        // Returns a message on successful application filed
        $message = '<div id="info-box" >';
        $message .= '<h5>' . t('Поздравляем, Вы только что отправили заявку застройщику на обратный звонок! В самое ближайшее время с Вами свяжется специалист отдела продаж!') . '</h5>';
        $message .= '</div>';

        if ($form_state['values']['payment'] == 2 && $form_state['values']['mortgage_applications'][1] == 1) {
            $path_url = '/apartment/' . $options['apartment'] . '/mortgage';
            $commands[] = ctools_ajax_command_redirect($path_url, 5000);
        }

        $close_button = '<div class="col-xs-12 modal-button">
    <button type="button" class="ok-button  modal-but" data-dismiss="modal" aria-hidden="true">Закрыть</button>
    </div>';

        $commands[] = ajax_command_html('#ajax-div-modal-booking-form', $message . $close_button);
        $commands[] = ajax_command_html('#div-info-box', '');
        ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

        drupal_exit();
    }
}

/**
 * Universal sending messages function.
 */
function realty_send_message($type, $recipient, $options = NULL, $files = NULL)
{

    $module = 'realty';
    $from = variable_get('site_mail');

    switch ($type) {
        case 'mortgage_request': {
            $message['params'] = array(
                'id' => 'mortgage',
                'to' => $recipient,
                'subject' => 'Заявка на ипотеку',
                'body' => theme('realty_email_template_mortgage_request', array('node' => $options)),
                'headers' => array(
                    'From' => $from,
                    'Sender' => $from,
                    'Return-Path' => $from,
                    'MIME-Version' => '1.0',
                    'Content-Type' => 'text/html; charset="UTF-8"',
                ),
            );
            break;
        }

        case 'booking_request': {
            $message['params'] = array(
                'id' => 'booking',
                'to' => $recipient,
                'subject' => 'Заявка на обратный звонок',
                'body' => theme('booking_request', array('node' => $options)),
                'headers' => array(
                    'From' => $from,
                    'Sender' => $from,
                    'Return-Path' => $from,
                    'MIME-Version' => '1.0',
                    'Content-Type' => 'text/html; charset="UTF-8"',
                ),
            );

            foreach ($files as $file) {
                $path = file_create_url($file->uri);
                $message['params']['attachments'][] = array(
                    'path' => $path,
                    'filecontent' => file_get_contents($file->uri),
                    'filename' => $file->filename,
                    'mime' => $file->filemime,
                    'encoding' => 'base64',
                    'disposition' => 'attachment',
                    'list' => TRUE,
                );
            }
            break;
        }

        case 'mortgage_request_user': {
            $message['params'] = array(
                'id' => 'mortgage_request_user',
                'to' => $recipient,
                'subject' => t('Заявка в банк успешно отправлена'),
                'body' => theme('mortgage_request_user', array('node' => $options)),
                'headers' => array(
                    'From' => $from,
                    'Sender' => $from,
                    'Return-Path' => $from,
                    'MIME-Version' => '1.0',
                    'Content-Type' => 'text/html; charset="UTF-8"',
                ),
            );
            break;
        }

        case 'booking_request_user': {
            $message['params'] = array(
                'id' => 'booking_request_user',
                'to' => $recipient,
                'subject' => t('Заявка застройщику успешно отправлена.'),
                'body' => theme('booking_request_user', array('node' => $options)),
                'headers' => array(
                    'From' => $from,
                    'Sender' => $from,
                    'Return-Path' => $from,
                    'MIME-Version' => '1.0',
                    'Content-Type' => 'text/html; charset="UTF-8"',
                ),
            );
            break;
        }

        case 'unreservation_notice': {
            $message['params'] = array(
                'id' => 'unreservation_notice',
                'to' => $recipient,
                'subject' => t('Бронь с квартиры снята.'),
                'body' => theme('unreservation_notice', array('node' => $options)),
                'headers' => array(
                    'From' => $from,
                    'Sender' => $from,
                    'Return-Path' => $from,
                    'MIME-Version' => '1.0',
                    'Content-Type' => 'text/html; charset="UTF-8"',
                ),
            );
            break;
        }

        case 'email_verification': {
            $message['params'] = array(
                'id' => 'email_verification',
                'to' => $recipient,
                'subject' => t('Findome - Подтверждение регистрации.'),
                'body' => theme('realty_email_template_register_verification', array('node' => $options)),
                'headers' => array(
                    'From' => $from,
                    'Sender' => $from,
                    'Return-Path' => $from,
                    'MIME-Version' => '1.0',
                    'Content-Type' => 'text/html; charset="UTF-8"',
                ),
            );
            break;
        }

        case 'request_submit': {
            $message['params'] = array(
                'id' => 'y_theme_preprocess_realty_email_template_register_veri',
                'to' => $recipient,
                'subject' => t('Findome - Подтверждение заявки.'),
                'body' => theme('realty_email_template_request_submit', array('node' => $options)),
                'headers' => array(
                    'From' => $from,
                    'Sender' => $from,
                    'Return-Path' => $from,
                    'MIME-Version' => '1.0',
                    'Content-Type' => 'text/html; charset="UTF-8"',
                ),
            );
            break;
        }

        case 'request_feedback': {
            $message['params'] = array(
                'id' => 'request_feedback',
                'to' => $recipient,
                'subject' => t('Findome - Обратная связь.'),
                'body' => theme('realty_email_template_request_feedback', array('options' => $options)),
                'headers' => array(
                    'From' => $from,
                    'Sender' => $from,
                    'Return-Path' => $from,
                    'MIME-Version' => '1.0',
                    'Content-Type' => 'text/html; charset="UTF-8"',
                ),
            );
            break;
        }

    }

    $answer = drupal_mail($module, $message['params']['id'], $message['params']['to'], language_default(), $message);

    return $answer['result'];
}

/**
 * Implement hook_mail()
 */
function realty_mail($key, &$message, $params)
{
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';

    if ($key == 'booking' || $key = 'mortgage') {
        $message['subject'] = $message['params']['params']['subject'];
        $message['body'][] = $message['params']['params']['body'];

        if ($key == 'booking' && !empty($message['params']['params']['attachments'])) {
            foreach ($message['params']['params']['attachments'] as $file) {
                $message['params']['attachments'][] = $file;
            }
        }
    }
}

/**
 *  Found this trick on theoleschool.com.
 *
 *  Description: Allows the view developer to specify the query
 *  group by action in the query comments. Great way to force the
 *  removal of duplicates.
 *
 *  Just go into your query comments and type in "groupby:" with
 *  that colon followed by the field you want to group by.
 *
 *  Examples...
 *  groupby:node.nid
 *  groupby:file_managed_file_usage.fid
 *
 *  Ref-Comment: http://theoleschool.com/comment/496#comment-496
 *  Ref-Article: http://theoleschool.com/blog/using-hookviewsalter-add-group-statement
 */
/*function realty_query_alter(QueryAlterableInterface $query) {
  if ($query->hasTag('views')) {
    static $count;
    $view =& $query->getMetaData('view');

    if (strstr($groupby = $view->query->options['query_comment'], 'groupby')) {
      list($action, $field) = explode(':', $groupby);

      if (strlen($field) > 0) {
        $query->groupBy($field);
      }
    }
  }
}*/

/**
 * Get full info apartment by id node.
 */
function realty_get_info_apartment($id_apartment)
{

    if (!isset($id_apartment)) {
        return 0;
    }

    $info = array();

    $result = db_query("SELECT field_apartament_home_tid FROM field_data_field_apartament_home WHERE entity_id  = :apt_id",
        array(':apt_id' => $id_apartment))->fetchAll();
    $info['home_nid'] = $result[0]->field_apartament_home_tid;

    $result = db_query("SELECT field_home_complex_target_id FROM field_data_field_home_complex WHERE entity_id  = :home_id",
        array(':home_id' => $info['home_nid']))->fetchAll();
    $info['complex_nid'] = $result[0]->field_home_complex_target_id;
    $complex = node_load($info['complex_nid']);
    $info['complex_name'] = $complex->title;

    $result = db_query("SELECT field_complex_developer_tid FROM field_data_field_complex_developer WHERE entity_id  = :complex_id",
        array(':complex_id' => $info['complex_nid']))->fetchAll();
    $info['developer_tid'] = $result[0]->field_complex_developer_tid;

    $term = taxonomy_term_load($info['developer_tid']);

    $info['city_tid'] = $term->field_city[LANGUAGE_NONE][0]['tid'];

    return $info;
}

/**
 * Get city apartments.
 */
function realty_get_city_apartments($id_apartment)
{
    $result = db_select('taxonomy_term_data', 't')
        ->fields('t', array('tid'))
        ->join('field_data_field_apartament_home', 'ah', $id_apartment = 'ah.entity_id')
        ->join('field_revision_field_home_complex', 'hc', 'ah.field_apartament_home_tid = hc.entity_id')
        ->join('field_revision_field_complex_developer', 'cd', 'hc.field_home_complex_target_id = cd.entity_id')
        ->join('field_revision_field_city', 'dc', 'cd.field_complex_developer_tid = dc.entity_id')
        ->execute()
        ->fetchAll();
}


/*
 * Implement hook_token_info.
 */
function realty_token_info()
{

    $tokens['breadcrumbs_city'] = array(
        'name' => t('City'),
        'description' => t('The city of the node.'),
    );

    $tokens['breadcrumbs_city_id'] = array(
        'name' => t('City'),
        'description' => t('The city of the node.'),
    );

    $tokens['breadcrumbs_appartment_complex'] = array(
        'name' => t('City'),
        'description' => t('The city of the node.'),
    );

    $tokens['breadcrumbs_appartment_complex_id'] = array(
        'name' => t('City'),
        'description' => t('The city of the node.'),
    );

    $tokens['breadcrumbs_appartment_city'] = array(
        'name' => t('City'),
        'description' => t('The city of the node.'),
    );

    $tokens['breadcrumbs_appartment_city_id'] = array(
        'name' => t('City'),
        'description' => t('The city of the node.'),
    );

    $tokens['breadcrumbs_appartment_title'] = array(
        'name' => t('City'),
        'description' => t('The city of the node.'),
    );

    $tokens['complex_apartment'] = array(
        'name' => t('Complex'),
        'description' => t('The complex of the apartment.'),
    );

    $tokens_current_page['all_complexes'] = array(
        'name' => t('Complexes'),
        'description' => t('All complexes.'),
    );

    $tokens_current_page['all_developers'] = array(
        'name' => t('Developers'),
        'description' => t('All developers.'),
    );
    $tokens_current_page['all_banks'] = array(
        'name' => t('Banks'),
        'description' => t('All banks.'),
    );


    return array(
        'tokens' => array(
            'node' => $tokens,
            'current-page' => $tokens_current_page
        ),
    );
}

/**
 * Implements hook_tokens().
 */
function realty_tokens($type, $tokens, array $data = array(), array $options = array())
{
    $replacements = array();

    if ($type == 'term' && !empty($data['term'])) {

        foreach ($tokens as $name => $original) {
            if ($name == 'breadcrumbs_city') {
                $term_city = taxonomy_term_load($data['term']->field_city[LANGUAGE_NONE][0]['tid']);
                $replacements[$original] = $term_city->name;
                break;
            }
            if ($name == 'breadcrumbs_city_id') {
                $term_city_id = $data['term']->field_city[LANGUAGE_NONE][0]['tid'];
                $replacements[$original] = $term_city_id;
                break;
            }
            if ($name == 'title') {
                $term_name = $data['term']->name;
                $replacements[$original] = $term_name;
                break;
            }
        }
    } else if ($type == 'node' && !empty($data['node'])) {

        $node = $data['node'];

        foreach ($tokens as $name => $original) {
            if ($name == 'breadcrumbs_city') {
                if ($node->nid == '1316') {
                    $replacements[$original] = 'Главная';
                } else {
                    $cl_dev = taxonomy_term_load($node->field_complex_developer[LANGUAGE_NONE][0]['tid']);
                    $cl_city = taxonomy_term_load($cl_dev->field_city[LANGUAGE_NONE][0]['tid']);
                    $replacements[$original] = $cl_city->name;
                    break;
                }
            }
            if ($name == 'breadcrumbs_city_id') {
                if ($node->type == 'complex') {
                    $cl_dev = taxonomy_term_load($node->field_complex_developer[LANGUAGE_NONE][0]['tid']);
                    $cl_city_id = $cl_dev->field_city[LANGUAGE_NONE][0]['tid'];
                    $replacements[$original] = $cl_city_id;
                    break;
                }
                if ($node->type == 'apartament') {
                    $cl_city_id = realty_get_city_apartments($node->nid);
                    $replacements[$original] = $cl_city_id;
                    break;
                }
            }
            if ($name == 'breadcrumbs_appartment_city') {
                $info = realty_get_info_apartment($node->nid);

                $term = taxonomy_term_load($info['city_tid']);

                $city_name = $term->name;
                $replacements[$original] = $city_name;
                break;
            }
            if ($name == 'breadcrumbs_appartment_city_id') {
                $info = realty_get_info_apartment($node->nid);
                $replacements[$original] = $info['city_tid'];
                break;
            }
            if ($name == 'breadcrumbs_appartment_complex') {
                $info = realty_get_info_apartment($node->nid);

                $node = node_load($info['complex_nid']);

                $complex_name = $node->title;
                $replacements[$original] = $complex_name;
                break;
            }
            if ($name == 'breadcrumbs_appartment_complex_id') {
                $info = realty_get_info_apartment($node->nid);
                $replacements[$original] = $info['complex_nid'];
                break;
            }
            if ($name == 'breadcrumbs_appartment_title') {
                $node = node_load($node->nid);

                $replacements[$original] = 'квартира №' . $node->field_number_apartament[LANGUAGE_NONE][0]['safe_value'];
                break;
            }
            if ($name == 'complex_apartment') {
                $info = realty_get_info_apartment($node->nid);
                $replacements[$original] = $info['complex_name'];
                break;
            }

        }
    } else if ($type == 'current-page') {
        foreach ($tokens as $name => $original) {
            if ($name == 'all_complexes') {
                $complexes = realty_get_complex_current_city(NULL, arg(2));
                $i = 0;
                foreach ($complexes as $complex) {
                    $i == 0 ? $replacements[$original] = $complex :
                        $replacements[$original] .= ', ' . $complex;
                    $i++;
                }
                break;
            }

            if ($name == 'all_developers') {
                $developers = realty_get_developer_current_city();
                $i = 0;
                foreach ($developers as $developer) {
                    $i == 0 ? $replacements[$original] = $developer :
                        $replacements[$original] .= ', ' . $developer;
                    $i++;
                }
                break;
            }

            if ($name == 'all_banks') {
                $banks = taxonomy_get_tree(20);
                $i = 0;
                foreach ($banks as $bank) {
                    $i == 0 ? $replacements[$original] = $bank->name :
                        $replacements[$original] .= ', ' . $bank->name;
                    $i++;
                }
                break;
            }

        }
    }

    return $replacements;
}

/**
 * Implements hook_theme_registry_alter().
 */
function realty_theme_registry_alter(&$theme_registry)
{
    global $theme_key;

    $internal_render = variable_get('path_breadcrumbs_internal_render', 1);
    $themes = variable_get('path_breadcrumbs_internal_render_themes', array());

    if ($internal_render && (empty($themes) || in_array($theme_key, $themes))) {
        $theme_registry['breadcrumb']['theme path'] = drupal_get_path('themes', 'realty_theme');
    }
}

/**
 * Implements hook_head_alter().
 */
function realty_html_head_alter(&$head_elements)
{
    $head_elements['system_meta_content_type']['#attributes'] = array(
        'http-equiv' => 'X-UA-Compatible',
        'content' => 'IE=edge',
    );
}

/**
 * Check the limit applications for reservations
 */
function realty_limit_booking_apartment($node_complex)
{
    global $user;


    $time = time() - 24 * 3600;

    $result = db_query("SELECT node.nid
        FROM node
        LEFT JOIN field_data_field_booking_user ON node.nid = field_data_field_booking_user.entity_id
        LEFT JOIN field_data_field_booking_apartment ON node.nid = field_data_field_booking_apartment.entity_id
        WHERE node.type = 'booking' AND field_data_field_booking_user.field_booking_user_target_id = :user AND node.created > :time
        AND field_data_field_booking_apartment.field_booking_apartment_target_id IN (SELECT node.nid
            FROM node
            LEFT JOIN field_data_field_apartament_home ON node.nid = field_data_field_apartament_home.entity_id
            LEFT JOIN field_data_field_home_complex ON field_data_field_apartament_home.field_apartament_home_tid = field_data_field_home_complex.entity_id
            WHERE field_data_field_home_complex.field_home_complex_target_id = :complex)
        ", array(':user' => $user->uid, ':complex' => $node_complex->nid, ':time' => $time))->fetchAll();

    if (count($result) >= 2) {
        return FALSE;
    } else {
        return TRUE;
    }
}

/**
 * Get home complex
 */
function realty_get_home_complex($complex_nid)
{
    $result = db_query("SELECT taxonomy_term_data.tid
        FROM taxonomy_term_data
        LEFT JOIN field_data_field_home_complex ON taxonomy_term_data.tid = field_data_field_home_complex.entity_id
        WHERE field_data_field_home_complex.field_home_complex_target_id = :complex_nid
        ", array(':complex_nid' => $complex_nid))->fetchAll();

    return $result;
}

/**
 *  Implement hook_taxonomy_term_view.
 */
function realty_taxonomy_term_view($term)
{
    if ($term->vid == 1) {
        drupal_add_js(array(
            'id' => 'index',
            'city' => $term->tid,), 'setting');
    }
    if ($term->vid == 3) {
        if ($term->field_developer_public[LANGUAGE_NONE][0]['value'] == 0) {
            drupal_goto('/');
        }
    }

}

/**
 *  The number of apartments active in a complex
 */
function realty_get_count_apartment_complex($complex_nid)
{
    $db_query = "SELECT SUM(field_data_field_home_quantity_1_room.field_home_quantity_1_room_value + field_data_field_home_quantity_1c_room.field_home_quantity_1c_room_value) AS count_1_rooms,
                       SUM(field_data_field_home_quantity_2_room.field_home_quantity_2_room_value + field_data_field_home_quantity_2c_room.field_home_quantity_2c_room_value) AS count_2_rooms,
                       SUM(field_data_field_home_quantity_3_room.field_home_quantity_3_room_value + field_data_field_home_quantity_3c_room.field_home_quantity_3c_room_value) AS count_3_rooms,
                       SUM(field_data_field_home_quantity_other_room.field_home_quantity_other_room_value + field_data_field_home_quantity_otherc_room.field_home_quantity_otherc_room_value) AS count_other_rooms
                FROM field_data_field_home_quantity_1_room
                  LEFT JOIN field_data_field_home_quantity_1c_room ON field_data_field_home_quantity_1c_room.entity_id = field_data_field_home_quantity_1_room.entity_id
                  LEFT JOIN field_data_field_home_quantity_2_room ON field_data_field_home_quantity_2_room.entity_id = field_data_field_home_quantity_1_room.entity_id
                  LEFT JOIN field_data_field_home_quantity_2c_room ON field_data_field_home_quantity_2c_room.entity_id = field_data_field_home_quantity_1_room.entity_id
                  LEFT JOIN field_data_field_home_quantity_3_room ON field_data_field_home_quantity_3_room.entity_id = field_data_field_home_quantity_1_room.entity_id
                  LEFT JOIN field_data_field_home_quantity_3c_room ON field_data_field_home_quantity_3c_room.entity_id = field_data_field_home_quantity_1_room.entity_id
                  LEFT JOIN field_data_field_home_quantity_other_room ON field_data_field_home_quantity_other_room.entity_id = field_data_field_home_quantity_1_room.entity_id
                  LEFT JOIN field_data_field_home_quantity_otherc_room ON field_data_field_home_quantity_otherc_room.entity_id = field_data_field_home_quantity_1_room.entity_id
                  LEFT JOIN field_data_field_home_complex ON field_data_field_home_complex.entity_id = field_data_field_home_quantity_1_room.entity_id
                WHERE field_data_field_home_complex.field_home_complex_target_id = :complex_nid";

    $db_args[':complex_nid'] = $complex_nid;

    $db_count_apartments = db_query($db_query, $db_args)->fetchAll();

    return $db_count_apartments;
}

/**
 *  Return all assesmen of developer review
 */
function realty_get_assessmen_developer_review($tid_developer)
{
    $query = "SELECT field_data_field_comment_assessment.field_comment_assessment_value AS assessmen
              FROM field_data_field_review_developer_developer
                LEFT JOIN comment ON comment.nid = field_data_field_review_developer_developer.entity_id
                LEFT JOIN field_data_field_comment_assessment ON field_data_field_comment_assessment.entity_id = comment.cid
              WHERE field_data_field_review_developer_developer.field_review_developer_developer_target_id = :tid_developer
              AND field_data_field_comment_assessment.field_comment_assessment_value IS NOT NULL";

    $query_args = array(
        ':tid_developer' => $tid_developer,
    );

    $db_query = db_query($query, $query_args)->fetchCol();

    return $db_query;
}

/**
 *  Return all assesmen of developer
 */
function realty_get_assessmen_developer($tid_developer)
{
    $query = "SELECT field_data_field_developer_assessmens_value.field_developer_assessmens_value_value
              FROM field_data_field_developer_assessmens
                LEFT JOIN field_data_field_developer_assessmens_value ON field_data_field_developer_assessmens_value.entity_id = field_data_field_developer_assessmens.field_developer_assessmens_value
              WHERE field_data_field_developer_assessmens.entity_id = :tid_developer
                AND field_data_field_developer_assessmens_value.field_developer_assessmens_value_value IS NOT NULL";

    $query_args = array(
        ':tid_developer' => $tid_developer,
    );

    $db_query = db_query($query, $query_args)->fetchCol();;

    return $db_query;
}

/**
 *  Return avg assesmen of developer review
 */
function realty_get_count_assessmen_review($nid)
{
    $query_positive = "SELECT count(field_data_field_comment_assessment.field_comment_assessment_value) AS positive
                      FROM field_data_field_comment_assessment
                        LEFT JOIN comment ON comment.cid = field_data_field_comment_assessment.entity_id
                      WHERE field_data_field_comment_assessment.field_comment_assessment_value > 0
                            AND comment.nid = :nid_complex
                            AND comment.status = 1";

    $query_negative = "SELECT count(field_data_field_comment_assessment.field_comment_assessment_value) AS negative
                      FROM field_data_field_comment_assessment
                        LEFT JOIN comment ON comment.cid = field_data_field_comment_assessment.entity_id
                      WHERE field_data_field_comment_assessment.field_comment_assessment_value < 0
                            AND comment.nid = :nid_complex
                            AND comment.status = 1";

    $query_args = array(
        ':nid_complex' => $nid,
    );

    $review_positive = db_query($query_positive, $query_args)->fetchAll();
    $review_negative = db_query($query_negative, $query_args)->fetchAll();

    return array(
        'positive' => $review_positive[0]->positive,
        'negative' => $review_negative[0]->negative
    );
}

/**
 *  The number of apartments active in a complex
 */
function realty_get_apartment_active_complex($complex_nid, $room = NULL)
{
    if ($room == NULL) {
        $result = db_query("SELECT count(node.nid) AS count
        FROM node
        LEFT JOIN field_data_field_status ON node.nid = field_data_field_status.entity_id
        LEFT JOIN field_data_field_apartament_home ON node.nid = field_data_field_apartament_home.entity_id
        LEFT JOIN field_data_field_home_complex ON field_data_field_apartament_home.field_apartament_home_tid = field_data_field_home_complex.entity_id
        WHERE node.type = 'apartament'
        AND node.status = 1
        AND field_data_field_status.field_status_value = 1
        AND field_data_field_home_complex.field_home_complex_target_id = :complex_nid
        ", array(':complex_nid' => $complex_nid))->fetchAll();
    } else {
        $result = db_query("SELECT count(node.nid) AS count
        FROM node
        LEFT JOIN field_data_field_status ON node.nid = field_data_field_status.entity_id
        LEFT JOIN field_data_field_apartament_home ON node.nid = field_data_field_apartament_home.entity_id
        LEFT JOIN field_data_field_home_complex ON field_data_field_apartament_home.field_apartament_home_tid = field_data_field_home_complex.entity_id
        LEFT JOIN field_data_field_number_rooms ON node.nid = field_data_field_number_rooms.entity_id
        WHERE node.type = 'apartament'
        AND node.status = 1
        AND field_data_field_status.field_status_value = 1
        AND field_data_field_home_complex.field_home_complex_target_id = :complex_nid
        AND field_data_field_number_rooms.field_number_rooms_value IN (:room)
        ", array(':complex_nid' => $complex_nid, ':room' => $room))->fetchAll();
    }

    return $result[0]->count;
}

/**
 *  The number of apartments active in a developer
 */
function realty_get_apartment_active_developer($developer_tid, $room = NULL)
{
    if ($room == NULL) {
        $result = db_query("SELECT count(node.nid) AS count
        FROM node
        LEFT JOIN field_data_field_status ON node.nid = field_data_field_status.entity_id
        LEFT JOIN field_data_field_apartament_home ON node.nid = field_data_field_apartament_home.entity_id
        LEFT JOIN field_data_field_home_complex ON field_data_field_apartament_home.field_apartament_home_tid = field_data_field_home_complex.entity_id
        LEFT JOIN field_data_field_complex_developer ON field_data_field_home_complex.field_home_complex_target_id = field_data_field_complex_developer.entity_id
        WHERE node.type = 'apartament'
        AND node.status = 1
        AND field_data_field_status.field_status_value = 1
        AND field_data_field_complex_developer.field_complex_developer_tid = :developer_tid
        ", array(':developer_tid' => $developer_tid))->fetchAll();
    } else {
        $result = db_query("SELECT count(node.nid) AS count
        FROM node
        LEFT JOIN field_data_field_status ON node.nid = field_data_field_status.entity_id
        LEFT JOIN field_data_field_apartament_home ON node.nid = field_data_field_apartament_home.entity_id
        LEFT JOIN field_data_field_home_complex ON field_data_field_apartament_home.field_apartament_home_tid = field_data_field_home_complex.entity_id
        LEFT JOIN field_data_field_number_rooms ON node.nid = field_data_field_number_rooms.entity_id
        LEFT JOIN field_data_field_complex_developer ON field_data_field_home_complex.field_home_complex_target_id = field_data_field_complex_developer.entity_id
        WHERE node.type = 'apartament'
        AND node.status = 1
        AND field_data_field_status.field_status_value = 1
        AND field_data_field_complex_developer.field_complex_developer_tid = :developer_tid
        AND field_data_field_number_rooms.field_number_rooms_value IN (:room)
        ", array(':developer_tid' => $developer_tid, ':room' => $room))->fetchAll();
    }

    return $result[0]->count;
}

/**
 *  Поиск минимальной и максимальной стоимости квартир в продаже у Жилого комплекса
 */
function realty_get_min_max_cost_active_apartment_complex($nid_complex)
{
    $query = "SELECT MIN(field_data_field_full_cost.field_full_cost_value) AS cost_min,
              MAX(field_data_field_full_cost.field_full_cost_value) AS cost_max
            FROM field_data_field_full_cost
              LEFT JOIN node node_apartment ON node_apartment.nid = field_data_field_full_cost.entity_id
              LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = field_data_field_full_cost.entity_id
              LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = field_data_field_full_cost.entity_id
              LEFT JOIN field_data_field_home_complex ON field_data_field_home_complex.entity_id = field_data_field_apartament_home.field_apartament_home_tid
            WHERE node_apartment.status = 1
                  AND field_data_field_status.field_status_value = 1
                  AND field_data_field_home_complex.field_home_complex_target_id = :nid_complex";

    $args = array(
        ':nid_complex' => $nid_complex,
    );

    $query_result = db_query($query, $args)->fetchAll();

    return $query_result;
}

/**
 *  Search the average cost per square meter in the complex
 */
function realty_get_average_price_apartment_complex($complex_nid, $room = array())
{
    if (empty($room)) {
        $query_avg_price = "SELECT AVG(field_data_field_price.field_price_value) AS apartment_avg_price
                          FROM field_data_field_price
                            LEFT JOIN node ON node.nid = field_data_field_price.entity_id
                            LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                            LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                            LEFT JOIN field_data_field_home_complex ON field_data_field_home_complex.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                          WHERE node.type = 'apartament'
                                AND field_data_field_status.field_status_value = 1
                                AND node.status = 1
                                AND field_data_field_home_complex.field_home_complex_target_id = :nid_complex";

        $args = array(
            ':nid_complex' => $complex_nid
        );
    } else {
        $query_avg_price = "SELECT AVG(field_data_field_price.field_price_value) AS apartment_avg_price
                          FROM field_data_field_price
                            LEFT JOIN node ON node.nid = field_data_field_price.entity_id
                            LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                            LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                            LEFT JOIN field_data_field_number_rooms ON node.nid = field_data_field_number_rooms.entity_id
                            LEFT JOIN field_data_field_home_complex ON field_data_field_home_complex.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                          WHERE node.type = 'apartament'
                                AND field_data_field_status.field_status_value = 1
                                AND node.status = 1
                                AND field_data_field_home_complex.field_home_complex_target_id = :nid_complex
                                AND field_data_field_number_rooms.field_number_rooms_value IN (:room)";

        $args = array(
            ':nid_complex' => $complex_nid, ':room' => $room
        );
    }

    $query_avg_price = db_query($query_avg_price, $args)->fetchAll();

    $price_clean = str_replace(" ", "", $query_avg_price[0]->apartment_avg_price);
    !empty($price_clean) ? $price_render = number_format($price_clean, 0, ',', ' ') : $price_render = 0;

    return $price_render;
}

/**
 *  Search the average cost per square meter in the developer
 */
function realty_get_average_price_apartment_developer($developer_tid, $room = array())
{
    if (empty($room)) {
        $query_avg_price = "SELECT AVG(field_data_field_price.field_price_value) AS apartment_avg_price
                          FROM field_data_field_price
                            LEFT JOIN node ON node.nid = field_data_field_price.entity_id
                            LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                            LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                            LEFT JOIN field_data_field_home_complex ON field_data_field_home_complex.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                            LEFT JOIN field_data_field_complex_developer ON field_data_field_home_complex.field_home_complex_target_id = field_data_field_complex_developer.entity_id
                          WHERE node.type = 'apartament'
                                AND field_data_field_status.field_status_value = 1
                                AND node.status = 1
                                AND field_data_field_complex_developer.field_complex_developer_tid = :tid_developer";

        $args = array(
            ':tid_developer' => $developer_tid
        );
    } else {
        $query_avg_price = "SELECT AVG(field_data_field_price.field_price_value) AS apartment_avg_price
                          FROM field_data_field_price
                            LEFT JOIN node ON node.nid = field_data_field_price.entity_id
                            LEFT JOIN field_data_field_status ON field_data_field_status.entity_id = node.nid
                            LEFT JOIN field_data_field_apartament_home ON field_data_field_apartament_home.entity_id = node.nid
                            LEFT JOIN field_data_field_number_rooms ON node.nid = field_data_field_number_rooms.entity_id
                            LEFT JOIN field_data_field_home_complex ON field_data_field_home_complex.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                            LEFT JOIN field_data_field_complex_developer ON field_data_field_home_complex.field_home_complex_target_id = field_data_field_complex_developer.entity_id
                          WHERE node.type = 'apartament'
                                AND field_data_field_status.field_status_value = 1
                                AND node.status = 1
                                AND field_data_field_complex_developer.field_complex_developer_tid = :tid_developer
                                AND field_data_field_number_rooms.field_number_rooms_value IN (:room)";

        $args = array(
            ':tid_developer' => $developer_tid, ':room' => $room
        );
    }

    $query_avg_price = db_query($query_avg_price, $args)->fetchAll();
    $price_clean = str_replace(" ", "", $query_avg_price[0]->apartment_avg_price);
    !empty($price_clean) ? $price_render = number_format($price_clean, 0, ',', ' ') : $price_render = 0;

    return $price_render;
}

/**
 * Page callback to /realty/feedback.
 */
function realty_feedback()
{

    $request_callback_form = drupal_get_form('realty_request_callback_form', 'callback');
    $request_excur_form = drupal_get_form('realty_request_callback_form', 'excur');
    $request_question_form = drupal_get_form('realty_request_callback_form', 'question');
    $request_selection_form = drupal_get_form('realty_request_callback_form', 'selection');


    return '<div style="padding-top: 100px">
            <div id="div-info-box-feedback"></div>' .
    render($request_callback_form) .
    render($request_excur_form) .
    render($request_question_form) .
    render($request_selection_form) .
    '</div>';
}

/**
 * Implement hook_forms.
 */
function realty_forms($form_id, $args)
{

    $forms = array();

    if (strpos($form_id, 'realty_request_callback_form') === 0) {
        $forms['realty_request_callback_form' . $args[0]['id']] = array(
            'callback' => 'realty_request_callback_form',
        );
    }

    return $forms;
}

/**
 * Implement hook_form.
 */
function realty_request_callback_form($form, $form_state, $i)
{

    $arg = arg(2);
    if ($arg) {
        $entity = db_query("SELECT vid FROM taxonomy_term_data WHERE tid = :arg", array(':arg' => $arg))->fetchAll();
        if ($entity[0]->vid == 1) {
            $city_tid = $arg;
        }
        if ($entity[0]->vid == 3) {
            $city = db_query("SELECT field_data_field_city.field_city_tid FROM field_data_field_city
                        WHERE field_data_field_city.entity_id = :arg", array(':arg' => $arg))->fetchAll();

            $city_tid = $city[0]->field_city_tid;
        }
    } else {
        $arg = arg(1);
        $entity = db_query("SELECT type FROM node WHERE nid = :arg", array(':arg' => $arg))->fetchAll();
        if ($entity[0]->type == 'complex') {
            $city = db_query("SELECT field_data_field_city.field_city_tid FROM field_data_field_city
                        WHERE field_data_field_city.entity_id IN(
                          SELECT field_complex_developer_tid FROM field_data_field_complex_developer
                          WHERE entity_id = :arg)",
                array(':arg' => $arg))->fetchAll();

            $city_tid = $city[0]->field_city_tid;
        }

        if ($entity[0]->type == 'apartament') {
            $city = db_query("SELECT field_data_field_city.field_city_tid FROM field_data_field_city
                        WHERE field_data_field_city.entity_id IN(
                          SELECT field_complex_developer_tid FROM field_data_field_complex_developer
                          WHERE entity_id IN(
                            SELECT field_home_complex_target_id FROM field_data_field_home_complex
                            LEFT JOIN field_data_field_apartament_home ON field_data_field_home_complex.entity_id = field_data_field_apartament_home.field_apartament_home_tid
                            WHERE field_data_field_apartament_home.entity_id = :arg))",
                array(':arg' => $arg))->fetchAll();

            $city_tid = $city[0]->field_city_tid;
        }
    }

    $complexes = realty_get_complex_current_city(NULL, $city_tid);

    $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Имя'),
        '#attributes' => array(
            'placeholder' => t('Имя')
        ),
        '#required' => TRUE,
    );


    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#attributes' => array(
            'placeholder' => t('Email')
        )
    );

    if ($i == 'callback' || $i == 'excur') {

        switch ($i) {
            case 'callback':
                $pl_h = t('Желаемое время и дата звонка');
                break;
            case 'excur':
                $pl_h = t('Желаемое время и дата экскурсии');
                break;
            case 'selection':
                $pl_h = t('Укажите свои пожелания и предпочтения: тип квартиры, стоимость, район и т.д.');
                break;
        }

        $form['date_time'] = array(
            '#type' => 'textarea',
            '#attributes' => array(
                'placeholder' => $pl_h
            )
        );

    }

    if ($i == 'question' || $i == 'selection') {
        switch ($i) {
            case 'question':
                $pl_h = t('Желаемое время и дата звонка');
                break;
            case 'selection':
                $pl_h = t('Укажите свои пожелания и предпочтения: тип квартиры, стоимость, район и т.д.');
                break;
        }

        $form['question'] = array(
            '#type' => 'textarea',
            '#attributes' => array(
                'placeholder' => $pl_h
            )
        );

    }

    if ($i == 'excur') {
        $form['complexes'] = array(
            '#type' => 'select',
            '#title' => t('ЖК'),
            '#options' => $complexes,
            '#attributes' => array(
                'class' => array('form-control')
            )
        );
    }

    $form['phone'] = array(
        '#type' => 'textfield',
        '#title' => t('Phone number'),
        '#attributes' => array(
            'placeholder' => t('Телефон')
        )
    );

    $form['type'] = array(
        '#type' => 'hidden',
        '#value' => $i
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#attributes' => array(
            'class' => array('button-feedback', 'use-ajax-submit'),
        ),
        '#ajax' => array(
            'callback' => 'realty_request_callback_form_submit',
            'validate' => 'realty_request_callback_form_validate'
        ),
        '#value' => t('Отправить'),
    );

    $form['#theme'] = 'realty_feedback_form';

    return $form;
}

/**
 * Validate for realty_request_callback_form
 */
function realty_request_callback_form_validate($form, &$form_state)
{

    $commands = array();
    $error = FALSE;

    if ($form_state['values']['type'] == 'excur' || $form_state['values']['type'] == 'callback' || $form_state['values']['type'] == 'selection') {
        if (empty($form_state['values']['phone'])) {
            $commands[] = ajax_command_invoke('.' . $form_state['values']['type'] . ' input[name="phone"]', 'addClass', array('fb-error'));
            $error = TRUE;
        }
    }

    if ($form_state['values']['type'] == 'question' || $form_state['values']['type'] == 'selection') {
        if (empty($form_state['values']['question'])) {
            $commands[] = ajax_command_invoke('.' . $form_state['values']['type'] . ' textarea[name="question"]', 'addClass', array('fb-error'));
            $error = TRUE;
        }
    }

    if ($form_state['values']['type'] == 'question' && empty($form_state['values']['email'])) {
        $commands[] = ajax_command_invoke('.' . $form_state['values']['type'] . ' input[name="email"]', 'addClass', array('fb-error'));
        $error = TRUE;
    }


    if (empty($form_state['values']['name'])) {
        $commands[] = ajax_command_invoke('.' . $form_state['values']['type'] . ' input[name="name"]', 'addClass', array('fb-error'));
        $error = TRUE;
    }

    //$commands[] = ajax_command_invoke('.realty-preload', 'fadeOut', array('0'));


    if ($error) {
        ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
        drupal_exit();
    }

}

/**
 * Submit for realty_request_callback_form.
 */
function realty_request_callback_form_submit($form, $form_state)
{
    //$admin = user_load(1);

    realty_send_message('request_feedback', 'findome@mail.ru', $form_state['values']);

    $name = $form_state['values']['name'];
    $form_state['values']['email'] ? $email = $form_state['values']['email'] : $email = NULL;
    $form_state['values']['phone'] ? $phone = $form_state['values']['phone'] : $phone = NULL;
    $form_state['values']['date_time'] ? $date_time = $form_state['values']['date_time'] : $date_time = NULL;
    $form_state['values']['complex'] ? $complex = $form_state['values']['complex'] : $complex = NULL;
    $form_state['values']['question'] ? $question = $form_state['values']['question'] : $question = NULL;
    $form_state['values']['complexes'] ? $complex = $form_state['values']['complexes'] : $complex = NULL;
    $type = $form_state['values']['type'];

    $date = time();

    db_query("INSERT INTO realty.realty_feedback (
                         realty_feedback.name,
                          realty_feedback.email,
                          realty_feedback.phone,
                          realty_feedback.date_callback,
                          realty_feedback.questions_offers,
                          realty_feedback.complex,
                          realty_feedback.type,
                          realty_feedback.date
                          )
              VALUES (
              :name_s,
              :email,
              :phone,
              :date_callback,
              :questions_offers,
              :complex,
              :type,
              :date_s)",

        array(
            ':name_s' => $name,
            ':email' => $email,
            ':phone' => $phone,
            ':date_callback' => $date_time,
            ':questions_offers' => $question,
            ':complex' => $complex,
            ':type' => $type,
            ':date_s' => $date,)
    );


    //$commands[] = ajax_command_invoke('.realty-preload', 'fadeOut', array('0'));

    $commands[] = ajax_command_html('.' . $form_state['values']['type'] . '_info', '<p>Спасибо!<br> Ваша заявка отправлена.</p>');

    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

    drupal_exit();
}
